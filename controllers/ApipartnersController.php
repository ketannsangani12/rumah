<?php

namespace app\controllers;

use app\models\AgentRatings;
use app\models\BankAccounts;
use app\models\BookingRequests;
use app\models\Chats;
use app\models\EmailTemplates;
use app\models\FavouriteProperties;
use app\models\GoldTransactions;
use app\models\Ilifestyle;
use app\models\Images;
use app\models\Istories;
use app\models\PromoCodes;
use app\models\Properties;
use app\models\PropertyRatings;
use app\models\PropertyViews;
use app\models\ServicerequestImages;
use app\models\ServiceRequests;
use app\models\TodoDocuments;
use app\models\TodoItems;
use app\models\TodoList;
use app\models\Topups;
use app\models\Transactions;
use app\models\TransactionsItems;
use app\models\UsersDocuments;
use app\models\Withdrawals;
use app\models\Workers;
use Da\QrCode\QrCode;
use sizeg\jwt\JwtHttpBearerAuth;
use yii\db\ActiveQuery;
use yii\db\Exception;
use yii\db\Transaction;
use yii\debug\models\search\User;
use yii\filters\auth\HttpBearerAuth;
use yii\swiftmailer\Mailer;
use yii\web\NotFoundHttpException;
use Codeception\Events;
use Yii;
use yii\rest\ActiveController;
use yii\web\Response;
use yii\filters\ContentNegotiator;
use app\models\Users;
use yii\filters\auth\HttpBasicAuth;
use yii\web\UploadedFile;
use yii\helpers\Url;
//use paragraph1\phpFCM\Recipient\Device;
class ApipartnersController extends ActiveController
{
    public $modelClass = 'app\models\Users';
    private $language = 1;
    public $baseurl = null;
    private $user_id;
    public static function allowedDomains()
    {
        return [
            '*',                        // star allows all domains
            // 'http://localhost:3000',
            // 'http://test2.example.com',
        ];
    }
    public function init()
    {

        if($_SERVER['HTTP_HOST'] != 'rumah.test') {
            $this->baseurl = Url::base('https');
        }else{
            $this->baseurl = Url::base(true);
        }

        parent::init(); // TODO: Change the autogenerated stub
    }

    public  function actionPrint($data){
        echo "<pre>";print_r($data);exit;
    }
    /**
     * {@inheritdoc}
     */
//    public function behaviors()
//    {
//
//        return [
//            'contentNegotiator' => [
//                'class' => ContentNegotiator::className(),
//                'formats' => [
//                    'application/json' => Response::FORMAT_JSON,
//                ]
//            ],
//
//        ];
//    }

    public function behaviors()
    {

        return [
            'contentNegotiator' => [
                'class' => ContentNegotiator::className(),
                'formats' => [
                    'application/json' => Response::FORMAT_JSON,
                ]
            ],

        ];
    }
    public function beforeAction($action)
    {
        header('Access-Control-Allow-Origin: *');

        header('Access-Control-Allow-Methods: GET, POST, OPTIONS');

        header("Access-Control-Allow-Headers: X-Requested-With,token,user");
        parent::beforeAction($action);

        if ($action->actionMethod != 'actionLogin' && $action->actionMethod != 'actionRegister' && $action->actionMethod!='actionForgotpassword' && $action->actionMethod!='actionAddrefferal' && $action->actionMethod!='actionVerifyotp' && $action->actionMethod!='actionResendotp') {
            $headers = Yii::$app->request->headers;
            if(!empty($headers) && isset($headers['token']) && $headers['token']!=''){
                try{
                    $token = Yii::$app->jwt->getParser()->parse((string) $headers['token']);
                    $data = Yii::$app->jwt->getValidationData(); // It will use the current time to validate (iat, nbf and exp)
                    $data->setIssuer(\Yii::$app->params[ 'hostInfo' ]);
                    $data->setAudience(\Yii::$app->params[ 'hostInfo' ]);
                    $data->setId('4f1g23a12aa');
                    // $data->setCurrentTime(time() + 61);
                    if($token->validate($data)){
                        $userdata = $token->getClaim('uid');
                        $this->user_id = $userdata->id;
                        return true;


                    }else{
                        echo json_encode(array('status' => 0, 'message' => 'Authentication Failed.'));exit;

                    }
                }catch (Exception $e) {
                    echo json_encode(array('status' => 0, 'message' => 'Authentication Failed.'));exit;

                }

                //var_dump($token->validate($data));exit;

                //return true;
            }else{

                echo json_encode(array('status' => 0, 'message' => 'Authentication Failed.'));exit;
            }
            //exit;
        }
        return true;


    }



    //Login users
    public function actionLogin()
    {
        $baseurl = $this->baseurl;
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)){

                $model = new Users();
                $model->scenario = 'login';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){
                    $userexist = Users::find()->where([
                        'email' => $model->email,
                        'password' => md5($model->password)
                    ])->andWhere(['in','role',['Cleaner','Mover','Agent','Laundry','Handyman']])->asArray()->one();

                    if(!empty($userexist)){

                            $userexist['referral_code'] = Users::getReferralCode($userexist['id']);

                            $token = (string) Users::generateToken($userexist);
                            return array('status' => 1, 'message' => 'User Logged in Successfully', 'data' => $userexist,'token'=>$token);




                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong email or password.');
                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }

            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }

    public function actionRegister()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $refferal_code = (isset($_POST['referral_code']))?$_POST['referral_code']:'';

                $model = new Users();
                $model->scenario = 'registeragent';
                $model->attributes = Yii::$app->request->post();
                $model->agentcard = $uploads = UploadedFile::getInstanceByName('agentcard');

                if($model->validate()){
                    $model->referral_code = NULL;
                    $model->role = 'Agent';
                    $model->password = md5(Yii::$app->request->post('password'));
                    $model->verify_token = Yii::$app->getSecurity()->generateRandomString();
                    $model->created_at = date('Y-m-d h:i:s');
                    $newFileName = \Yii::$app->security
                            ->generateRandomString().'.'.$model->agentcard->extension;
                    $model->agent_card = $newFileName;
                    $model->agentcard->saveAs('uploads/users/' . $newFileName);
                    $model->agentcard = null;

                    $save = $model->save(false);

                    if($save){
                        $contact_no = $model->contact_no;

                        if($contact_no!=''){
                            $curl = curl_init();
//60126479285
                            curl_setopt_array($curl, array(
                                CURLOPT_URL => "https://secure.etracker.cc/MobileOTPAPI/SMSOTP/OTPGenerate?user=TEST177&pass=SyR%26PbN0&from=RUMAH&servid=MES01&ApiReturnType=2&text=Your%20Rumah-i%20pincode%20is%20%3COTPCode%3E.&to=".$contact_no."&type=0",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING => "",
                                CURLOPT_MAXREDIRS => 10,
                                CURLOPT_TIMEOUT => 0,
                                CURLOPT_FOLLOWLOCATION => true,
                                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST => "GET",
                            ));
                            curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Length: 0'));



                            $response = curl_exec($curl);
                            $err = curl_error($curl);

                            curl_close($curl);
                            //echo $response;exit;
                            if ($err) {
                                echo "cURL Error #:" . $err;exit;
                            } else {
                                //echo $response;exit;
                            }

                        }
                        if(!empty($refferal_code)){
                            $referall_id = Users::getUserIdFromReferralCode($refferal_code);
                            if($referall_id!=null && $model->id!=$referall_id){
                                $referral_user = Users::findOne($referall_id);
                                if(!empty($referral_user)){
                                    $model->referred_by = $referral_user->id;
                                    $model->save(false);

                                    return array('status' => 1, 'message' => 'You have Registered  Successfully.We have sent you OTP on your mobile number,Please verify it.','user_id'=>$model->id);


                                }else{
                                    return array('status' => 0, 'message' => 'Please enter Valid Referral Code.');
                                }
                                //return array('status' => 0, 'message' => 'Please enter Valid Referral Code.');
                            }else{
                                return array('status' => 0, 'message' => 'Please enter Valid Referral Code.');

                            }
                        }else{
                            $model->save(false);

                            return array('status' => 1, 'message' => 'You have Registered  Successfully.We have sent you OTP on your mobile number,Please verify it.','user_id'=>$model->id);

                        }

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                    }



                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionResendotp()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['contact_no']) && $_POST['contact_no'] != '') {
                $contact_no = $_POST['contact_no'];
                if ($contact_no != '') {
                    $curl = curl_init();

                    curl_setopt_array($curl, array(
                        CURLOPT_URL => "https://secure.etracker.cc/MobileOTPAPI/SMSOTP/OTPGenerate?user=TEST177&pass=SyR%26PbN0&from=RUMAH&servid=MES01&ApiReturnType=2&text=Your%20Rumah-i%20pincode%20is%20%3COTPCode%3E.&to=".$contact_no."&type=0",
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_ENCODING => "",
                        CURLOPT_MAXREDIRS => 10,
                        CURLOPT_TIMEOUT => 0,
                        CURLOPT_FOLLOWLOCATION => true,
                        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                        CURLOPT_CUSTOMREQUEST => "GET",
                    ));
                    curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Length: 0'));


                    $response = curl_exec($curl);
                    $err = curl_error($curl);

                    curl_close($curl);
                    // echo $response;exit;
                    if ($err) {
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                    } else {
                        return array('status' => 1, 'message' => 'OTP sent successfully.', 'data' => '');

                        //echo $response;exit;
                    }
                } else {
                    return array('status' => 0, 'message' => 'Please enter mandatory fields.');
                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }


        }
    }

    public function actionVerifyotp(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['contact_no']) && $_POST['contact_no']!='' && isset($_POST['otp']) && $_POST['otp']!='') {
                $contact_no = $_POST['contact_no'];
                $otp = $_POST['otp'];
                $curl = curl_init();
                $model = Users::find()->where(['contact_no'=>$contact_no])->one();
                if(empty($model)){
                    return array('status' => 0, 'message' => 'User details not found.');

                }
//60126479285
                curl_setopt_array($curl, array(
                    CURLOPT_URL => "https://secure.etracker.cc/MobileOTPAPI/SMSOTP/OTPVerify?user=TEST177&from=RUMAH&to=".$contact_no."&pincode=".$otp."&servid=MES01&ApiReturnType=2&pass=SyR%26PbN0",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 30,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "POST",

                ));
                curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Length: 0'));



                $response = curl_exec($curl);
                $err = curl_error($curl);

                curl_close($curl);

                //print_r($response);exit;
                if ($err) {
                    return array('status' => 0, 'message' => 'Something went wrong.Please try again.');

                } else {
                    $response = json_decode($response);
                    if(!empty($response) && $response->StatusCode==200){
                        $model->status = 1;
                        $model->save(false);
                        return array('status' => 1, 'message' => 'Your account have Verified Successfully.');

                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong OTP.Please enter correct OTP.');

                    }
                    //echo $response;exit;
                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }

    }

    //Forgot password
    public function actionForgotpassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && !empty($_POST['email'])) {
                $model = Users::find()->where(['email'=>$_POST['email'],'status'=>1])->andWhere(['in','role',['Cleaner','Mover','Agent','Laundry','Handyman']])->one();
                if(!empty($model)){
                    $permitted_chars = '0123456789abcdefghijklmnopqrstuvwxyz';

                    $password = substr(str_shuffle($permitted_chars), 0, 10);
                    $model->password = $password;
                    $emailtemplate = EmailTemplates::findOne(['name'=>'User Forgot Password']);
                    $content = EmailTemplates::getemailtemplate($emailtemplate,$model,'');

                    $send = Yii::$app->mailer->compose()
                        ->setFrom('rumahimy@gmail.com')
                        ->setTo($model->email)
                        ->setSubject($emailtemplate->subject)
                        ->setHtmlBody($content)
                        ->send();
                    //var_dump($send);exit;
                    $model->password = md5($password);
                    $model->save(false);


                    return array('status' => 1, 'message' => 'Your new password sent to your email.Please check your inbox.');
                    //var_dump($send);exit;
                }else{
                    return array('status' => 0, 'message' => 'This email is not registered.');
                }


            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionMyprofile()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $userdetails = Users::find()->select(['*', new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture"),new \yii\db\Expression("CONCAT('/uploads/users/', '', `agent_card`) as agent_card")])->where(['id'=>$this->user_id])->asArray()->one();
            $userdetails['referral_code'] = Users::getReferralCode($userdetails['id']);
            $qrCode = (new QrCode($userdetails['referral_code']))
                ->setSize(250)
                ->setMargin(5)
                ->useForegroundColor(0,0,0);
            $qrCode->writeFile(__DIR__ . '/../vendor/2amigos/code.png');
            $userdetails['qrcode'] = $qrCode->writeDataUri();
            return array('status' => 1, 'data' => $userdetails);


        }


    }

    public function actionUpdateprofile()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $model = Users::findOne($this->user_id);
            $model->scenario = 'updateprofileagent';
            $model->attributes = Yii::$app->request->post();
            if($model->validate()){
                //$model->dob = date('Y-m-d',strtotime($model->dob));
                $model->updated_at = date('Y-m-d h:i:s');
                if($model->save(false)){
                    return array('status' => 1, 'message' => 'You have updated your profile successfully.');

                }else{
                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                }
            }else{
                return array('status' => 0, 'message' => $model->getErrors());

            }


        }


    }


    public function actionDashboard()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

                $baseurl = $this->baseurl;
                $user_id = $this->user_id;
                $date = date('Y-m-d');
                $userdetails = Users::find()->select(['*', new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture"),new \yii\db\Expression("CONCAT('/uploads/users/', '', `agent_card`) as agent_card")])->where(['id'=>$this->user_id])->asArray()->one();

                $todolists = TodoList::find()->select(['id','title','description','reftype','status','request_id','renovation_quote_id','service_request_id','property_id','user_id','landlord_id','agent_id','vendor_id','worker_id','created_at','updated_at','rent_startdate','rent_enddate','pay_from','service_type','due_date','appointment_date','appointment_time','subtotal','sst','total',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")])
                    ->with([
                        'request'=>function ($query) {
                            $query->select(['id','booking_fees','credit_score','monthly_rental','tenancy_fees','stamp_duty','keycard_deposit','rental_deposit','utilities_deposit','subtotal','total','commencement_date','tenancy_period','security_deposit',new \yii\db\Expression("CONCAT('/uploads/creditscorereports/', '', `credit_score_report`) as credit_score_report"),new \yii\db\Expression("CONCAT('/uploads/agreements/', '', `agreement_document`) as agreement_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document")]);
                        },
                        'servicerequest'=>function ($query) {
                            $query->select(['id','property_id','vendor_id','user_id','todo_id','date','time','description','document','reftype','status','amount','subtotal','sst','hours']);
                        },
                        'property'=>function($query){
                            $query->select('id,property_no,title');
                        },
                        'user'=>function($query){
                            $query->select("id,full_name");
                        },
                        'landlord'=>function($query){
                            $query->select("id,full_name");

                        },
                        'agent'=>function($query){
                            $query->select("id,full_name");

                        },
                        'renovationquote'=>function($query){
                            $query->select(['id',new \yii\db\Expression("CONCAT('/uploads/renovationquotes/', '', `quote_document`) as quote_document")]);

                        },
                        'documents'=>function($query){
                            $query->select(['id','todo_id','description',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")]);

                        },
                        'todoItems'=>function($query){
                            $query->select(['id','todo_id','description','platform_deductible','price','reftype']);

                        },
                        'worker'=>function($query){
                            $query->select("id,full_name");

                        },

                    ])->where(['vendor_id'=>$user_id])->orWhere(['agent_id'=>$user_id])->asArray()->all();

                $services = array();
                $upcoming = array();
                if(!empty($todolists)){
                    foreach ($todolists as $key=>$todolist){

                        switch ($todolist['reftype']){
                            case "Booking";
                                if($todolist['status']=='Incompleted' || $todolist['status']=='Pending' || $todolist['status']=='Approved' || $todolist['status']=='Unpaid'){
                                    $services[] = $todolist;
                                }
                                break;
                            case "Transfer Request";
                                if($todolist['status']=='Pending'){
                                    $services[] = $todolist;
                                }
                                break;
                            case "Moveout Refund";
                                if($todolist['status']=='Moveout Refund'){
                                    $services[] = $todolist;
                                }
                                break;

                            case "Appointment";
                                $date = date('Y-m-d');
                                if($todolist['status']=='Pending' && $date<=$todolist['appointment_date']){
                                    $services[] = $todolist;
                                }
                                break;
                            case "Service";
                                if($todolist['status']=='In Progress' && ($todolist['service_type']=='Handyman' || $todolist['service_type']=='Mover')){
                                    if($date==$todolist['servicerequest']['date'] && $todolist['status']=='In Progress'){
                                        $upcoming[] = $todolist;
                                    }else {

                                        $services[] = $todolist;
                                    }
                                }else if(($todolist['status']=='New' || $todolist['status']=='In Progress' || $todolist['status']=='Accepted' || $todolist['status']=='Picked Up' || $todolist['status']=='Unpaid') && ($todolist['service_type']=='Cleaner' || $todolist['service_type']=='Laundry')){
                                    if($date==$todolist['servicerequest']['date'] && $todolist['status']=='In Progress'){
                                        $upcoming[] = $todolist;
                                    }else {

                                        $services[] = $todolist;
                                    }
                                }
                                break;

                        }
                    }
                }
                $data = array();
                $data['userdetails'] = $userdetails;
                $data['upcoming'] = $upcoming;
                $data['services'] = $services;
                return array('status' => 1, 'data' => $data);



        }


    }

    public function actionMyproperties()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $baseurl = $this->baseurl;
            $user_id = $this->user_id;
            $vacantproperties = Properties::find()->with([
                'pictures'=>function ($query) use($baseurl) {
                    $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->all();
                },
                'views'=>function ($query) use($baseurl) {
                    $query->select('COUNT(*) as views,property_id')->all();
                },
            ])->where(['agent_id'=>$user_id,'status'=>'Active'])->asArray()->all();
            $rentedproperties = Properties::find()->with([
                'pictures'=>function ($query) use($baseurl) {
                    $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->all();
                },
                'views'=>function ($query) use($baseurl) {
                    $query->select('COUNT(*) as views,property_id')->all();
                },
            ])->where(['agent_id'=>$user_id,'status'=>'Rented'])->asArray()->all();
            $data['vacant'] = $vacantproperties;
            $data['rented'] = $rentedproperties;
            return array('status' => 1, 'data' => $data);


        }


    }
    public function actionChangepassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $model = new Users();
                //Users::findOne($this->user_id);
                $model->scenario = 'changepassword';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){

                    $usermodel = Users::findOne(['id'=>$this->user_id,'password'=>md5($model->oldpassword)]);
                    if (!empty($usermodel)){
                        $model->password = md5($model->newpassword);

                        $usermodel->save();
                        return array('status' => 1, 'message' => 'You have changed your primary password successfully.');
                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong old password.');
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
//change secondary password
    public function actionChangesecondarypassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $model = new Users();
                $model->scenario = 'changepassword';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){

                    $usermodel = Users::findOne(['id'=>$this->user_id,'secondary_password'=>md5($model->oldpassword)]);
                    if (!empty($usermodel)){
                        $usermodel->secondary_password = md5($model->newpassword);

                        $usermodel->save();
                        return array('status' => 1, 'message' => 'You have changed your PIN successfully.');
                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong old PIN.');
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionCreatesecondarypassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $model = Users::findOne(['id'=>$this->user_id]);
                $model->scenario = 'createsecondarypassword';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){
                    $model->secondary_password = md5($_POST['secondary_password']);
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have created your PIN successfully.');
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionAddworker()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if(!empty($_POST)){
                $model = new Workers();
                $model->attributes = Yii::$app->request->post();
                $model->vendor_id = $this->user_id;
                if ($model->validate()) {
                    $model->created_at = date('Y-m-d H:i:s');
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have added worker successfully.');

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }


                } else {
                    return array('status' => 0, 'message' => $model->getErrors());
                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }

        }


    }

    public function actionTopup()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
            if(!empty($_POST)){
                $transaction = Yii::$app->db->beginTransaction();

                try {
                    $model = new Topups();
                    $model->scenario = 'topup';
                    $model->attributes = Yii::$app->request->post();
                    $model->user_id = $user_id;
                    if ($model->validate()) {

                        $validatepassword = Yii::$app->common->validatesecondarypassword($model->user_id,$model->password);
                        if(!$validatepassword){
                            return array('status' => 0, 'message' => 'You have entered invalid wrong PIN.');
                        }
                        $userbalance = Users::getbalance($model->user_id);
                        $amount = $model->amount;
                        if($amount<=0){
                            return array('status' => 0, 'message' => 'Amount must be greator than 0.');
                        }
                        $model->amount =  $amount;
                        $model->total_amount = $amount;
                        $model->oldbalance = $userbalance;
                        $model->newbalance = $userbalance + $model->amount;
                        $model->status = 'Completed';
                        $model->created_at = date('Y-m-d H:i:s');
                        if($model->save(false)){
                            $transactionmodel = new Transactions();
                            $transactionmodel->user_id = $model->user_id;
                            $transactionmodel->amount = $amount;
                            $transactionmodel->total_amount = $amount;
                            $transactionmodel->topup_id = $model->id;
                            //$transactionmodel->senangpay_order_id = time().$model->user_id;
                            $transactionmodel->created_at = date('Y-m-d H:i:s');
                            $transactionmodel->reftype = 'Topup';
                            $transactionmodel->status = 'Completed';
                            if($transactionmodel->save(false)){
                                $lastid = $transactionmodel->id;
                                $reference_no = Yii::$app->common->generatereferencenumber($lastid);
                                $transactionmodel->reference_no = $reference_no;
                                if($transactionmodel->save()){
                                    Users::updatebalance($userbalance + $model->amount,$user_id);
                                    $transaction->commit();
                                    return array('status' => 1, 'message' => 'You have added money to your wallet.');
                                }else{
                                    $transaction->rollBack(); // if save fails then rollback
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                }
                            }else{
                                $transaction->rollBack();
                                return array('status' => 0, 'message' => $transactionmodel->getErrors());
                            }

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try  after sometimes.');
                        }

                    } else {
                        return array('status' => 0, 'message' => $model->getErrors());
                    }
                }catch (Exception $e) {
                    // # if error occurs then rollback all transactions
                    $transaction->rollBack();
                }

            }else{

                return array('status' => 0,'message'=>'Please enter Mandatory Fields.');
            }

        }


    }
    public function actionWithdrawal()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if(!empty($_POST)){

                $transaction = Yii::$app->db->beginTransaction();

                try {

                    $model = new Withdrawals();
                    $model->scenario = 'userwithdrawal';
                    $model->attributes = Yii::$app->request->post();
                    $model->user_id = $this->user_id;
                    if ($model->validate()) {
                        $userdetails = Users::findOne($model->user_id);
                        $validatepassword = Yii::$app->common->validatesecondarypassword($model->user_id,$model->password);
                        if(!$validatepassword){
                            return array('status' => 0, 'message' => 'You have entered invalid wrong PIN.');
                        }
                        if($userdetails->can_withdraw==0){
                            return array('status' => 0, 'message' => 'You can not withdraw..');
                        }

                        $withdrawalrequestexist = Withdrawals::findOne(['status'=>1,'user_id'=>$model->user_id]);
                        if(!empty($withdrawalrequestexist)){
                            return array('status' => 0, 'message' => 'You have already submitted a withdrawal request. Please wait for it to complete processing first before submitting again.');
                        }

                        $bankaccountexist = BankAccounts::findOne(['user_id'=>$model->user_id]);
                        if(empty($bankaccountexist)){
                            return array('status' => 0, 'message' => 'Please submit your banking information.');
                        }
                        $userbalance = Users::getbalance($model->user_id);
                        $amount = $model->amount;
                        if($amount<=0){
                            return array('status' => 0, 'message' => 'Amount must be greator than 0.');
                        }
                        if($amount>$userbalance){
                            return array('status' => 0, 'message' => 'Please enter lower amount.');
                        }
                        $model->bank_id = $bankaccountexist->id;
                        $model->old_balance = $userbalance;
                        $model->new_balance = $userbalance-$amount;
                        $model->total_amount = $amount;
                        $model->status = 1;
                        $model->created_at = date('Y-m-d H:i:s');
                        if($model->save()){
                            $transactionmodel = new Transactions();
                            $transactionmodel->user_id = $model->user_id;
                            $transactionmodel->amount = $model->amount;
                            $transactionmodel->total_amount = $amount;
                            $transactionmodel->withdrawal_id = $model->id;
                            $transactionmodel->created_at = date('Y-m-d H:i:s');
                            $transactionmodel->reftype = 3;
                            $transactionmodel->status = 1;
                            if($transactionmodel->save()){
                                $lastid = $transactionmodel->id;
                                $reference_no = Yii::$app->common->generatereferencenumber($lastid);
                                $transactionmodel->reference_no = $reference_no;
                                if($transactionmodel->save()){
                                    $model->reference_no = $reference_no;
                                    $model->save(false);
                                    Yii::$app->common->updateuserbalance($model->user_id,$model->new_balance);
                                    $transaction->commit();

                                    return array('status' => 1, 'message' => 'Withdrawal request submitted successfully. Please allow 7 days for processing.');
                                }else{
                                    $transaction->rollBack(); // if save fails then rollback
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                }
                            }

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try  after sometimes.');
                        }

                    } else {
                        return array('status' => 0, 'message' => $model->getErrors());
                    }
                }catch (Exception $e) {
                    // # if error occurs then rollback all transactions
                    $transaction->rollBack();
                    return array('status' => 0, 'message' => 'Something went wrong.Please try  after sometimes.');
                }

            }else{

                return array('status' => 0,'message' => 'Please enter mandatory fields.');
            }

        }


    }


    public function actionAddproperty()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if(!empty($_POST)){
                $propertymodel = new Properties();
                $propertymodel->scenario = 'addproperty';
                $propertymodel->attributes = Yii::$app->request->post();
                //$propertymodel->amenities = $propertymodel->amenities;
                //$propertymodel->commute = $propertymodel->commute;
                //$propertymodel->pictures = $uploads = UploadedFile::getInstances('images');
                if($propertymodel->validate()){
                    $pictures = $propertymodel->pictures;
                    $propertymodel->pictures = null;
                    $propertymodel->agent_id = $this->user_id;
                    $propertymodel->created_at = date('Y-m-d H:i:s');
                    $propertymodel->status = 'Active';
                    if($propertymodel->save(false)){
                        $property_id = $propertymodel->id;
                        if(!empty($pictures)){
                            foreach ($pictures as $picture){
                                $filename = uniqid();

                                $data = Yii::$app->common->processBase64($picture);

                                file_put_contents('uploads/properties/' . $filename . '.' . $data['type'], $data['data']);
                                $propertyimages = new Images();
                                $propertyimages->property_id = $property_id;
                                $propertyimages->image = 'uploads/properties/'.$filename . '.' . $data['type'];
                                $propertyimages->created_at = date('Y-m-d H:i:s');
                                $propertyimages->save(false);
                            }
                        }
                        $propertymodel->property_no = "PR".Yii::$app->common->generatereferencenumber($property_id);
                        if($propertymodel->save(false)){
                            return array('status' => 1, 'message' => 'You have added property successfully.');

                        }



                    }else{
                        return array('status' => 0, 'message' => $propertymodel->getErrors());

                    }

                }else{
                    return array('status' => 0, 'message' => $propertymodel->getErrors());

                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }

        }


    }


    public function actionTodolist()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
            // echo $user_id;exit;
            $todolists = TodoList::find()->select(['id','title','description','reftype','status','request_id','renovation_quote_id','service_request_id','property_id','user_id','landlord_id','agent_id','vendor_id','created_at','updated_at','rent_startdate','rent_enddate','pay_from','service_type','due_date','appointment_date','appointment_time',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")])
                ->with([
                    'request'=>function ($query) {
                        $query->select(['id','booking_fees','credit_score','monthly_rental','tenancy_fees','stamp_duty','keycard_deposit','rental_deposit','utilities_deposit','subtotal','total','commencement_date','tenancy_period','security_deposit',new \yii\db\Expression("CONCAT('/uploads/creditscorereports/', '', `credit_score_report`) as credit_score_report"),new \yii\db\Expression("CONCAT('/uploads/agreements/', '', `agreement_document`) as agreement_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document")]);
                    },
                    'servicerequest'=>function ($query) {
                        $query->select(['id','property_id','vendor_id','user_id','todo_id','date','time','description','document','reftype','status','amount','subtotal','sst']);
                    },
                    'property'=>function($query){
                        $query->select('id,property_no,title');
                    },
                    'user'=>function($query){
                        $query->select("id,full_name");
                    },
                    'landlord'=>function($query){
                        $query->select("id,full_name");

                    },
                    'agent'=>function($query){
                        $query->select("id,full_name");

                    },
                    'renovationquote'=>function($query){
                        $query->select(['id',new \yii\db\Expression("CONCAT('/uploads/renovationquotes/', '', `quote_document`) as quote_document")]);

                    },
                    'documents'=>function($query){
                        $query->select(['id','todo_id','description',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")]);

                    },
                    'todoItems'=>function($query){
                        $query->select(['id','todo_id','description','platform_deductible','price','reftype']);

                    },

                ])->where(['vendor_id'=>$user_id])->orWhere(['agent_id'=>$user_id])->asArray()->all();

            $data = array();
            if(!empty($todolists)){
                foreach ($todolists as $key=>$todolist){

                    switch ($todolist['reftype']){
                        case "Booking";
                            if($todolist['status']=='Incompleted' || $todolist['status']=='Pending' || $todolist['status']=='Approved' || $todolist['status']=='Unpaid'){
                                $data[] = $todolist;
                            }
                            break;
                        case "Transfer Request";
                            if($todolist['status']=='Pending'){
                                $data[] = $todolist;
                            }
                            break;
                        case "Moveout Refund";
                            if($todolist['status']=='Moveout Refund'){
                                $data[] = $todolist;
                            }
                            break;

                        case "Appointment";
                            $date = date('Y-m-d');
                            if($todolist['status']=='Pending' && $date<=$todolist['appointment_date']){
                                $data[] = $todolist;
                            }
                            break;
                        case "Service";
                            if($todolist['status']=='In Progress' && ($todolist['service_type']=='Handyman' || $todolist['service_type']=='Mover')){
                                $data[] = $todolist;
                            }
                            break;

                    }
                }
            }
            return array('status' => 1, 'data' => $data);

        }
    }
    public function actionTododetail()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                // echo $user_id;exit;
                $todolists = TodoList::find()->select(['id','title','description','reftype','status','request_id','renovation_quote_id','service_request_id','property_id','user_id','landlord_id','agent_id','vendor_id','created_at','updated_at','rent_startdate','rent_enddate','pay_from','service_type','due_date','appointment_date','appointment_time','subtotal','sst','total',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")])
                    ->with([
                        'request'=>function ($query) {
                            $query->select(['id','booking_fees','credit_score','monthly_rental','tenancy_fees','stamp_duty','keycard_deposit','rental_deposit','utilities_deposit','subtotal','total','commencement_date','tenancy_period','security_deposit',new \yii\db\Expression("CONCAT('/uploads/creditscorereports/', '', `credit_score_report`) as credit_score_report"),new \yii\db\Expression("CONCAT('/uploads/agreements/', '', `agreement_document`) as agreement_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document")]);
                        },
                        'servicerequest'=>function ($query) {
                            $query->select(['id','property_id','vendor_id','user_id','todo_id','date','time','description','document','reftype','status','amount','subtotal','sst','hours']);
                        },
                        'property'=>function($query){
                            $query->select('id,property_no,title');
                        },
                        'user'=>function($query){
                            $query->select("id,full_name");
                        },
                        'landlord'=>function($query){
                            $query->select("id,full_name");

                        },
                        'agent'=>function($query){
                            $query->select("id,full_name");

                        },
                        'renovationquote'=>function($query){
                            $query->select(['id',new \yii\db\Expression("CONCAT('/uploads/renovationquotes/', '', `quote_document`) as quote_document")]);

                        },
                        'documents'=>function($query){
                            $query->select(['id','todo_id','description',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")]);

                        },
                        'todoItems'=>function($query){
                            $query->select(['id','todo_id','description','platform_deductible','price','reftype']);

                        },

                    ])->where(['vendor_id'=>$user_id])->orWhere(['agent_id'=>$user_id])->asArray()->all();


                $data = array();
                //echo "<pre>";print_r($todolists);exit;
                if (!empty($todolists)) {
                    foreach ($todolists as $key => $todolist) {

                        switch ($todolist['reftype']) {
                            case "Booking";
                                if ($todolist['status'] == 'Incompleted' || $todolist['status'] == 'Pending' || $todolist['status'] == 'Approved' || $todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Transfer Request";
                                if($todolist['status']=='Pending'){
                                    $data[] = $todolist;
                                }
                                break;
                            case "Appointment";
                                $date = date('Y-m-d');
                                if($todolist['status']=='Pending' && $date<=$todolist['appointment_date']){
                                    $data[] = $todolist;
                                }
                                break;
                            case "Service";
                                if($todolist['status']=='In Progress' && ($todolist['service_type']=='Handyman' || $todolist['service_type']=='Mover')){
                                    $data[] = $todolist;
                                }else if($todolist['status']=='New' && ($todolist['service_type']=='Cleaner' || $todolist['service_type']=='Laundry')){
                                    $data[] = $todolist;
                                }
                                break;

                        }
                    }
                }
                return array('status' => 1, 'data' => $data);
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionMybills()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $user_id = $this->user_id;
            // echo $user_id;exit;
            $todolists = TodoList::find()->select(['id', 'title', 'description', 'reftype', 'status', 'property_id', 'user_id', 'landlord_id', 'created_at', 'updated_at','due_date', new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")])
                ->with([

                    'property' => function ($query) {
                        $query->select('id,property_no,title');
                    },
                    'user' => function ($query) {
                        $query->select("id,full_name");
                    },
                    'landlord' => function ($query) {
                        $query->select("id,full_name");

                    },

                    'todoItems' => function ($query) {
                        $query->select(['id', 'todo_id', 'description', 'price', 'reftype']);

                    },
                ])->where(['reftype' => 'General'])->where(['user_id'=>$user_id])->orWhere(['landlord_id'=>$user_id])->asArray()->all();

            $data = array();
            //echo "<pre>";print_r($todolists);exit;
            if (!empty($todolists)) {
                foreach ($todolists as $key => $todolist) {

                    switch ($todolist['reftype']) {

                        case "General";
                            $todolist['due_date'] = date('d/m/Y',strtotime($todolist['due_date']));
                            //if ($todolist['status'] == 'Unpaid') {
                            $data[] = $todolist;
                            // }
                            break;


                    }
                }
            }
            return array('status' => 1, 'data' => $data);

        }
    }

    public function actionAccepttransferrequest()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $auto_rental = (isset($_POST['auto_rental']) && $_POST['auto_rental']!='')?1:0;
                $insurance = (isset($_POST['insurance']) && $_POST['insurance']!='')?1:0;

                $todorequestexist = TodoList::find()->where(['landlord_id'=>$user_id,'status'=>'Pending'])->one();
                if(empty($todorequestexist)){
                    return array('status' => 0, 'message' => 'No trasnfer request details found.');
                }
                $todorequestexist->status = 'Accepted';
                $todorequestexist->updated_at = date('Y-m-d H:i:s');
                if($todorequestexist->save()){
                    $todorequestexist->property->user_id = $user_id;
                    $todorequestexist->property->auto_rental = $auto_rental;
                    $todorequestexist->property->insurance = $insurance;
                    $todorequestexist->property->save(false);
                    return array('status' => 1, 'message' => 'You have accepted transfer request.');
                }else{
                    return array('status' => 0, 'data' => $todorequestexist->getErrors());

                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }


    public function actionRankagent()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['request_id']) && $_POST['request_id']!='') {

                $user_id = $this->user_id;
                $model = new AgentRatings();
                $model->scenario = 'addrating';
                $model->attributes = Yii::$app->request->post();
                $model->user_id =  $user_id;
                if($model->validate()){
                    $bookingrequest = BookingRequests::findOne($model->request_id);
                    if(empty($bookingrequest)){
                        return array('status' => 0, 'message' => 'Data not found.');
                    }
                    $model->property_id = $bookingrequest->property_id;
                    $model->agent_id = $bookingrequest->agent_id;
                    $model->created_at = date('Y-m-d H:i:s');
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have reviewed agent successfully.');
                    }else{
                        return array('status' => 0, 'data' => $model->getErrors());

                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }
    public function actionRankproperty()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['request_id']) && $_POST['request_id']!='') {

                $user_id = $this->user_id;
                $model = new PropertyRatings();
                $model->scenario = 'addrating';
                $model->attributes = Yii::$app->request->post();
                $model->user_id =  $user_id;
                if($model->validate()){
                    $bookingrequest = BookingRequests::findOne($model->request_id);
                    if(empty($bookingrequest)){
                        return array('status' => 0, 'message' => 'Data not found.');
                    }
                    $model->property_id = $bookingrequest->property_id;
                    $model->created_at = date('Y-m-d H:i:s');
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have reviewed property successfully.');
                    }else{
                        return array('status' => 0, 'data' => $model->getErrors());

                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionRejecttodo(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='' && isset($_POST['status']) && $_POST['status']!='') {

                $user_id = $this->user_id;
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['id'=>$_POST['todo_id'],'status'=>'Pending'])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
                $todomodel->status = $_POST['status'];
                if($todomodel->save()){
                    return array('status' => 1, 'message' => 'You have rejected request successfully.');

                }else{
                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }
    public function actionPaytodo()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='' && isset($_POST['status']) && $_POST['status']!='') {

                $user_id = $this->user_id;
                $status = $_POST['status'];
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['id'=>$_POST['todo_id']])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
                $return =  $this->actionUpdatetodostatus($_POST['todo_id'],$status,$todomodel->reftype,$_POST);

                return $return;

                //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }


    public function actionPayinsurance()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['reftype'=>'Insurance','id'=>$_POST['todo_id'],'status'=>'Unpaid'])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
                $this->actionUpdatetodostatus($_POST['todo_id'],'Accepted','Insurance');



                //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionPayinvoice()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['reftype'=>'General','id'=>$_POST['todo_id'],'status'=>'Unpaid'])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
                $this->actionUpdatetodostatus($_POST['todo_id'],'Accepted','General');



                //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionUpdatetodostatus($todo_id,$status,$reftype,$post=array()){
        $systemaccount = Yii::$app->common->getsystemaccount();
        $user_id = $this->user_id;
        $todomodel = TodoList::findOne($todo_id);
        $promocode = (isset($post['promo_code']) && $post['promo_code']!='')?$post['promo_code']:'';
        $amount = (isset($post['amount']) && $post['amount']!='')?$post['amount']:'';
        $discount = (isset($post['discount']) && $post['discount']!='')?$post['discount']:0;
        $goldcoins = (isset($post['gold_coins']) && $post['gold_coins']!='')?$post['gold_coins']:0;
        $coins_savings = (isset($post['coins_savings']) && $post['coins_savings']!='')?$post['coins_savings']:0;
        $updatetype = (isset($post['update_type']) && $post['update_type']!='')?$post['update_type']:'';
        $worker_id = (isset($post['worker_id']) && $post['worker_id']!='')?$post['worker_id']:'';
        $pictures = (isset($post['pictures']) && $post['pictures']!='')?$post['pictures']:'';

        if($promocode!=''){
            $promocodedetails = PromoCodes::find()->where(['promo_code'=>$promocode])->one();
        }
        switch ($reftype) {


            case "Appointment";
                if($status=='Completed') {
                    $todomodel->status = 'Completed';
                    $todomodel->updated_at = date("Y-m-d H:i:s");
                    if ($todomodel->save(false)) {
                        return array('status' => 1, 'message' => 'You have completed appointment successfully.');

                    }
                }else if($status=='Cancelled'){
                    $todomodel->status = 'Cancelled';
                    $todomodel->updated_at = date("Y-m-d H:i:s");
                    if ($todomodel->save(false)) {
                        return array('status' => 1, 'message' => 'You have cancelled appointment successfully.');

                    }
                }
                break;

            case "Service";
                $transaction1 = Yii::$app->db->beginTransaction();

                try {
                    if (($todomodel->service_type == 'Handyman' || $todomodel->service_type == 'Mover') && $todomodel->status == 'Pending') {

                        if ($status == 'Accepted') {
                            $todomodel->status = 'Accepted';
                            $todomodel->updated_at = date("Y-m-d H:i:s");
                            if ($todomodel->save(false)) {
                                $todomodel->servicerequest->status = 'Accepted';
                                $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->servicerequest->save(false)) {
                                    $transaction1->commit();
                                    return array('status' => 1, 'message' => 'You have accepted request successfully.');

                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }
                            } else {
                                $transaction1->rollBack();
                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }

                        } else if ($status == 'Rejected') {
                            $todomodel->status = 'Rejected';
                            $todomodel->updated_at = date("Y-m-d H:i:s");
                            if ($todomodel->save(false)) {
                                $todomodel->servicerequest->status = 'Rejected';
                                $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->servicerequest->save(false)) {
                                    $vendor = Users::findOne($todomodel->vendor_id);
                                    $vendor->current_status = 'Free';
                                    $vendor->save(false);
                                    $transaction1->commit();
                                    return array('status' => 1, 'message' => 'You have rejected request successfully.');

                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }
                            } else {
                                $transaction1->rollBack();
                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }
                        }
                    } else if (($todomodel->service_type == 'Cleaner' || $todomodel->service_type == 'Laundry') && $todomodel->status == 'New') {

                        if ($status == 'Accepted') {
                            $todomodel->status = ($todomodel->service_type == 'Cleaner') ? 'Unpaid' : 'Accepted';
                            $todomodel->updated_at = date("Y-m-d H:i:s");
                            if ($todomodel->save(false)) {
                                $todomodel->servicerequest->status = ($todomodel->service_type == 'Cleaner') ? 'Confirmed' : 'Accepted';
                                $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->servicerequest->save(false)) {
                                    $transaction1->commit();
                                    return array('status' => 1, 'message' => 'You have accepted request successfully.');

                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }
                            } else {
                                $transaction1->rollBack();
                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }

                        } else if ($status == 'Rejected') {
                            $todomodel->status = 'Rejected';
                            $todomodel->updated_at = date("Y-m-d H:i:s");
                            if ($todomodel->save(false)) {
                                $todomodel->servicerequest->status = 'Rejected';
                                $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->servicerequest->save(false)) {
                                    $vendor = Users::findOne($todomodel->vendor_id);
                                    $vendor->current_status = 'Free';
                                    $vendor->save(false);
                                    $transaction1->commit();
                                    return array('status' => 1, 'message' => 'You have rejected request successfully.');

                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }
                            } else {
                                $transaction1->rollBack();
                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }
                        }
                    } else if (($todomodel->service_type == 'Cleaner' || $todomodel->service_type == 'Laundry') && ($todomodel->status == 'In Progress' || $todomodel->status == 'Accepted' || $todomodel->status == 'Picked Up')) {
                        if ($status == 'Accepted') {
                            if ($updatetype == 'assignworker' && $todomodel->service_type == 'Cleaner') {
                                if ($worker_id == '') {
                                    return array('status' => 0, 'message' => 'Please select Worker.');

                                }
                                $todomodel->worker_id = $worker_id;
                                $todomodel->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->save(false)) {
                                    $todomodel->servicerequest->worker_id = $worker_id;
                                    $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                                    if ($todomodel->servicerequest->save(false)) {
                                        $transaction1->commit();
                                        return array('status' => 1, 'message' => 'You have assigned worker successfully.');

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }

                            } else if ($updatetype == 'checkin' && $todomodel->service_type == 'Cleaner') {
                                if (empty($pictures)) {
                                    return array('status' => 0, 'message' => 'Please Upload atleast one Check In Picture.');

                                }
                                foreach ($pictures as $key => $picture) {
                                    $filename = uniqid();

                                    $data = Yii::$app->common->processBase64($picture);

                                    file_put_contents('uploads/servicerequestimages/' . $filename . '.' . $data['type'], $data['data']);
                                    $servicerequestimages = new ServicerequestImages();
                                    $servicerequestimages->description = '';
                                    $servicerequestimages->service_request_id = $todomodel->servicerequest->id;
                                    $servicerequestimages->reftype = 'checkinphoto';
                                    $servicerequestimages->image = 'uploads/servicerequestimages/' . $filename . '.' . $data['type'];
                                    $servicerequestimages->created_at = date('Y-m-d H:i:s');
                                    $servicerequestimages->save(false);

                                }
                                $todomodel->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->save(false)) {
                                    $todomodel->servicerequest->checkin_time = date("Y-m-d H:i:s");
                                    if ($todomodel->servicerequest->save(false)) {
                                        $transaction1->commit();
                                        return array('status' => 1, 'message' => 'You have updated request successfully.');

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }

                            } else if ($updatetype == 'checkout' && $todomodel->service_type == 'Cleaner') {
                                if (empty($pictures)) {
                                    return array('status' => 0, 'message' => 'Please Upload atleast one Check In Picture.');

                                }
                                foreach ($pictures as $key => $picture) {
                                    $filename = uniqid();

                                    $data = Yii::$app->common->processBase64($picture);

                                    file_put_contents('uploads/servicerequestimages/' . $filename . '.' . $data['type'], $data['data']);
                                    $servicerequestimages = new ServicerequestImages();
                                    $servicerequestimages->description = '';
                                    $servicerequestimages->service_request_id = $todomodel->servicerequest->id;
                                    $servicerequestimages->reftype = 'checkoutphoto';
                                    $servicerequestimages->image = 'uploads/servicerequestimages/' . $filename . '.' . $data['type'];
                                    $servicerequestimages->created_at = date('Y-m-d H:i:s');
                                    $servicerequestimages->save(false);

                                }
                                $todomodel->status = 'Completed';
                                $todomodel->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->save(false)) {
                                    $todomodel->servicerequest->checkout_time = date("Y-m-d H:i:s");
                                    $todomodel->servicerequest->status = "Completed";
                                    if ($todomodel->servicerequest->save(false)) {
                                        $vendor = Users::findOne($todomodel->vendor_id);
                                        $vendor->current_status = 'Free';
                                        $vendor->save(false);
                                        $transaction1->commit();
                                        return array('status' => 1, 'message' => 'You have updated request successfully.');

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }

                            } else if ($updatetype == 'pickup' && $todomodel->service_type == 'Laundry') {
                                if (empty($pictures)) {
                                    return array('status' => 0, 'message' => 'Please Upload atleast one Pickup Picture.');

                                }
                                foreach ($pictures as $key => $picture) {
                                    $filename = uniqid();

                                    $data = Yii::$app->common->processBase64($picture);

                                    file_put_contents('uploads/servicerequestimages/' . $filename . '.' . $data['type'], $data['data']);
                                    $servicerequestimages = new ServicerequestImages();
                                    $servicerequestimages->description = '';
                                    $servicerequestimages->service_request_id = $todomodel->servicerequest->id;
                                    $servicerequestimages->reftype = 'pickupphoto';
                                    $servicerequestimages->image = 'uploads/servicerequestimages/' . $filename . '.' . $data['type'];
                                    $servicerequestimages->created_at = date('Y-m-d H:i:s');
                                    $servicerequestimages->save(false);

                                }
                                $todomodel->status = 'Picked Up';
                                $todomodel->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->save(false)) {
                                    $todomodel->servicerequest->status = 'Picked Up';
                                    $todomodel->servicerequest->pickup_time = date("Y-m-d H:i:s");
                                    if ($todomodel->servicerequest->save(false)) {
                                        $transaction1->commit();
                                        return array('status' => 1, 'message' => 'You have updated request successfully.');

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }

                            }
                            if ($updatetype == 'paymentrequest' && $todomodel->service_type == 'Laundry') {
                                $descriptions = (isset($_POST['descriptions']) && !empty($_POST['descriptions'])) ? $_POST['descriptions'] : array();
                                $prices = (isset($_POST['prices']) && !empty($_POST['prices'])) ? $_POST['prices'] : array();
                                if (empty($descriptions) || empty($prices)) {
                                    return array('status' => 0, 'message' => 'Please enter Invoice Items');
                                }
                                $subtotal = 0;
                                foreach ($descriptions as $key => $description) {
                                    $todoitem = new TodoItems();
                                    $todoitem->todo_id = $todomodel->id;
                                    $todoitem->description = $description;
                                    $todoitem->price = $prices[$key];
                                    $todoitem->created_at = date("Y-m-d H:i:s");
                                    $todoitem->save(false);
                                    $subtotal += $prices[$key];

                                }
                                $sst = Yii::$app->common->calculatesst($subtotal);
                                $todomodel->subtotal = $subtotal;
                                $todomodel->sst = $sst;
                                $todomodel->total = $subtotal+$sst;
                                $todomodel->status = 'Unpaid';
                                $todomodel->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->save(false)) {
                                    $todomodel->servicerequest->amount = $subtotal;
                                    $todomodel->servicerequest->subtotal = $subtotal;
                                    $todomodel->servicerequest->sst = $sst;
                                    $todomodel->servicerequest->total_amount = $subtotal+$sst;
                                    $todomodel->servicerequest->status = 'Unpaid';
                                    if ($todomodel->servicerequest->save(false)) {
                                        $transaction1->commit();
                                        return array('status' => 1, 'message' => 'You have sent payment request successfully.');

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }

                            }else if ($updatetype == 'delivery' && $todomodel->service_type == 'Laundry') {
                                if (empty($pictures)) {
                                    return array('status' => 0, 'message' => 'Please Upload atleast one Delivery Picture.');

                                }
                                foreach ($pictures as $key => $picture) {
                                    $filename = uniqid();

                                    $data = Yii::$app->common->processBase64($picture);

                                    file_put_contents('uploads/servicerequestimages/' . $filename . '.' . $data['type'], $data['data']);
                                    $servicerequestimages = new ServicerequestImages();
                                    $servicerequestimages->description = '';
                                    $servicerequestimages->service_request_id = $todomodel->servicerequest->id;
                                    $servicerequestimages->reftype = 'deliveryphoto';
                                    $servicerequestimages->image = 'uploads/servicerequestimages/' . $filename . '.' . $data['type'];
                                    $servicerequestimages->created_at = date('Y-m-d H:i:s');
                                    $servicerequestimages->save(false);

                                }
                                $todomodel->status = 'Completed';
                                $todomodel->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->save(false)) {
                                    $todomodel->servicerequest->status = 'Completed';
                                    $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");

                                    if ($todomodel->servicerequest->save(false)) {
                                        $vendor = Users::findOne($todomodel->vendor_id);
                                        $vendor->current_status = 'Free';
                                        $vendor->save(false);
                                        $transaction1->commit();
                                        return array('status' => 1, 'message' => 'You have delivered successfully.');

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }

                            } else {
                                return array('status' => 0, 'message' => 'Data not found');

                            }

                        }else if ($status == 'Rejected') {
                            $todomodel->status = 'Cancelled';
                            $todomodel->updated_at = date("Y-m-d H:i:s");
                            if ($todomodel->save(false)) {
                                $todomodel->servicerequest->status = 'Cancelled';
                                $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                                if ($todomodel->servicerequest->save(false)) {
                                    $vendor = Users::findOne($todomodel->vendor_id);
                                    $vendor->current_status = 'Free';
                                    $vendor->save(false);
                                    $transaction1->commit();
                                    return array('status' => 1, 'message' => 'You have cancelled request successfully.');

                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }
                            } else {
                                $transaction1->rollBack();
                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }
                        }
                    } else {
                        return array('status' => 0, 'message' => 'Data not found');

                    }
                }catch (Exception $e) {
                    // # if error occurs then rollback all transactions
                    $transaction1->rollBack();
                    return array('status' => 0, 'message' => 'Data not found');

                }
                break;

        }

    }
    public function actionApplypromocode(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['amount']) && $_POST['amount']!='' && isset($_POST['promo_code']) && $_POST['promo_code']!='') {

                $user_id = $this->user_id;
                $promocode = $_POST['promo_code'];
                $amount = $_POST['amount'];
                $date = date('Y-m-d');
                $promocodeexist = PromoCodes::find()->where(['promo_code'=>trim($_POST['promo_code']),'status'=>'Active'])->one();
                if (empty($promocodeexist)){
                    return array('status' => 0, 'message' => 'Please enter Valid Promo Code.');
                }
                if ($promocodeexist->expiry_date<$date){
                    return array('status' => 0, 'message' => 'Promo code expired.Please try other');

                }
                if($promocodeexist->type=='Fixed'){
                    $discountamount = $promocodeexist->discount;
                }elseif ($promocodeexist->type=='Percentage'){
                    $countpercentage = number_format($amount * $promocodeexist->discount / 100, 2, '.', '');
                    $discountamount = $countpercentage;

                }
                return array('status' => 1, 'data' => array('discountamout'=>$discountamount));




            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }


    public function actionSearchlandlord(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['mobile_no']) && $_POST['mobile_no']!='') {

                $user_id = $this->user_id;

                $mobile_no = $_POST['mobile_no'];
                $landlorddetails = Users::find()->select('id,full_name')->where(['contact_no'=>trim($_POST['mobile_no']),'status'=>'Active','role'=>'User'])->asArray()->one();
                if(!empty($landlorddetails)){
                    return array('status' => 1, 'data' => $landlorddetails);

                }else{
                    return array('status' => 0, 'message' => 'Owner Not Found.');

                }



            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionTransferproperty(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['landlord_id']) && $_POST['landlord_id']!='' && isset($_POST['property_id']) && $_POST['property_id']!='' && isset($_POST['tenant_id']) && $_POST['tenant_id']!='' && isset($_POST['receive_via']) && $_POST['receive_via']!='') {

                $user_id = $this->user_id;

                $requestexist = TodoList::find()->where(['agent_id'=>$user_id,'property_id'=>$_POST['property_id'],'reftype'=>'Transfer Request'])->one();
                $propertyexist = Properties::find()->where(['agent_id'=>$user_id,'id'=>$_POST['property_id']])->one();

                if($_POST['tenant_id']==$_POST['landlord_id']){
                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                }
                if(!empty($requestexist)){
                    return array('status' => 0, 'message' => 'You already submitted tranfer request for this property.');

                }
                if(empty($propertyexist)){
                    return array('status' => 0, 'message' => 'Data Not Found.');

                }

                $tenant_id = $_POST['tenant_id'];
                unset($_POST['tenant_id']);
                $todomodel = new TodoList();
                $todomodel->scenario = 'transferrequest';
                $todomodel->attributes = Yii::$app->request->post();
                $todomodel->agent_id = $user_id;
                $todomodel->user_id = $tenant_id;
                if ($todomodel->validate()){
                    $todomodel->reftype = 'Transfer Request';
                    $todomodel->status = 'Pending';
                    $todomodel->created_at = date('Y-m-d H:i:s');
                    if ($todomodel->save()){
                        return array('status' => 1, 'message' => 'You have sent request successfully.');


                    }else{
                        return array('status' => 0, 'message' => $todomodel->getErrors());

                    }

                }else{
                    return array('status' => 0, 'message' => $todomodel->getErrors());

                }



            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }


    public function actionTransactions()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
            $fromdate = (isset($_POST['fromdate']) && !empty($_POST['fromdate']))?(date('Y-m-d 00:00:00',strtotime($_POST['fromdate']))):'';
            $todate = (isset($_POST['todate']) && !empty($_POST['todate']))?(date('Y-m-d 11:59:59',strtotime($_POST['todate']))):'';
            $query = Transactions::find()->where(['user_id'=>$user_id])->orWhere(['landlord_id'=>$user_id]);
            if($fromdate!='' && $todate!=''){
                // $start = Yii::$app->formatter->asTimestamp($fromdate);
                //$end = Yii::$app->formatter->asTimestamp($todate);
                //$query->andWhere(['between', 'date', $start, $end]);

                $query->andWhere(['>=','DATE(created_at)', $fromdate])->andWhere(['<=','DATE(created_at)', $todate]);
            }
            $transactions = $query->orderBy([
                'created_at' => SORT_DESC
            ])->all();
            //echo $transactions->createCommand()->getRawSql();exit;

            //->all();
            //echo "<pre>";print_r($transactions);exit;
            $mytransactions = array();
            if(!empty($transactions)){
                foreach ($transactions as $key=>$transaction){
                    $transactionitems = $transaction->transactionitems;
                    //echo "<pre>";print_r($transactionitems);exit;
                    switch ($transaction->reftype) {
                        case "Monthly Rental";
                            $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                            $mytransactions[$key]['title'] = $transaction->reftype;
                            $mytransactions[$key]['property'] = $transaction->property->title;
                            $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                            $mytransactions[$key]['incoming'] = ($user_id==$transaction->landlord_id)?1:0;
                            $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                            break;
                        case "Booking Payment";
                            //$amountarray['rental_deposit']
                            $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                            $mytransactions[$key]['title'] = $transaction->reftype;
                            $mytransactions[$key]['property'] = $transaction->property->title;
                            $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                            $mytransactions[$key]['incoming'] = ($user_id==$transaction->landlord_id)?1:0;
                            $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                            $items = array();
                            if(!empty($transactionitems)){
                                foreach ($transactionitems as $k=>$transactionitem){
                                    $items[$k]['description'] = $transactionitem->description;
                                    $items[$k]['amount'] = $transactionitem->total_amount;
                                    if($user_id==$transaction->landlord_id && ($transactionitem->description=='Booking Fees' || $transactionitem->description == 'Deposit' || $transactionitem->description == 'Keycard Deposit'|| $transactionitem->description == 'Utilities Deposit')){
                                        $items[$k]['incoming'] = 1;
                                    }else if($user_id==$transaction->user_id && ($transactionitem->description=='Booking Fees' || $transactionitem->description == 'Deposit' || $transactionitem->description == 'Keycard Deposit'|| $transactionitem->description == 'Utilities Deposit' || $transactionitem->description=='Stamp Duty' || $transactionitem->description == 'Tenancy Fees')){
                                        $items[$k]['incoming'] = 0;
                                    }
                                }
                            }
                            $mytransactions[$key]['items'] = $items;
                            break;
                        case "Renovation Payment";
                            $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                            $mytransactions[$key]['title'] = $transaction->reftype." - ".$transaction->todo->title;
                            $mytransactions[$key]['property'] = $transaction->property->title;
                            $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                            $mytransactions[$key]['incoming'] = ($user_id==$transaction->landlord_id)?1:0;
                            $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                            break;
                        case "Insurance";
                            $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                            $mytransactions[$key]['title'] = $transaction->reftype;
                            $mytransactions[$key]['property'] = $transaction->property->title;
                            $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                            $mytransactions[$key]['incoming'] = 0;
                            $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                            break;
                        case "Defect Report";
                            $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                            $mytransactions[$key]['title'] = $transaction->reftype;
                            $mytransactions[$key]['property'] = $transaction->property->title;
                            $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                            $mytransactions[$key]['incoming'] = 0;
                            $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                            break;
                        case "General";
                            $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                            $mytransactions[$key]['title'] = $transaction->reftype;
                            $mytransactions[$key]['property'] = $transaction->property->title;
                            $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                            $mytransactions[$key]['incoming'] = 0;
                            $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                            break;
                        case "Other";
                            $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                            $mytransactions[$key]['title'] = $transaction->reftype;
                            $mytransactions[$key]['property'] = $transaction->property->title;
                            $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                            $mytransactions[$key]['incoming'] = 0;
                            $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                            break;
                        case "Moveout Refund";
                            $items = array();
                            if(!empty($transactionitems)){
                                $totalamount = 0;
                                foreach ($transactionitems as $k=>$transactionitem){
                                    $items[$k]['description'] = $transactionitem->description;
                                    $items[$k]['amount'] = $transactionitem->total_amount;

                                    if($transactionitem->receiver_id==$user_id){
                                        $items[$k]['incoming'] = 1;

                                    }else if($transactionitem->sender_id==$user_id){
                                        $items[$k]['incoming'] = 0;
                                    }
                                    $items[$k]['refund'] = 1;

                                }
                            }
                            $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                            $mytransactions[$key]['title'] = $transaction->reftype;
                            $mytransactions[$key]['property'] = $transaction->property->title;
                            $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                            $mytransactions[$key]['incoming'] = ($user_id==$transaction->user_id)?1:0;
                            $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                            $mytransactions[$key]['items'] = $items;

                            break;
                    }

                }
            }
            return array('status' => 1, 'data' => $mytransactions);




        }


    }


}
