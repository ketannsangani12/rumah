<?php

namespace app\controllers;

use app\models\AgentRatings;
use app\models\BankAccounts;
use app\models\BookingRequests;
use app\models\Chats;
use app\models\GoldTransactions;
use app\models\Images;
use app\models\PromoCodes;
use app\models\Properties;
use app\models\PropertyRatings;
use app\models\TodoDocuments;
use app\models\TodoItems;
use app\models\TodoList;
use app\models\Topups;
use app\models\Transactions;
use app\models\TransactionsItems;
use app\models\UsersDocuments;
use app\models\Withdrawals;
use Da\QrCode\QrCode;
use sizeg\jwt\JwtHttpBearerAuth;
use yii\db\ActiveQuery;
use yii\db\Exception;
use yii\db\Transaction;
use yii\debug\models\search\User;
use yii\filters\auth\HttpBearerAuth;
use yii\swiftmailer\Mailer;
use yii\web\NotFoundHttpException;
use Codeception\Events;
use Yii;
use yii\rest\ActiveController;
use yii\web\Response;
use yii\filters\ContentNegotiator;
use app\models\Users;
use yii\filters\auth\HttpBasicAuth;
use yii\web\UploadedFile;
use yii\helpers\Url;
//use paragraph1\phpFCM\Recipient\Device;
class ApiusersController extends ActiveController
{
    public $modelClass = 'app\models\Users';
    private $language = 1;
    public $baseurl = null;
    private $user_id;
    public static function allowedDomains()
    {
        return [
             '*',                        // star allows all domains
           // 'http://localhost:3000',
           // 'http://test2.example.com',
        ];
    }
    public function init()
  {

      $this->baseurl = Url::base(true);

      parent::init(); // TODO: Change the autogenerated stub
   }

   public  function actionPrint($data){
       echo "<pre>";print_r($data);exit;
   }
    /**
     * {@inheritdoc}
     */
//    public function behaviors()
//    {
//
//        return [
//            'contentNegotiator' => [
//                'class' => ContentNegotiator::className(),
//                'formats' => [
//                    'application/json' => Response::FORMAT_JSON,
//                ]
//            ],
//
//        ];
//    }

    public function behaviors()
    {

        return [
            'contentNegotiator' => [
                'class' => ContentNegotiator::className(),
                'formats' => [
                    'application/json' => Response::FORMAT_JSON,
                ]
            ],

        ];
    }
    public function beforeAction($action)
    {
        header('Access-Control-Allow-Origin: *');

        header('Access-Control-Allow-Methods: GET, POST, OPTIONS');

        header("Access-Control-Allow-Headers: X-Requested-With,token,user");
        parent::beforeAction($action);

        if ($action->actionMethod != 'actionLogin' && $action->actionMethod != 'actionRegister' && $action->actionMethod!='actionForgotpassword' && $action->actionMethod!='actionAddrefferal') {
            $headers = Yii::$app->request->headers;
            if(!empty($headers) && isset($headers['token']) && $headers['token']!=''){
                try{
                    $token = Yii::$app->jwt->getParser()->parse((string) $headers['token']);
                    $data = Yii::$app->jwt->getValidationData(); // It will use the current time to validate (iat, nbf and exp)
                    $data->setIssuer(\Yii::$app->params[ 'hostInfo' ]);
                    $data->setAudience(\Yii::$app->params[ 'hostInfo' ]);
                    $data->setId('4f1g23a12aa');
                    // $data->setCurrentTime(time() + 61);
                    if($token->validate($data)){
                        $userdata = $token->getClaim('uid');
                        $this->user_id = $userdata->id;
                        return true;


                    }else{
                        echo json_encode(array('status' => 0, 'message' => 'Authentication Failed.'));exit;

                    }
                }catch (Exception $e) {
                    echo json_encode(array('status' => 0, 'message' => 'Authentication Failed.'));exit;

                }

                //var_dump($token->validate($data));exit;

                //return true;
            }else{

                echo json_encode(array('status' => 0, 'message' => 'Authentication Failed.'));exit;
            }
            //exit;
        }
        return true;


    }



    //Login users
    public function actionLogin()
    {
        $baseurl = $this->baseurl;
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)){

                $model = new Users();
                $model->scenario = 'login';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){
                    $userexist = Users::find()->where([
                        'email' => $model->email,
                        'password' => md5($model->password)
                    ])->andWhere(['in','role',['User']])->asArray()->one();

                    if(!empty($userexist)){
                        $userexist['referral_code'] = Users::getReferralCode($userexist['id']);

                        $token = (string) Users::generateToken($userexist);
                        return array('status' => 1, 'message' => 'User Logged in Successfully', 'data' => $userexist,'token'=>$token);


                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong email or password.');
                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }

            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }

    public function actionRegister()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $refferal_code = (isset($_POST['referral_code']))?$_POST['referral_code']:'';

                $model = new Users();
                $model->scenario = 'register';
                $model->attributes = Yii::$app->request->post();

                if($model->validate()){
                    $model->referral_code = NULL;
                    $model->role = 'User';
                    $model->password = md5(Yii::$app->request->post('password'));
                    $model->verify_token = Yii::$app->getSecurity()->generateRandomString();
                    $model->created_at = date('Y-m-d h:i:s');

                    $save = $model->save();

                    if($save){
                        if(!empty($refferal_code)){
                            $referall_id = Users::getUserIdFromReferralCode($refferal_code);
                            if($referall_id!=null && $model->id!=$referall_id){
                                $referral_user = Users::findOne($referall_id);
                                if(!empty($referral_user)){
                                    $model->referred_by = $referral_user->id;
                                    $model->save(false);

                                    return array('status' => 1, 'message' => 'You have Registered  Successfully.Please check you inbox to activate your account.','user_id'=>$model->id);

                                }else{
                                    return array('status' => 0, 'message' => 'Please enter Valid Referral Code.');
                                }
                                //return array('status' => 0, 'message' => 'Please enter Valid Referral Code.');
                            }else{
                                return array('status' => 0, 'message' => 'Please enter Valid Referral Code.');

                            }
                        }else{
                            $model->save(false);

                            return array('status' => 1, 'message' => 'You have Registered  Successfully.Please check you inbox to activate your account.','user_id'=>$model->id);

                        }

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                        }



                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }

    //Forgot password
    public function actionForgotpassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && !empty($_POST['email'])) {
                $model = Users::find()->where(['email'=>$_POST['email'],'status'=>1])->andWhere(['in','role',['User']])->one();
                if(!empty($model)){
                    $permitted_chars = '0123456789abcdefghijklmnopqrstuvwxyz';

                    $password = substr(str_shuffle($permitted_chars), 0, 10);
                    $model->password = md5($password);
                    $model->save(false);
                    $model->password = $password;


                    return array('status' => 1, 'message' => 'Your new password sent to your email.Please check your inbox.');
                    //var_dump($send);exit;
                }else{
                    return array('status' => 0, 'message' => 'This email is not registered.');
                }


            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionMyprofile()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $userdetails = Users::find()->select(['*', new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")])->where(['id'=>$this->user_id])->asArray()->one();
            $userdetails['referral_code'] = Users::getReferralCode($userdetails['id']);
            $qrCode = (new QrCode($userdetails['referral_code']))
                ->setSize(250)
                ->setMargin(5)
                ->useForegroundColor(0,0,0);
            $qrCode->writeFile(__DIR__ . '/../vendor/2amigos/code.png');
            $userdetails['qrcode'] = $qrCode->writeDataUri();
            return array('status' => 1, 'data' => $userdetails);


        }


    }

    public function actionUpdateprofile()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
           $model = Users::findOne($this->user_id);
            $model->scenario = 'updateprofileuser';
            $model->attributes = Yii::$app->request->post();
            if($model->validate()){
               $model->dob = date('Y-m-d',strtotime($model->dob));
               $model->updated_at = date('Y-m-d h:i:s');
               if($model->save(false)){
                   return array('status' => 1, 'message' => 'You have updated your profile successfully.');

               }else{
                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

               }
            }else{
                return array('status' => 0, 'message' => $model->getErrors());

            }


        }


    }
    public function actionGoldtransactions()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $userdetails = Users::find()->select(['id','image','full_name', 'coins',new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")])->where(['id'=>$this->user_id])->asArray()->one();
            $transactions = GoldTransactions::find()->where(['user_id'=>$this->user_id])->orWhere(['refferer_id'=>$this->user_id])->andWhere(['status'=>'Completed'])->asArray()->all();

            return array('status' => 1, 'userdetails' => $userdetails,'data'=>$transactions);


        }


    }
    public function actionMyproperties()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $user_id = $this->user_id;
            $vacantproperties = Properties::find()->where(['user_id'=>$user_id,'status'=>'Active'])->asArray()->all();
            $rentedproperties = Properties::find()->where(['user_id'=>$user_id,'status'=>'Rented'])->asArray()->all();
            $data['vacant'] = $vacantproperties;
            $data['rented'] = $rentedproperties;
            return array('status' => 1, 'data' => $data);


        }


    }
    public function actionChangepassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $model = new Users();
                    //Users::findOne($this->user_id);
                $model->scenario = 'changepassword';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){

                    $usermodel = Users::findOne(['id'=>$this->user_id,'password'=>md5($model->oldpassword)]);
                    if (!empty($usermodel)){
                        $model->password = md5($model->newpassword);

                        $usermodel->save();
                        return array('status' => 1, 'message' => 'You have changed your primary password successfully.');
                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong old password.');
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
//change secondary password
    public function actionChangesecondarypassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $model = new Users();
                $model->scenario = 'changepassword';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){

                    $usermodel = Users::findOne(['id'=>$this->user_id,'secondary_password'=>md5($model->oldpassword)]);
                    if (!empty($usermodel)){
                        $usermodel->secondary_password = md5($model->newpassword);

                        $usermodel->save();
                        return array('status' => 1, 'message' => 'You have changed your PIN successfully.');
                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong old PIN.');
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionCreatesecondarypassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $model = Users::findOne(['id'=>$this->user_id]);
                $model->scenario = 'createsecondarypassword';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){
                    $model->secondary_password = md5($_POST['secondary_password']);
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have created your PIN successfully.');
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionAddbankdetails()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if(!empty($_POST)){
                $model = Users::findOne($this->user_id);
                $model->scenario = 'adduseraccount';
                $model->attributes = Yii::$app->request->post();

                if ($model->validate()) {
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have updated bank account successfully.');

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }


                } else {
                    return array('status' => 0, 'message' => $model->getErrors());
                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }

        }


    }

    public function actionGetchatlist()
    {
        $baseurl = $this->baseurl;
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
            $query = Chats::find()
                ->orderBy([
                    'rumah_chats.created_at' => SORT_DESC
                ])
                ->joinWith([
                    'sender'=>function($q) use ($baseurl){
                        return $q->select(['id','full_name as name','case when rumah_users.image != "" then CONCAT("'.$baseurl.'/uploads/users/",rumah_users.image) else "" end as image']);
                    },
                    'receiver'=>function($q1) use ($baseurl){
                        return $q1->select(['id','full_name as name','case when rumah_users.image != "" then CONCAT("'.$baseurl.'/uploads/users/",rumah_users.image) else "" end as image']);
                    }
                ]);
                $query->where(['user_id'=>$user_id])->orWhere(['receiver_id'=>$user_id])
                    ->where('rumah_chats.id in (select MAX(tc.id) from rumah_chats as tc where tc.user_id = '.$user_id.' or tc.receiver_id = '.$user_id.')');


            if(isset($_POST['offset'])){
                $query->offset($_POST['offset']);
            }

            $data = $query->limit(20)->asArray()->all();

            return array('status' => 1, 'data' => $data);
        }
    }

    public function actionSendchatmsgs()
    {
        $baseurl = $this->baseurl;
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST)){
                $model = new Chats();
                $model->attributes = Yii::$app->request->post();
                if($_POST['msg_type'] == 'image') {
                    try{
                        $filename = uniqid();
                        $data = Yii::$app->common->processBase64($_POST['msg']);
                        file_put_contents('uploads/chat/'.$filename.'.'.$data['type'], $data['data']);
                        $model->msg = $baseurl.'/uploads/chat/'.$filename . '.' . $data['type'];
                    }catch (Exception $e) {
                        return array('status' => 0, 'message' => $e);
                    }
                }
                if ($model->validate()) {
                    $model->created_at =date('Y-m-d H:i:s');
                    if($model->save(false)){
                        //print_r($model->merchant);exit;

                        $lastmessage = Chats::find()
                            ->orderBy([
                                'rumah_chats.id' => SORT_DESC
                            ])
                            ->joinWith(['sender'=>function($q) use ($baseurl){
                                $q->select(['id','full_name as name','case when rumah_users.image != "" then CONCAT("'.$baseurl.'/uploads/users/",rumah_users.image) else "" end as image']);
                            }])
                            ->joinWith(['receiver'=>function($q) use ($baseurl){
                                $q->select(['id','full_name as name','case when rumah_users.image != "" then CONCAT("'.$baseurl.'/uploads/users/",rumah_users.image) else "" end as image']);
                            }])->where(['rumah_users.id'=>$model->id])->asArray()->one();
                        return array('status' => 1, 'message' => 'You have added chat msg successfully.','data'=>$lastmessage);
                    }else{
                        return array('status' => 0, 'message' => $model->getErrors());
                    }

                } else {
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }
    }

    public function actionGetchatmsgs()
    {
        $baseurl = $this->baseurl;
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;

            if(!isset($_POST['user_id'])){
                echo json_encode(array('status' => 0, 'message' => 'User id is required'));exit;
            }

            $query = Chats::find()
                ->orderBy([
                    'rumah_chats.id' => SORT_DESC
                ])
                ->joinWith(['sender'=>function($q) use ($baseurl){
                    $q->select(['id','full_name as name','case when rumah_users.image != "" then CONCAT("'.$baseurl.'/uploads/users/",rumah_users.image) else "" end as image']);
                }])
                ->joinWith(['receiver'=>function($q) use ($baseurl){
                    $q->select(['id','full_name as name','case when rumah_users.image != "" then CONCAT("'.$baseurl.'/uploads/users/",rumah_users.image) else "" end as image']);
                }]);

            if($user_id != null){
                $query->where(['sender_id'=>$user_id])->andWhere(['receiver_id'=>$_POST['user_id']]);
                $query->where(['receiver_id'=>$user_id])->andWhere(['sender_id'=>$_POST['user_id']]);
            }



            if(isset($_POST['last_msg_at'])){
                $query->andWhere(['>=','rumah_chats.created_at',$_POST['last_msg_at']]);
            }

            if(isset($_POST['offset']) && !isset($_POST['last_msg_at'])){
                $query->offset($_POST['offset']);
            }

            if(!isset($_POST['last_msg_at'])){
                $query->limit(20);
            }

            $data = $query->asArray()->all();

            return array('status' => 1, 'data' => $data);
        }
    }
    public function actionTopup()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
            if(!empty($_POST)){
                $transaction = Yii::$app->db->beginTransaction();

                try {
                    $model = new Topups();
                    $model->scenario = 'topup';
                    $model->attributes = Yii::$app->request->post();
                    $model->user_id = $user_id;
                    if ($model->validate()) {

                        $validatepassword = Yii::$app->common->validatesecondarypassword($model->user_id,$model->password);
                        if(!$validatepassword){
                            return array('status' => 0, 'message' => 'You have entered invalid wrong PIN.');
                        }
                        $userbalance = Users::getbalance($model->user_id);
                        $amount = $model->amount;
                        if($amount<=0){
                            return array('status' => 0, 'message' => 'Amount must be greator than 0.');
                        }
                        $model->amount =  $amount;
                        $model->total_amount = $amount;
                        $model->oldbalance = $userbalance;
                        $model->newbalance = $userbalance + $model->amount;
                        $model->status = 'Completed';
                        $model->created_at = date('Y-m-d H:i:s');
                        if($model->save(false)){
                            $transactionmodel = new Transactions();
                            $transactionmodel->user_id = $model->user_id;
                            $transactionmodel->amount = $amount;
                            $transactionmodel->total_amount = $amount;
                            $transactionmodel->topup_id = $model->id;
                            //$transactionmodel->senangpay_order_id = time().$model->user_id;
                            $transactionmodel->created_at = date('Y-m-d H:i:s');
                            $transactionmodel->reftype = 'Topup';
                            $transactionmodel->status = 'Completed';
                            if($transactionmodel->save(false)){
                                $lastid = $transactionmodel->id;
                                $reference_no = Yii::$app->common->generatereferencenumber($lastid);
                                $transactionmodel->reference_no = $reference_no;
                                if($transactionmodel->save()){
                                    Users::updatebalance($userbalance + $model->amount,$user_id);
                                    $transaction->commit();
                                    return array('status' => 1, 'message' => 'You have added money to your wallet.');
                                }else{
                                    $transaction->rollBack(); // if save fails then rollback
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                }
                            }else{
                                $transaction->rollBack();
                                return array('status' => 0, 'message' => $transactionmodel->getErrors());
                            }

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try  after sometimes.');
                        }

                    } else {
                        return array('status' => 0, 'message' => $model->getErrors());
                    }
                }catch (Exception $e) {
                    // # if error occurs then rollback all transactions
                    $transaction->rollBack();
                }

            }else{

                return array('status' => 0,'message'=>'Please enter Mandatory Fields.');
            }

        }


    }
    public function actionWithdrawal()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if(!empty($_POST)){

                $transaction = Yii::$app->db->beginTransaction();

                try {

                    $model = new Withdrawals();
                    $model->scenario = 'userwithdrawal';
                    $model->attributes = Yii::$app->request->post();
                    $model->user_id = $this->user_id;
                    if ($model->validate()) {
                        $userdetails = Users::findOne($model->user_id);
                        $validatepassword = Yii::$app->common->validatesecondarypassword($model->user_id,$model->password);
                        if(!$validatepassword){
                            return array('status' => 0, 'message' => 'You have entered invalid wrong PIN.');
                        }
                        if($userdetails->can_withdraw==0){
                            return array('status' => 0, 'message' => 'You can not withdraw..');
                        }

                        $withdrawalrequestexist = Withdrawals::findOne(['status'=>1,'user_id'=>$model->user_id]);
                        if(!empty($withdrawalrequestexist)){
                            return array('status' => 0, 'message' => 'You have already submitted a withdrawal request. Please wait for it to complete processing first before submitting again.');
                        }

                        $bankaccountexist = BankAccounts::findOne(['user_id'=>$model->user_id]);
                        if(empty($bankaccountexist)){
                            return array('status' => 0, 'message' => 'Please submit your banking information.');
                        }
                        $userbalance = Users::getbalance($model->user_id);
                        $amount = $model->amount;
                        if($amount<=0){
                            return array('status' => 0, 'message' => 'Amount must be greator than 0.');
                        }
                        if($amount>$userbalance){
                            return array('status' => 0, 'message' => 'Please enter lower amount.');
                        }
                        $model->bank_id = $bankaccountexist->id;
                        $model->old_balance = $userbalance;
                        $model->new_balance = $userbalance-$amount;
                        $model->total_amount = $amount;
                        $model->status = 1;
                        $model->created_at = date('Y-m-d H:i:s');
                        if($model->save()){
                            $transactionmodel = new Transactions();
                            $transactionmodel->user_id = $model->user_id;
                            $transactionmodel->amount = $model->amount;
                            $transactionmodel->total_amount = $amount;
                            $transactionmodel->withdrawal_id = $model->id;
                            $transactionmodel->created_at = date('Y-m-d H:i:s');
                            $transactionmodel->reftype = 3;
                            $transactionmodel->status = 1;
                            if($transactionmodel->save()){
                                $lastid = $transactionmodel->id;
                                $reference_no = Yii::$app->common->generatereferencenumber($lastid);
                                $transactionmodel->reference_no = $reference_no;
                                if($transactionmodel->save()){
                                    $model->reference_no = $reference_no;
                                    $model->save(false);
                                    Yii::$app->common->updateuserbalance($model->user_id,$model->new_balance);
                                    $transaction->commit();

                                    return array('status' => 1, 'message' => 'Withdrawal request submitted successfully. Please allow 7 days for processing.');
                                }else{
                                    $transaction->rollBack(); // if save fails then rollback
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                }
                            }

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try  after sometimes.');
                        }

                    } else {
                        return array('status' => 0, 'message' => $model->getErrors());
                    }
                }catch (Exception $e) {
                    // # if error occurs then rollback all transactions
                    $transaction->rollBack();
                    return array('status' => 0, 'message' => 'Something went wrong.Please try  after sometimes.');
                }

            }else{

                return array('status' => 0,'message' => 'Please enter mandatory fields.');
            }

        }


    }


    public function actionAddproperty()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if(!empty($_POST)){
                $propertymodel = new Properties();
                $propertymodel->scenario = 'addproperty';
                $propertymodel->attributes = Yii::$app->request->post();
                $propertymodel->amenities = implode(',',$propertymodel->amenities);
                $propertymodel->commute = implode(',',$propertymodel->commute);
                //$propertymodel->pictures = $uploads = UploadedFile::getInstances('images');
                if($propertymodel->validate()){
                    $pictures = $propertymodel->pictures;
                    $propertymodel->pictures = null;
                    $propertymodel->user_id = $this->user_id;
                    $propertymodel->created_at = date('Y-m-d H:i:s');
                    $propertymodel->status = 'Active';
                    if($propertymodel->save(false)){
                        $property_id = $propertymodel->id;
                        if(!empty($pictures)){
                            foreach ($pictures as $picture){
                                $filename = uniqid();

                                $data = Yii::$app->common->processBase64($picture);

                                file_put_contents('uploads/properties/' . $filename . '.' . $data['type'], $data['data']);
                                $propertyimages = new Images();
                                $propertyimages->property_id = $property_id;
                                $propertyimages->image = 'uploads/properties/'.$filename . '.' . $data['type'];
                                $propertyimages->created_at = date('Y-m-d H:i:s');
                                $propertyimages->save(false);
                            }
                        }
                        $propertymodel->property_no = "PR".Yii::$app->common->generatereferencenumber($property_id);
                        if($propertymodel->save(false)){
                            return array('status' => 1, 'message' => 'You have added property successfully.');

                        }



                    }else{
                        return array('status' => 0, 'message' => $propertymodel->getErrors());

                    }

                }else{
                    return array('status' => 0, 'message' => $propertymodel->getErrors());

                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }

        }


    }
    public function actionSearch()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $lat = (isset($_POST['lat']) && $_POST['lat']!='')?$_POST['lat']:'';
                $long = (isset($_POST['long']) && $_POST['long']!='')?$_POST['long']:'';
                $furnished_status = (isset($_POST['furnished_status']) && $_POST['furnished_status']!='')?$_POST['furnished_status']:'';

                $property_type = (isset($_POST['property_type']) && $_POST['property_type']!='')?$_POST['property_type']:'';
                $room_type = (isset($_POST['room_type']) && $_POST['room_type']!='')?$_POST['room_type']:'';
                $preference = (isset($_POST['preference']) && $_POST['preference']!='')?$_POST['preference']:'';
                $price = (isset($_POST['price']) && $_POST['price']!='')?explode(",",$_POST['price']):'';
                $distance = (isset($_POST['distance']) && $_POST['distance']!='')?$_POST['distance']:'';
                $commute = (isset($_POST['commute']) && $_POST['commute']!='')?explode(",",$_POST['commute']):'';
                $amenities = (isset($_POST['amenities']) && $_POST['amenities']!='')?explode(",",$_POST['amenities']):'';
                $rooms = (isset($_POST['rooms']) && $_POST['rooms']!='')?$_POST['rooms']:'';
                $size = (isset($_POST['size']) && $_POST['size']!='')?$_POST['size']:'';

                // $searchword = $_POST['search'];

                $baseurl = $this->baseurl;
                $harvesformula = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) ) as distance' : '';
                $harvesformula1 = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) )' : '';

                $query1 = Properties::find()
                    ->select('id,latitude,longitude,property_no,title,description,location,property_type,type,room_type,preference,bedroom,bathroom,availability,size_of_area,price,'.$harvesformula)
                ->with([
                    'pictures'=>function ($query) {
                        $query->select('id,property_id,image')->one();
                    },
                ]);
                if(!empty($commute)){
                    foreach ($commute as $key=>$item){
                        if($key==0) {
                            $query1->andWhere(new \yii\db\Expression('FIND_IN_SET("'.$item.'",commute)'));
                            // $query1->andWhere(['like', 'commute', $item]);
                        }else{
                            $query1->orWhere(new \yii\db\Expression('FIND_IN_SET("'.$item.'",commute)'));//->addParams([':commute_to_find' => $item]);

                        }

                    }
                }
                if(!empty($amenities)){
                    foreach ($amenities as $key=>$amenity){
                        if($key==0) {
                            $query1->andWhere(new \yii\db\Expression('FIND_IN_SET("'.$amenity.'",amenities)'));

                        }else{
                            $query1->orWhere(new \yii\db\Expression('FIND_IN_SET("'.$amenity.'",amenities)'));//->addParams([':commute_to_find' => $item]);


                        }

                    }
                }
                if ($property_type!=''){
                    $query1->where(['property_type'=>$property_type]);
                }
                if($room_type!=''){
                    $query1->andWhere(['room_type'=>$room_type]);
                }
                if($preference!=''){
                    $query1->andWhere(['preference'=>$preference]);
                }
                if($distance!=''){
                    $query1->andWhere(['<=', $harvesformula1, $distance]);

                }
                if($furnished_status!=''){
                   $query1->andWhere(['furnished_status'=>$furnished_status]);
                }
                if($rooms!=''){
                    $query1->andWhere(['<=', 'bedroom', $rooms]);

                }
                if($size!=''){
                    $query1->andWhere(['>=', 'size_of_area', $size]);

                }
                if(!empty($price)){
                    $query1->andWhere(["between", "price", $price[0], $price[1]]);

                }



                if($lat!='' && $long!=''){
                    $query1->orderBy(['distance'=>SORT_ASC]);
                }


                $properties =  $query1->asArray()->all();
                return array('status' => 1, 'data' => $properties,'total'=>count($properties));


            }
        }


    }

    public function actionPropertydetails()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && !empty($_POST['property_id'])) {

                $query1 = Properties::find()
                    ->select('id,user_id,latitude,longitude,property_no,title,description,location,property_type,type,room_type,preference,bedroom,bathroom,availability,size_of_area,price')
                    ->with([
                        'images'=>function ($query) {
                            $query->select('id,property_id,image');
                        },
                        'user'=>function($query){
                            $query->select(["id","full_name",new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")]);
                        }
                    ])->where(['id'=>$_POST['property_id']]);

                $propertydata =  $query1->asArray()->one();

                return array('status' => 1, 'data' => $propertydata,);


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }
    public function actionAppointment(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
            $model = new TodoList();
            $model->scenario = 'appointment';
            $model->attributes = Yii::$app->request->post();
            $model->user_id = $user_id;
            if($model->validate()){
                $property = Properties::findOne($model->property_id);
                $photo = $model->photo;
                $model->photo = null;
                $model->landlord_id = $property->user_id;
                $model->reftype = 'Appointment';
                $model->status = 'New';
                $model->created_at = date('Y-m-d H:i:s');
                if($model->save(false)) {
                    return array('status' => 1, 'message' => 'You have submitted appointment successfully.');

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => $model->getErrors());

            }
        }
    }

    public function actionBookingrequestdetails()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && $_POST['request_id']!='') {

                $query1 = BookingRequests::find()->select(['id','property_id','user_id','landlord_id','booking_fees','credit_score','monthly_rental','tenancy_fees','stamp_duty','keycard_deposit','rental_deposit','utilities_deposit','subtotal','total','commencement_date','tenancy_period','security_deposit',new \yii\db\Expression("CONCAT('/uploads/creditscorereports/', '', `credit_score_report`) as credit_score_report"),new \yii\db\Expression("CONCAT('/uploads/agreements/', '', `agreement_document`) as agreement_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document")])->with([
                    'property'=>function ($query) {
                        $query->select('id,property_no,title');
                    },
                    'user'=>function($query){
                        $query->select(["id","full_name"]);
                    },
                    'landlord'=>function($query){
                        $query->select(["id","full_name"]);

                    },
//                    'agent'=>function($query){
//                        $query->select(["id","full_name"]);
//
//                    }
                ])->where(['id'=>$_POST['request_id']]);

                $requestdata =  $query1->asArray()->one();;

                return array('status' => 1, 'data' => $requestdata);


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }

    public function actionBookproperty()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $transaction = Yii::$app->db->beginTransaction();

                try {
                    $model = new BookingRequests();
                    $model->scenario = 'bookfirststep';
                    $model->attributes = Yii::$app->request->post();

                    if ($model->validate()) {
                        $checkbookingrequestexist = BookingRequests::find()->where(['user_id'=>$model->tenant_id,'property_id'=>$model->property_id,'status'=>'Incompleted'])->one();
                        if(!empty($checkbookingrequestexist)){
                            return array('status' => 0, 'message' => 'You already sent booking request for this property.');

                        }
                        $model->user_id = $model->tenant_id;
                        $model->landlord_id = $this->user_id;
                        $model->tenant_id = null;
                        $model->status = 'Incompleted';
                        $model->created_at = date('Y-m-d H:i:s');
                        if ($model->save(false)) {
                            $lastid = $model->id;
                            $reference_no = "BR" . Yii::$app->common->generatereferencenumber($lastid);
                            $model->reference_no = $reference_no;
                            $model->save(false);
                            $todomodel = new TodoList();
                            $todomodel->user_id = $model->user_id;
                            $todomodel->landlord_id = $this->user_id;
                            $todomodel->request_id = $model->id;
                            $todomodel->property_id = $model->property_id;
                            $todomodel->created_at = date('Y-m-d H:i:s');
                            $todomodel->updated_at = date('Y-m-d H:i:s');
                            $todomodel->reftype = 'Booking';
                            $todomodel->status = 'Incompleted';
                            if ($todomodel->save()) {
                                $transaction->commit();

                                return array('status' => 1, 'message' => 'You have sent request successfully.');

                            } else {
                                $transaction->rollBack();

                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }

                        } else {
                            $transaction->rollBack();

                            return array('status' => 0, 'message' => $model->getErrors());

                        }

                    } else {
                        $transaction->rollBack();

                        return array('status' => 0, 'message' => $model->getErrors());

                    }

                }catch (Exception $e) {
                    // # if error occurs then rollback all transactions
                    $transaction->rollBack();
                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }

    public function actionConfirmbookproperty()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && $_POST['request_id']!='') {

                $model = BookingRequests::findOne($_POST['request_id']);
                $todomodel = TodoList::find()->where(['request_id'=>$model->id,'reftype'=>'Booking','status'=>'Incompleted'])->one();
                if(empty($todomodel)){
                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');exit;

                }
                unset($_POST['request_id']);
                $model->scenario = 'bookconfirm';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){

                    $full_name = $model->full_name;
                    $identification_no = $model->identification_no;
                    $usermodel = Users::findOne($this->user_id);
                    $model->full_name = null;
                    $model->identification_no = null;
                    $model->status = 'New';
                    $model->updated_at = date('Y-m-d H:i:s');
                    if($model->save()){
                        $todomodel->status = 'New';
                        $todomodel->updated_at = date('Y-m-d H:i:s');
                        $todomodel->save();
                        $usermodel->full_name = $full_name;
                        $usermodel->document_no = $identification_no;
                        if($usermodel->save(false)){
                            return array('status' => 1, 'message' => 'You have sent request successfully.');

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                        }
                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }

    public function actionBookingprocess()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['request_id']) && $_POST['request_id']!='' && isset($_POST['step']) && $_POST['step']!='' && isset($_POST['todo_id']) && !empty($_POST['todo_id'])) {
                $request_id = $_POST['request_id'];
                $step = $_POST['step'];
                $model = BookingRequests::findOne($_POST['request_id']);
                $todomodel = TodoList::find()->where(['request_id'=>$model->id,'reftype'=>'Booking'])->one();
                if(empty($model) || empty($todomodel)){
                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                }
                $user_id = $this->user_id;
                switch ($step){
                    case "first";
                    if ($model->status=='Pending' && isset($_POST['status']) && !empty($_POST['status']) && $model->landlord_id==$this->user_id){
                        $transaction1 = Yii::$app->db->beginTransaction();

                        try {
                            if ($_POST['status'] == 'Approved') {
                                $model->scenario = 'bookingprocessfirststepapprove';
                            } elseif ($_POST['status'] == 'Rejected') {
                                $model->scenario = 'bookingprocessfirststepreject';

                            }
                            $model->attributes = Yii::$app->request->post();
                            if ($model->validate()) {
                                if ($_POST['status'] == 'Approved') {
                                    $subtotal = $model->tenancy_fees+$model->stamp_duty+$model->booking_fees+$model->security_deposit+$model->keycard_deposit+$model->rental_deposit+$model->utilities_deposit;
                                    $sst = Yii::$app->common->calculatesst($subtotal);
                                    $model->subtotal = $subtotal;
                                    $model->sst = $sst;
                                    $model->total = $subtotal+$sst;

                                    $full_name = $model->full_name;
                                    $identification_no = $model->identification_no;
                                    $usermodel = Users::findOne($this->user_id);
                                    $model->full_name = null;
                                    $model->identification_no = null;
                                    $usermodel->full_name = $full_name;
                                    $usermodel->document_no = $identification_no;
                                    $usermodel->save();
                                    $kyc_document = $model->kyc_document;
                                    $spa_document = $model->spa_document;
                                    $model->kyc_document = null;
                                    $model->spa_document = null;
                                    $filename = uniqid();

                                    $data = Yii::$app->common->processBase64($kyc_document);

                                    file_put_contents('uploads/user_documents/' . $filename . '.' . $data['type'], $data['data']);
                                    $filename1 = uniqid();

                                    $data1 = Yii::$app->common->processBase64($spa_document);

                                    file_put_contents('uploads/user_documents/' . $filename1 . '.' . $data1['type'], $data1['data']);
                                    $documents = new UsersDocuments();
                                    $documents->request_id = $_POST['request_id'];
                                    $documents->user_id = $this->user_id;
                                    $documents->ekyc_document = $filename . '.' . $data['type'];
                                    $documents->supporting_document = $filename1 . '.' . $data1['type'];
                                    $documents->created_at = date('Y-m-d H:i:s');
                                    $documents->save(false);
                                }

                                $model->updated_at = date('Y-m-d H:i:s');
                                if ($model->save()) {
                                    $todomodel->status = $_POST['status'];
                                    $todomodel->updated_at = date('Y-m-d H:i:s');
                                    if ($todomodel->save()) {
                                        $transaction1->commit();
                                        return array('status' => 1, 'message' => 'You have ' . $_POST['status'] . ' of request successfully.');

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }
                            } else {
                                return array('status' => 0, 'message' => $model->getErrors());

                            }
                        }catch (Exception $e) {
                            // # if error occurs then rollback all transactions
                            $transaction1->rollBack();
                        }
                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }
                     break;
                    case "second";
                        if ($model->status=='Approved'  && $model->user_id==$this->user_id) {
                            $transaction1 = Yii::$app->db->beginTransaction();

                            try {
                                $model->scenario = 'bookingprocesssecondstep';
                                $model->attributes = Yii::$app->request->post();
                                if ($model->validate()) {
                                    $kyc_document = $model->kyc_document;
                                    $spa_document = $model->spa_document;
                                    $model->kyc_document = null;
                                    $model->spa_document = null;
                                    $filename = uniqid();

                                    $data = Yii::$app->common->processBase64($kyc_document);

                                    file_put_contents('uploads/user_documents/' . $filename . '.' . $data['type'], $data['data']);
                                    $filename1 = uniqid();

                                    $data1 = Yii::$app->common->processBase64($spa_document);

                                    file_put_contents('uploads/user_documents/' . $filename1 . '.' . $data1['type'], $data1['data']);
                                    $documents = new UsersDocuments();
                                    $documents->request_id = $_POST['request_id'];
                                    $documents->user_id = $this->user_id;
                                    $documents->ekyc_document = $filename . '.' . $data['type'];
                                    $documents->supporting_document = $filename1 . '.' . $data1['type'];
                                    $documents->created_at = date('Y-m-d H:i:s');
                                    $full_name = $model->full_name;
                                    $identification_no = $model->identification_no;
                                    $usermodel = Users::findOne($this->user_id);
                                    $model->full_name = null;
                                    $model->identification_no = null;
                                    $model->status = 'Agreement Processed';
                                    $model->updated_at = date('Y-m-d H:i:s');
                                    if ($model->save()) {
                                        $documents->save(false);

                                        $usermodel->full_name = $full_name;
                                        $usermodel->document_no = $identification_no;
                                        $usermodel->save();
                                        $transaction1->commit();
                                    } else {
                                        $transaction1->rollBack();

                                        return array('status' => 0, 'message' => $model->getErrors());

                                    }

                                } else {
                                    $transaction1->rollBack();

                                    return array('status' => 0, 'message' => $model->getErrors());

                                }
                            }catch (Exception $e) {
                                // # if error occurs then rollback all transactions
                                $transaction1->rollBack();
                            }
                            }else{
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }


                     break;
                    case "third";
                    if ($model->status=='Payment Requested' && $model->user_id==$this->user_id){
                        $promocode = (isset($_POST['promo_code']) && $_POST['promo_code']!='')?$_POST['promo_code']:'';
                        $amount = (isset($_POST['amount']) && $_POST['amount']!='')?$_POST['amount']:'';
                        $discount = (isset($_POST['discount']) && $_POST['discount']!='')?$_POST['discount']:0;
                        $goldcoins = (isset($_POST['gold_coins']) && $_POST['gold_coins']!='')?$_POST['gold_coins']:0;
                        $coins_savings = (isset($_POST['coins_savings']) && $_POST['coins_savings']!='')?$_POST['coins_savings']:0;
                        if($promocode!=''){
                            $promocodedetails = PromoCodes::find()->where(['promo_code'=>$promocode])->one();
                        }
                        $totalamount = $amount;
                        $totalamountafterdiscount = $totalamount-$discount-$coins_savings;
                        $receiverbalance = Users::getbalance($model->landlord_id);
                        $senderbalance = Users::getbalance($model->user_id);
                        $systemaccount = Yii::$app->common->getsystemaccount();
                        $systemaccountbalance = $systemaccount->wallet_balance;

                        $transaction1 = Yii::$app->db->beginTransaction();

                        try {
                            $transaction = new Transactions();
                            $transaction->user_id = $this->user_id;
                            $transaction->request_id = $model->id;
                            $transaction->landlord_id = $model->landlord_id;
                            $transaction->promo_code = ($promocode!='')?$promocodedetails->id:NULL;
                            $transaction->amount = $totalamount;
                            $transaction->discount = $discount;
                            $transaction->coins = $goldcoins;
                            $transaction->coins_savings = $coins_savings;
                            $transaction->total_amount = $totalamountafterdiscount;
                            $transaction->reftype = 'Booking Payment';
                            $transaction->status = 'Completed';
                            $transaction->created_at = date('Y-m-d H:i:s');
                            if ($transaction->save()) {
                                $lastid = $transaction->id;
                                $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                $transaction->reference_no = $reference_no;
                                if ($transaction->save(false)) {
                                    if($model->booking_fees>0){
                                        $transactionitems = new TransactionsItems();
                                        $transactionitems->sender_id = $model->user_id;
                                        $transactionitems->receiver_id = $model->landlord_id;
                                        $transactionitems->oldsenderbalance = $senderbalance;
                                        $transactionitems->newsenderbalance = $senderbalance-$model->booking_fees;
                                        $transactionitems->oldreceiverbalance = $receiverbalance;
                                        $transactionitems->newreceiverbalance = $receiverbalance+$model->booking_fees;
                                        $transactionitems->description = 'Booking Fees';
                                        $transactionitems->created_at = date('Y-m-d H:i:s');
                                        $transactionitems->save(false);
                                    }
                                    if($model->rental_deposit>0){
                                        $transactionitems = new TransactionsItems();
                                        $transactionitems->sender_id = $model->user_id;
                                        $transactionitems->receiver_id = $model->landlord_id;
                                        $transactionitems->oldsenderbalance = $senderbalance;
                                        $transactionitems->newsenderbalance = $senderbalance-$model->rental_deposit;
                                        $transactionitems->oldreceiverbalance = $receiverbalance;
                                        $transactionitems->newreceiverbalance = $receiverbalance+$model->rental_deposit;
                                        $transactionitems->description = 'Deposit';
                                        $transactionitems->created_at = date('Y-m-d H:i:s');
                                        $transactionitems->save(false);
                                    }
                                    if($model->keycard_deposit>0){
                                        $transactionitems = new TransactionsItems();
                                        $transactionitems->sender_id = $model->user_id;
                                        $transactionitems->receiver_id = $model->landlord_id;
                                        $transactionitems->oldsenderbalance = $senderbalance;
                                        $transactionitems->newsenderbalance = $senderbalance-$model->keycard_deposit;
                                        $transactionitems->oldreceiverbalance = $receiverbalance;
                                        $transactionitems->newreceiverbalance = $receiverbalance+$model->keycard_deposit;
                                        $transactionitems->description = 'Keycard Deposit';
                                        $transactionitems->created_at = date('Y-m-d H:i:s');
                                        $transactionitems->save(false);
                                    }
                                    if($model->utilities_deposit>0){
                                        $transactionitems = new TransactionsItems();
                                        $transactionitems->sender_id = $model->user_id;
                                        $transactionitems->receiver_id = $model->landlord_id;
                                        $transactionitems->oldsenderbalance = $senderbalance;
                                        $transactionitems->newsenderbalance = $senderbalance-$model->utilities_deposit;
                                        $transactionitems->oldreceiverbalance = $receiverbalance;
                                        $transactionitems->newreceiverbalance = $receiverbalance+$model->utilities_deposit;
                                        $transactionitems->description = 'Utilities Deposit';
                                        $transactionitems->created_at = date('Y-m-d H:i:s');
                                        $transactionitems->save(false);
                                    }
                                    if($model->stamp_duty>0){
                                        $transactionitems = new TransactionsItems();
                                        $transactionitems->sender_id = $model->user_id;
                                        $transactionitems->receiver_id = $systemaccount->id;
                                        $transactionitems->oldsenderbalance = $senderbalance;
                                        $transactionitems->newsenderbalance = $senderbalance-$model->stamp_duty;
                                        $transactionitems->oldreceiverbalance = $systemaccountbalance;
                                        $transactionitems->newreceiverbalance = $systemaccountbalance+$model->stamp_duty;
                                        $transactionitems->description = 'Stamp Duty';
                                        $transactionitems->created_at = date('Y-m-d H:i:s');
                                        $transactionitems->save(false);
                                    }
                                    if($model->tenancy_fees>0){
                                        $transactionitems = new TransactionsItems();
                                        $transactionitems->sender_id = $model->user_id;
                                        $transactionitems->receiver_id = $systemaccount->id;
                                        $transactionitems->oldsenderbalance = $senderbalance;
                                        $transactionitems->newsenderbalance = $senderbalance-$model->tenancy_fees;
                                        $transactionitems->oldreceiverbalance = $systemaccountbalance;
                                        $transactionitems->newreceiverbalance = $systemaccountbalance+$model->tenancy_fees;
                                        $transactionitems->description = 'Tenancy Fees';
                                        $transactionitems->created_at = date('Y-m-d H:i:s');
                                        $transactionitems->save(false);
                                    }
                                    $model->status = 'Rented';
                                    $model->rented_at = date('Y-m-d H:i:s');
                                    if ($model->save(false)) {
                                        $todomodel->status = 'Paid';
                                        $todomodel->save(false);
                                        $model->property->status = 'Rented';
                                        $model->property->request_id = $model->id;
                                        if($model->property->save()){
                                            if($goldcoins>0){
                                                $usercoinsbalance = Users::getcoinsbalance($model->user_id);
                                                $goldtransaction = new GoldTransactions();
                                                $goldtransaction->user_id = $model->user_id;
                                                $goldtransaction->gold_coins = $goldcoins;
                                                $goldtransaction->transaction_id = $lastid;
                                                $goldtransaction->olduserbalance =$usercoinsbalance;
                                                $goldtransaction->newuserbalance = $usercoinsbalance-$goldcoins;
                                                $goldtransaction->reftype = 'In App Purchase';
                                                $goldtransaction->created_at = date('Y-m-d H:i:s');
                                                if($goldtransaction->save(false)){
                                                    Users::updatecoinsbalance($usercoinsbalance-$goldcoins,$model->user_id);
                                                }
                                            }
                                            $updatesenderbalance = Users::updatebalance($senderbalance-$totalamountafterdiscount,$model->user_id);
                                            $updatereceiverbalance = Users::updatebalance($receiverbalance+$model->booking_fees+$model->rental_deposit+$model->utilities_deposit+$model->keycard_deposit,$model->landlord_id);
                                            $updatesystemaccountbalance = Users::updatebalance($systemaccountbalance+$model->tenancy_fees+$model->stamp_duty,$systemaccount->id);

                                            $transaction1->commit();
                                            return array('status' => 1, 'message' => 'You have rented property successfully.');


                                        }else{
                                            $transaction1->rollBack();
                                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                        }


                                    }else{
                                        $transaction1->rollBack();

                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }

                                }else{
                                    $transaction1->rollBack();

                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }


                            } else {
                                $transaction1->rollBack();

                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }
                        }catch (Exception $e) {
                            // # if error occurs then rollback all transactions
                            $transaction1->rollBack();
                        }
                        //$transaction
                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }
                    break;

                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }
    public function actionTodolist()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
           // echo $user_id;exit;
            $todolists = TodoList::find()->select(['id','title','description','reftype','status','request_id','renovation_quote_id','service_request_id','property_id','user_id','landlord_id','agent_id','vendor_id','created_at','updated_at','rent_startdate','rent_enddate','due_date',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")])
                ->with([
                    'request'=>function ($query) {
                        $query->select(['id','booking_fees','credit_score','monthly_rental','tenancy_fees','stamp_duty','keycard_deposit','rental_deposit','utilities_deposit','subtotal','total','commencement_date','tenancy_period','security_deposit',new \yii\db\Expression("CONCAT('/uploads/creditscorereports/', '', `credit_score_report`) as credit_score_report"),new \yii\db\Expression("CONCAT('/uploads/agreements/', '', `agreement_document`) as agreement_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document")]);
                    },
                    'property'=>function($query){
                        $query->select('id,property_no,title');
                    },
                    'user'=>function($query){
                        $query->select("id,full_name");
                    },
                    'landlord'=>function($query){
                        $query->select("id,full_name");

                    },
                    'agent'=>function($query){
                        $query->select("id,full_name");

                    },
                    'renovationquote'=>function($query){
                      $query->select(['id',new \yii\db\Expression("CONCAT('/uploads/renovationquotes/', '', `quote_document`) as quote_document")]);

                  },
                    'documents'=>function($query){
                        $query->select(['id','todo_id','description',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")]);

                    },
                    'todoItems'=>function($query){
                        $query->select(['id','todo_id','description','platform_deductible','price','reftype']);

                    },
                ])->where(['user_id'=>$user_id])->orWhere(['landlord_id'=>$user_id])->asArray()->all();

            $data = array();
            if(!empty($todolists)){
                foreach ($todolists as $key=>$todolist){

                    switch ($todolist['reftype']){
                        case "Booking";
                            if($todolist['status']=='Incompleted' || $todolist['status']=='Pending' || $todolist['status']=='Approved' || $todolist['status']=='Unpaid'){
                            $data[] = $todolist;
                            }
                        break;
                        case "Transfer Request";
                            if($todolist['status']=='Pending'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Moveout Refund";
                            if($todolist['status']=='Moveout Refund'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Renovation Quote";
                            if($todolist['status']=='Pending'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Renovation Milestone";
                            if($todolist['status']=='Unpaid'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Defect Report";
                            if($todolist['pay_from']=='Tenant' && $user_id==$todolist['user_id']){
                                if($todolist['status']=='Pending' || $todolist['status']=='Unpaid'){
                                    $data[] = $todolist;
                                }
                            }else if($todolist['pay_from']=='Landlord' && $user_id==$todolist['landlord_id']){
                                if($todolist['status']=='Pending' || $todolist['status']=='Unpaid'){
                                    $data[] = $todolist;
                                }
                            }

                        break;
                        case "General";
                            if($todolist['status']=='Unpaid'){
                                $data[] = $todolist;
                            }
                         break;
                        case "Insurance";
                            if($todolist['status']=='Unpaid'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Monthly Rental";
                            if($todolist['status']=='Unpaid'){
                                $data[] = $todolist;
                            }
                        break;

                    }
                }
            }
            return array('status' => 1, 'data' => $data);

        }
    }
    public function actionTododetail()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                // echo $user_id;exit;
                $todolists = TodoList::find()->select(['id', 'title', 'description', 'reftype', 'status', 'request_id', 'renovation_quote_id', 'service_request_id', 'property_id', 'user_id', 'landlord_id', 'agent_id', 'vendor_id', 'created_at', 'updated_at', 'rent_startdate', 'rent_enddate', 'due_date', new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")])
                    ->with([
                        'request' => function ($query) {
                            $query->select(['id', 'booking_fees', 'credit_score', 'monthly_rental', 'tenancy_fees', 'stamp_duty', 'keycard_deposit', 'rental_deposit', 'utilities_deposit', 'subtotal', 'total', 'commencement_date', 'tenancy_period', 'security_deposit', new \yii\db\Expression("CONCAT('/uploads/creditscorereports/', '', `credit_score_report`) as credit_score_report"), new \yii\db\Expression("CONCAT('/uploads/agreements/', '', `agreement_document`) as agreement_document"), new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"), new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document")]);
                        },
                        'property' => function ($query) {
                            $query->select('id,property_no,title');
                        },
                        'user' => function ($query) {
                            $query->select("id,full_name");
                        },
                        'landlord' => function ($query) {
                            $query->select("id,full_name");

                        },
                        'agent'=>function($query){
                            $query->select("id,full_name");

                        },
                        'renovationquote' => function ($query) {
                            $query->select(['id', new \yii\db\Expression("CONCAT('/uploads/renovationquotes/', '', `quote_document`) as quote_document")]);

                        },
                        'documents' => function ($query) {
                            $query->select(['id', 'todo_id', 'description', new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")]);

                        },
                        'todoItems' => function ($query) {
                            $query->select(['id', 'todo_id', 'description', 'platform_deductible', 'price', 'reftype']);

                        },
                    ])->where(['id' => $_POST['todo_id']])->asArray()->all();

                $data = array();
                //echo "<pre>";print_r($todolists);exit;
                if (!empty($todolists)) {
                    foreach ($todolists as $key => $todolist) {

                        switch ($todolist['reftype']) {
                            case "Booking";
                                if ($todolist['status'] == 'Incompleted' || $todolist['status'] == 'Pending' || $todolist['status'] == 'Approved' || $todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Transfer Request";
                                if($todolist['status']=='Pending'){
                                    $data[] = $todolist;
                                }
                                break;
                            case "Moveout Refund";
                                if ($todolist['status'] == 'Pending') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Renovation Quote";
                                if ($todolist['status'] == 'Pending') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Renovation Milestone";
                                if ($todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Defect Report";
                                if ($todolist['status'] == 'Pending' || $todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "General";
                                if ($todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Insurance";
                                if ($todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Monthly Rental";
                                if ($todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;

                        }
                    }
                }
                return array('status' => 1, 'data' => $data);
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionMybills()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $user_id = $this->user_id;
            // echo $user_id;exit;
            $todolists = TodoList::find()->select(['id', 'title', 'description', 'reftype', 'status', 'property_id', 'user_id', 'landlord_id', 'created_at', 'updated_at','due_date', new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")])
                ->with([

                    'property' => function ($query) {
                        $query->select('id,property_no,title');
                    },
                    'user' => function ($query) {
                        $query->select("id,full_name");
                    },
                    'landlord' => function ($query) {
                        $query->select("id,full_name");

                    },

                    'todoItems' => function ($query) {
                        $query->select(['id', 'todo_id', 'description', 'price', 'reftype']);

                    },
                ])->where(['reftype' => 'General'])->where(['user_id'=>$user_id])->orWhere(['landlord_id'=>$user_id])->asArray()->all();

            $data = array();
            //echo "<pre>";print_r($todolists);exit;
            if (!empty($todolists)) {
                foreach ($todolists as $key => $todolist) {

                    switch ($todolist['reftype']) {

                        case "General";
                            $todolist['due_date'] = date('d/m/Y',strtotime($todolist['due_date']));
                            //if ($todolist['status'] == 'Unpaid') {
                                $data[] = $todolist;
                           // }
                            break;


                    }
                }
            }
            return array('status' => 1, 'data' => $data);

        }
    }

    public function actionAccepttransferrequest()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $auto_rental = (isset($_POST['auto_rental']) && $_POST['auto_rental']!='')?1:0;
                $insurance = (isset($_POST['insurance']) && $_POST['insurance']!='')?1:0;

                $todorequestexist = TodoList::find()->where(['landlord_id'=>$user_id,'status'=>'Pending'])->one();
                if(empty($todorequestexist)){
                    return array('status' => 0, 'message' => 'No trasnfer request details found.');
                }
                $todorequestexist->status = 'Accepted';
                $todorequestexist->updated_at = date('Y-m-d H:i:s');
                if($todorequestexist->save()){
                    $todorequestexist->property->user_id = $user_id;
                    $todorequestexist->property->auto_rental = $auto_rental;
                    $todorequestexist->property->insurance = $insurance;
                    $todorequestexist->property->save(false);   
                    return array('status' => 1, 'message' => 'You have accepted transfer request.');
                }else{
                    return array('status' => 0, 'data' => $todorequestexist->getErrors());

                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }


    public function actionRankagent()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['request_id']) && $_POST['request_id']!='') {

                $user_id = $this->user_id;
                $model = new AgentRatings();
                $model->scenario = 'addrating';
                $model->attributes = Yii::$app->request->post();
                $model->user_id =  $user_id;
                if($model->validate()){
                  $bookingrequest = BookingRequests::findOne($model->request_id);
                  if(empty($bookingrequest)){
                      return array('status' => 0, 'message' => 'Data not found.');
                  }
                  $model->property_id = $bookingrequest->property_id;
                  $model->agent_id = $bookingrequest->agent_id;
                  $model->created_at = date('Y-m-d H:i:s');
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have reviewed agent successfully.');
                    }else{
                        return array('status' => 0, 'data' => $model->getErrors());

                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }
    public function actionRankproperty()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['request_id']) && $_POST['request_id']!='') {

                $user_id = $this->user_id;
                $model = new PropertyRatings();
                $model->scenario = 'addrating';
                $model->attributes = Yii::$app->request->post();
                $model->user_id =  $user_id;
                if($model->validate()){
                    $bookingrequest = BookingRequests::findOne($model->request_id);
                    if(empty($bookingrequest)){
                        return array('status' => 0, 'message' => 'Data not found.');
                    }
                    $model->property_id = $bookingrequest->property_id;
                    $model->created_at = date('Y-m-d H:i:s');
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have reviewed property successfully.');
                    }else{
                        return array('status' => 0, 'data' => $model->getErrors());

                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionRefundmoveout()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['reftype'=>'Moveout Refund','id'=>$_POST['todo_id'],'status'=>'Pending'])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
                $this->actionUpdatetodostatus($_POST['todo_id'],'Accepted','Moveout Refund');
                //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }
  public function actionRejecttodo(){
      $method = $_SERVER['REQUEST_METHOD'];
      if ($method != 'POST') {
          return array('status' => 0, 'message' => 'Bad request.');
      } else {
          if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='' && isset($_POST['status']) && $_POST['status']!='') {

              $user_id = $this->user_id;
              $systemaccount = Yii::$app->common->getsystemaccount();
              $todomodel = TodoList::find()->where(['id'=>$_POST['todo_id'],'status'=>'Pending'])->one();
              if (empty($todomodel)){
                  return array('status' => 0, 'message' => 'Data not found.');
              }
              $todomodel->status = $_POST['status'];
              if($todomodel->save()){
                  return array('status' => 1, 'message' => 'You have rejected request successfully.');

              }else{
                  return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

              }


          }else{
              return array('status' => 0, 'message' => 'Please enter mandatory fields.');

          }
      }
  }
    public function actionPaytodo()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['id'=>$_POST['todo_id']])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
                $this->actionUpdatetodostatus($_POST['todo_id'],'Accepted',$todomodel->reftype,$_POST);



                //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionPayinsurance()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['reftype'=>'Insurance','id'=>$_POST['todo_id'],'status'=>'Unpaid'])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
                $this->actionUpdatetodostatus($_POST['todo_id'],'Accepted','Insurance');



                //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionPayinvoice()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['reftype'=>'General','id'=>$_POST['todo_id'],'status'=>'Unpaid'])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
                $this->actionUpdatetodostatus($_POST['todo_id'],'Accepted','General');



                //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

   public function actionUpdatetodostatus($todo_id,$status,$reftype,$post=array()){
       $systemaccount = Yii::$app->common->getsystemaccount();
       $user_id = $this->user_id;
       $todomodel = TodoList::findOne($todo_id);
       $promocode = (isset($post['promo_code']) && $post['promo_code']!='')?$post['promo_code']:'';
       $amount = (isset($post['amount']) && $post['amount']!='')?$post['amount']:'';
       $discount = (isset($post['discount']) && $post['discount']!='')?$post['discount']:0;
       $goldcoins = (isset($post['gold_coins']) && $post['gold_coins']!='')?$post['gold_coins']:0;
       $coins_savings = (isset($post['coins_savings']) && $post['coins_savings']!='')?$post['coins_savings']:0;
       if($promocode!=''){
           $promocodedetails = PromoCodes::find()->where(['promo_code'=>$promocode])->one();
       }
       switch ($reftype) {
           case "Moveout Refund";
               $todoitems = $todomodel->todoItems;


               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if ($status == 'Accepted') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $todoitems = $todomodel->todoItems;
                           if(!empty($todoitems)){

                               $transactionmodel = new Transactions();
                               $transactionmodel->user_id = $user_id;
                               $transactionmodel->landlord_id = $todomodel->request->landlord_id;
                               $transactionmodel->property_id = $todomodel->property_id;
                               $transactionmodel->request_id = $todomodel->request_id;
                               $transactionmodel->todo_id = $todo_id;
                               $transactionmodel->amount = $todomodel->total;
                               $transactionmodel->total_amount = $todomodel->total;
                               $transactionmodel->type = 'Refund';
                               $transactionmodel->reftype = 'Moveout Refund';
                               $transactionmodel->status = 'Completed';
                               $transactionmodel->created_at = date('Y-m-d H:i:s');
                               if($transactionmodel->save()) {
                                   $flag = false;
                                   $lastid = $transactionmodel->id;
                                   $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                   $transactionmodel->reference_no = $reference_no;
                                   $transactionmodel->save(false);
                                   if(!empty($todoitems)){
                                       $totalplatform_deductible=0;
                                       $totaldeductfromuser = 0;
                                       $receiverbalance = Users::getbalance($user_id);
                                       $senderbalance = Users::getbalance($todomodel->request->landlord_id);
                                       foreach ($todoitems as $todoitem){

                                           if($todoitem->platform_deductible>0){
                                               $totalplatform_deductible+=$todoitem->platform_deductible;
                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->sender_id = $systemaccount->id;
                                               $transactionitemmodel->transaction_id = $lastid;
                                               $transactionitemmodel->receiver_id = $user_id;
                                               $transactionitemmodel->amount = $todoitem->platform_deductible;
                                               $transactionitemmodel->total_amount = $todoitem->platform_deductible;
                                               $transactionitemmodel->oldsenderbalance = $systemaccount->wallet_balance;
                                               $transactionitemmodel->newsenderbalance = $systemaccount->wallet_balance-$todoitem->platform_deductible;
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance+$todoitem->platform_deductible;
                                               $transactionitemmodel->type = 'Refund';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if ($flag = $transactionitemmodel->save(false)){
                                                   $totaldeductfromuser +=$todoitem->price;
                                                   $transactionitemmodel1 = new TransactionsItems();
                                                   $transactionitemmodel1->transaction_id = $lastid;
                                                   $transactionitemmodel1->sender_id = $todomodel->request->landlord_id;
                                                   $transactionitemmodel1->receiver_id = $user_id;
                                                   $transactionitemmodel1->amount = $todoitem->price;
                                                   $transactionitemmodel1->total_amount = $todoitem->price;

                                                   $transactionitemmodel1->oldsenderbalance = $senderbalance;
                                                   $transactionitemmodel1->newsenderbalance = $senderbalance-$todoitem->price;
                                                   $transactionitemmodel1->oldreceiverbalance = $receiverbalance;
                                                   $transactionitemmodel1->newreceiverbalance = $receiverbalance+$todoitem->price;
                                                   $transactionitemmodel1->type = 'Refund';
                                                   $transactionitemmodel1->status = 'Completed';

                                                   $transactionitemmodel1->description = $todoitem->description;
                                                   $transactionitemmodel1->created_at = date('Y-m-d H:i:s');
                                                   $transactionitemmodel1->save(false);
                                                   if (! ($flag = $transactionitemmodel1->save(false))) {
                                                       $transaction->rollBack();
                                                       break;
                                                   }


                                               }else{
                                                   $transaction->rollBack();
                                                   break;
                                               }

                                           }else{
                                               $totaldeductfromuser +=$todoitem->price;
                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->transaction_id = $lastid;
                                               $transactionitemmodel->sender_id = $todomodel->request->landlord_id;
                                               $transactionitemmodel->receiver_id = $user_id;
                                               $transactionitemmodel->amount = $todoitem->price;
                                               $transactionitemmodel->total_amount = $todoitem->price;

                                               $transactionitemmodel->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel->newsenderbalance = $senderbalance-$todoitem->price;
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance+$todoitem->price;
                                               $transactionitemmodel->type = 'Refund';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if(! ($flag = $transactionitemmodel->save(false))){
                                                   $transaction->rollBack();
                                                   break;
                                               }

                                           }




                                       }
                                       //var_dump($flag);exit;
                                       if ($flag) {
                                           $updatesenderbalance = Users::updatebalance($senderbalance-$totaldeductfromuser,$todomodel->request->landlord_id);
                                           $updatesystembalance = Users::updatebalance($systemaccount->wallet_balance-$totalplatform_deductible,$systemaccount->id);
                                           $updatereceiverbalance = Users::updatebalance($totaldeductfromuser+$totalplatform_deductible,$user_id);
                                           if($updatereceiverbalance && $updatesenderbalance && $updatesystembalance){
                                               $todomodel->status= 'Completed';
                                               $todomodel->save(false);
                                               $todomodel->property->status = 'Active';
                                               $todomodel->property->save(false);
                                               $todomodel->request->status = 'Completed';
                                               $todomodel->request->save(false);
                                               $transaction->commit();
                                               return array('status' => 1, 'message' => 'You have accepted refund request successfully.');

                                           }else{
                                               $transaction->rollBack();
                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }else{
                                           $transaction->rollBack();

                                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                       }
                                   }

                               }else{
                                   return array('status' => 0, 'message' => $transactionmodel->getErrors());

                               }

                           }


                       } else {
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   } else if ($status == 'Refund Rejected') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $transaction->commit();
                           return array('status' => 1, 'message' => 'You have rejected refund request successfully.');

                       } else {
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   }
               }catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }
               break;
           case "Renovation Milestone";
               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if ($status == 'Accepted') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $todoitems = $todomodel->todoItems;
                           if(!empty($todoitems)){
                               $totalamount = $amount;
                               $totalamountafterdiscount = $totalamount-$discount-$coins_savings;

                               $transactionmodel = new Transactions();
                               $transactionmodel->user_id = $user_id;
                               $transactionmodel->landlord_id = $todomodel->landlord_id;
                               $transactionmodel->property_id = $todomodel->property_id;
                               $transactionmodel->renovation_quote_id = $todomodel->renovation_quote_id;
                               $transactionmodel->todo_id = $todo_id;
                               $transactionmodel->promo_code = ($promocode!='')?$promocodedetails->id:NULL;
                               $transactionmodel->amount = $totalamount;
                               $transactionmodel->discount = $discount;
                               $transactionmodel->coins = $goldcoins;
                               $transactionmodel->coins_savings = $coins_savings;
                               $transactionmodel->total_amount = $totalamountafterdiscount;
                               $transactionmodel->type = 'Payment';
                               $transactionmodel->reftype = 'Renovation Payment';
                               $transactionmodel->status = 'Completed';
                               $transactionmodel->created_at = date('Y-m-d H:i:s');
                               if($transactionmodel->save()) {
                                   $flag = false;
                                   $lastid = $transactionmodel->id;
                                   $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                   $transactionmodel->reference_no = $reference_no;
                                   $transactionmodel->save(false);
                                   if(!empty($todoitems)){
                                       $totalplatform_deductible=0;
                                       $totaldeductfromuser = 0;
                                       $receiverbalance = Users::getbalance($systemaccount->id);
                                       $senderbalance = Users::getbalance($todomodel->landlord_id);
                                       foreach ($todoitems as $todoitem){

                                           $totaldeductfromuser +=$todoitem->price;
                                           $transactionitemmodel = new TransactionsItems();
                                           $transactionitemmodel->transaction_id = $lastid;
                                           $transactionitemmodel->sender_id = $todomodel->landlord_id;
                                           $transactionitemmodel->receiver_id = $systemaccount->id;
                                           $transactionitemmodel->amount = $todoitem->price;
                                           $transactionitemmodel->total_amount = $todoitem->price;

                                           $transactionitemmodel->oldsenderbalance = $senderbalance;
                                           $transactionitemmodel->newsenderbalance = $senderbalance-$totalamountafterdiscount;
                                           $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                           $transactionitemmodel->newreceiverbalance = $receiverbalance+$totalamount;
                                           $transactionitemmodel->type = 'Payment';
                                           $transactionitemmodel->status = 'Completed';
                                           $transactionitemmodel->description = $todoitem->description;
                                           $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                           if(! ($flag = $transactionitemmodel->save(false))){
                                               $transaction->rollBack();
                                               break;
                                           }


                                       }
                                       //var_dump($flag);exit;
                                       if ($flag) {
                                           if($goldcoins>0){
                                               $usercoinsbalance = Users::getcoinsbalance($user_id);
                                               $goldtransaction = new GoldTransactions();
                                               $goldtransaction->user_id = $user_id;
                                               $goldtransaction->gold_coins = $goldcoins;
                                               $goldtransaction->transaction_id = $lastid;
                                               $goldtransaction->olduserbalance =$usercoinsbalance;
                                               $goldtransaction->newuserbalance = $usercoinsbalance-$goldcoins;
                                               $goldtransaction->reftype = 'In App Purchase';
                                               $goldtransaction->created_at = date('Y-m-d H:i:s');
                                               if($goldtransaction->save(false)){
                                                  Users::updatecoinsbalance($usercoinsbalance-$goldcoins,$user_id);
                                               }
                                           }
                                           $updatesenderbalance = Users::updatebalance($senderbalance-$totalamountafterdiscount,$todomodel->landlord_id);
                                           $updatereceiverbalance = Users::updatebalance($receiverbalance+$totalamount,$systemaccount->id);
                                           if($updatereceiverbalance && $updatesenderbalance){
                                               $todomodel->status= 'Paid';
                                               $todomodel->save(false);
                                               $transaction->commit();
                                               return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                           }else{
                                               $transaction->rollBack();
                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }else{
                                           $transaction->rollBack();

                                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                       }
                                   }

                               }else{
                                   return array('status' => 0, 'message' => $transactionmodel->getErrors());

                               }

                           }


                       } else {
                           $transaction->rollBack();
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   } else if ($status == 'Rejected') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $transaction->commit();
                           return array('status' => 1, 'message' => 'You have rejected payment successfully.');

                       } else {
                           $transaction->rollBack();
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   }
               }catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }
               break;
           case "Insurance";
               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if ($status == 'Accepted') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $todoitems = $todomodel->todoItems;
                           $totalpayableamount = $todomodel->total;
                           $senderbalance = Users::getbalance($todomodel->landlord_id);
                           if($totalpayableamount>$senderbalance){
                               return array('status' => 0, 'message' => 'You don`t have enough balance.Please recharge your wallet.');

                           }
                           if(!empty($todoitems)){
                               $totalamount = $amount;
                               $totalamountafterdiscount = $totalamount-$discount-$coins_savings;

                               $transactionmodel = new Transactions();
                               $transactionmodel->landlord_id = $todomodel->landlord_id;
                               $transactionmodel->property_id = $todomodel->property_id;
                               $transactionmodel->todo_id = $todo_id;
                               $transactionmodel->promo_code = ($promocode!='')?$promocodedetails->id:NULL;
                               $transactionmodel->amount = $totalamount;
                               $transactionmodel->discount = $discount;
                               $transactionmodel->coins = $goldcoins;
                               $transactionmodel->coins_savings = $coins_savings;
                               $transactionmodel->total_amount = $totalamountafterdiscount;
                               $transactionmodel->type = 'Payment';
                               $transactionmodel->reftype = 'Insurance';
                               $transactionmodel->status = 'Completed';
                               $transactionmodel->created_at = date('Y-m-d H:i:s');
                               if($transactionmodel->save()) {
                                   $flag = false;
                                   $lastid = $transactionmodel->id;
                                   $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                   $transactionmodel->reference_no = $reference_no;
                                   $transactionmodel->save(false);
                                   if(!empty($todoitems)){
                                       $totalplatform_deductible=0;
                                       $totaldeductfromuser = 0;
                                       $receiverbalance = Users::getbalance($systemaccount->id);
                                       foreach ($todoitems as $todoitem){
                                           $transactionitemmodel = new TransactionsItems();
                                           $transactionitemmodel->transaction_id = $lastid;
                                           $transactionitemmodel->sender_id = $todomodel->landlord_id;
                                           $transactionitemmodel->receiver_id = $systemaccount->id;
                                           $transactionitemmodel->amount = $todoitem->price;
                                           $transactionitemmodel->total_amount = $todoitem->price;
                                           $transactionitemmodel->oldsenderbalance = $senderbalance;
                                           $transactionitemmodel->newsenderbalance = $senderbalance-$totalamountafterdiscount;
                                           $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                           $transactionitemmodel->newreceiverbalance = $receiverbalance+$totalamount;
                                           $transactionitemmodel->type = 'Payment';
                                           $transactionitemmodel->status = 'Completed';
                                           $transactionitemmodel->description = $todoitem->description;
                                           $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                           if(! ($flag = $transactionitemmodel->save(false))){
                                               $transaction->rollBack();
                                               break;
                                           }

                                       }
                                       if ($flag) {
                                           if($goldcoins>0){
                                               $usercoinsbalance = Users::getcoinsbalance($user_id);
                                               $goldtransaction = new GoldTransactions();
                                               $goldtransaction->user_id = $user_id;
                                               $goldtransaction->gold_coins = $goldcoins;
                                               $goldtransaction->transaction_id = $lastid;
                                               $goldtransaction->olduserbalance =$usercoinsbalance;
                                               $goldtransaction->newuserbalance = $usercoinsbalance-$goldcoins;
                                               $goldtransaction->reftype = 'In App Purchase';
                                               $goldtransaction->created_at = date('Y-m-d H:i:s');
                                               if($goldtransaction->save(false)){
                                                   Users::updatecoinsbalance($usercoinsbalance-$goldcoins,$user_id);
                                               }
                                           }
                                           $updatesenderbalance = Users::updatebalance($senderbalance-$totalamountafterdiscount,$todomodel->landlord_id);
                                           $updatereceiverbalance = Users::updatebalance($receiverbalance+$totalamount,$systemaccount->id);
                                           if($updatereceiverbalance && $updatesenderbalance){
                                               $todomodel->status= 'Paid';
                                               $todomodel->save(false);
                                               $transaction->commit();
                                               return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                           }else{
                                               $transaction->rollBack();
                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }else{
                                           $transaction->rollBack();

                                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                       }
                                   }

                               }else{
                                   return array('status' => 0, 'message' => $transactionmodel->getErrors());

                               }

                           }


                       } else {
                           $transaction->rollBack();
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   } else if ($status == 'Rejected') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $transaction->commit();
                           return array('status' => 1, 'message' => 'You have rejected payment successfully.');

                       } else {
                           $transaction->rollBack();
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   }
               }catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }

               break;
           case "General";
               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if ($status == 'Accepted') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $todoitems = $todomodel->todoItems;
                           $totalpayableamount = $todomodel->total;
                           if($todomodel->pay_from=='Tenant'){
                               $senderbalance = Users::getbalance($todomodel->user_id);

                           }else{
                               $senderbalance = Users::getbalance($todomodel->landlord_id);

                           }

                           if($totalpayableamount>$senderbalance){
                               return array('status' => 0, 'message' => 'You don`t have enough balance.Please recharge your wallet.');

                           }
                           if(!empty($todoitems)){
                               $totalamount = $amount;
                               $totalamountafterdiscount = $totalamount-$discount-$coins_savings;


                               $transactionmodel = new Transactions();
                               if($todomodel->pay_from=='Tenant'){
                                   $transactionmodel->user_id = $todomodel->user_id;

                               }else{
                                   $transactionmodel->landlord_id = $todomodel->landlord_id;

                               }
                               $transactionmodel->property_id = $todomodel->property_id;
                               $transactionmodel->todo_id = $todo_id;
                               $transactionmodel->promo_code = ($promocode!='')?$promocodedetails->id:NULL;
                               $transactionmodel->amount = $totalamount;
                               $transactionmodel->discount = $discount;
                               $transactionmodel->coins = $goldcoins;
                               $transactionmodel->coins_savings = $coins_savings;
                               $transactionmodel->total_amount = $totalamountafterdiscount;
                               $transactionmodel->type = 'Payment';
                               $transactionmodel->reftype = 'General';
                               $transactionmodel->status = 'Completed';
                               $transactionmodel->created_at = date('Y-m-d H:i:s');
                               if($transactionmodel->save()) {
                                   $flag = false;
                                   $lastid = $transactionmodel->id;
                                   $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                   $transactionmodel->reference_no = $reference_no;
                                   $transactionmodel->save(false);
                                   if(!empty($todoitems)){
                                       $totalplatform_deductible=0;
                                       $totaldeductfromuser = 0;
                                       $receiverbalance = Users::getbalance($systemaccount->id);
                                       foreach ($todoitems as $todoitem){
                                           $transactionitemmodel = new TransactionsItems();
                                           $transactionitemmodel->transaction_id = $lastid;
                                           if($todomodel->pay_from=='Tenant'){
                                               $transactionitemmodel->sender_id = $todomodel->user_id;

                                           }else{
                                               $transactionitemmodel->sender_id = $todomodel->landlord_id;
                                           }

                                           $transactionitemmodel->receiver_id = $systemaccount->id;
                                           $transactionitemmodel->amount = $todoitem->price;
                                           $transactionitemmodel->total_amount = $todoitem->price;
                                           $transactionitemmodel->oldsenderbalance = $senderbalance;
                                           $transactionitemmodel->newsenderbalance = $senderbalance-$todoitem->price;
                                           $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                           $transactionitemmodel->newreceiverbalance = $receiverbalance+$todoitem->price;
                                           $transactionitemmodel->type = 'Payment';
                                           $transactionitemmodel->status = 'Completed';
                                           $transactionitemmodel->description = $todoitem->description;
                                           $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                           if(! ($flag = $transactionitemmodel->save(false))){
                                               $transaction->rollBack();
                                               break;
                                           }

                                       }
                                       if ($flag) {
                                           if($goldcoins>0){
                                               $usercoinsbalance = Users::getcoinsbalance($user_id);
                                               $goldtransaction = new GoldTransactions();
                                               $goldtransaction->user_id = $user_id;
                                               $goldtransaction->gold_coins = $goldcoins;
                                               $goldtransaction->transaction_id = $lastid;
                                               $goldtransaction->olduserbalance =$usercoinsbalance;
                                               $goldtransaction->newuserbalance = $usercoinsbalance-$goldcoins;
                                               $goldtransaction->reftype = 'In App Purchase';
                                               $goldtransaction->created_at = date('Y-m-d H:i:s');
                                               if($goldtransaction->save(false)){
                                                   Users::updatecoinsbalance($usercoinsbalance-$goldcoins,$user_id);
                                               }
                                           }
                                           $updatesenderbalance = Users::updatebalance($senderbalance-$totalamountafterdiscount,($todomodel->pay_from=='Tenant')?$todomodel->user_id:$todomodel->landlord_id);
                                           $updatereceiverbalance = Users::updatebalance($receiverbalance+$totalamount,$systemaccount->id);
                                           if($updatereceiverbalance && $updatesenderbalance){
                                               $todomodel->status= 'Paid';
                                               $todomodel->save(false);
                                               $transaction->commit();
                                               return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                           }else{
                                               $transaction->rollBack();
                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }else{
                                           $transaction->rollBack();

                                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                       }
                                   }

                               }else{
                                   return array('status' => 0, 'message' => $transactionmodel->getErrors());

                               }

                           }


                       } else {
                           $transaction->rollBack();
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   } else if ($status == 'Rejected') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $transaction->commit();
                           return array('status' => 1, 'message' => 'You have rejected payment successfully.');

                       } else {
                           $transaction->rollBack();
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   }
               }catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }

               break;
           case "Defect Report";
               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if ($status == 'Accepted') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $todoitems = $todomodel->todoItems;
                           $totalpayableamount = $todomodel->total;
                           if($todomodel->pay_from=='Tenant'){
                               $senderbalance = Users::getbalance($todomodel->user_id);

                           }else{
                               $senderbalance = Users::getbalance($todomodel->landlord_id);

                           }

                           if($totalpayableamount>$senderbalance){
                               return array('status' => 0, 'message' => 'You don`t have enough balance.Please recharge your wallet.');

                           }
                           if(!empty($todoitems)){
                               $totalamount = $amount;
                               $totalamountafterdiscount = $totalamount-$discount-$coins_savings;


                               $transactionmodel = new Transactions();
                               if($todomodel->pay_from=='Tenant'){
                                   $transactionmodel->user_id = $todomodel->user_id;

                               }else{
                                   $transactionmodel->landlord_id = $todomodel->landlord_id;

                               }
                               $transactionmodel->property_id = $todomodel->property_id;
                               $transactionmodel->todo_id = $todo_id;
                               $transactionmodel->promo_code = ($promocode!='')?$promocodedetails->id:NULL;
                               $transactionmodel->amount = $totalamount;
                               $transactionmodel->discount = $discount;
                               $transactionmodel->coins = $goldcoins;
                               $transactionmodel->coins_savings = $coins_savings;
                               $transactionmodel->total_amount = $totalamountafterdiscount;
                               $transactionmodel->type = 'Payment';
                               $transactionmodel->reftype = 'Defect Report';
                               $transactionmodel->status = 'Completed';
                               $transactionmodel->created_at = date('Y-m-d H:i:s');
                               if($transactionmodel->save()) {
                                   $flag = false;
                                   $lastid = $transactionmodel->id;
                                   $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                   $transactionmodel->reference_no = $reference_no;
                                   $transactionmodel->save(false);
                                   if(!empty($todoitems)){
                                       $totalplatform_deductible=0;
                                       $totaldeductfromuser = 0;
                                       $receiverbalance = Users::getbalance($systemaccount->id);
                                       foreach ($todoitems as $todoitem){
                                           $transactionitemmodel = new TransactionsItems();
                                           $transactionitemmodel->transaction_id = $lastid;
                                           if($todomodel->pay_from=='Tenant'){
                                               $transactionitemmodel->sender_id = $todomodel->user_id;

                                           }else{
                                               $transactionitemmodel->sender_id = $todomodel->landlord_id;
                                           }

                                           $transactionitemmodel->receiver_id = $systemaccount->id;
                                           $transactionitemmodel->amount = $todoitem->price;
                                           $transactionitemmodel->total_amount = $todoitem->price;
                                           $transactionitemmodel->oldsenderbalance = $senderbalance;
                                           $transactionitemmodel->newsenderbalance = $senderbalance-$todoitem->price;
                                           $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                           $transactionitemmodel->newreceiverbalance = $receiverbalance+$todoitem->price;
                                           $transactionitemmodel->type = 'Payment';
                                           $transactionitemmodel->status = 'Completed';
                                           $transactionitemmodel->description = $todoitem->description;
                                           $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                           if(! ($flag = $transactionitemmodel->save(false))){
                                               $transaction->rollBack();
                                               break;
                                           }

                                       }
                                       if ($flag) {
                                           if($goldcoins>0){
                                               $usercoinsbalance = Users::getcoinsbalance($user_id);
                                               $goldtransaction = new GoldTransactions();
                                               $goldtransaction->user_id = $user_id;
                                               $goldtransaction->gold_coins = $goldcoins;
                                               $goldtransaction->transaction_id = $lastid;
                                               $goldtransaction->olduserbalance =$usercoinsbalance;
                                               $goldtransaction->newuserbalance = $usercoinsbalance-$goldcoins;
                                               $goldtransaction->reftype = 'In App Purchase';
                                               $goldtransaction->created_at = date('Y-m-d H:i:s');
                                               if($goldtransaction->save(false)){
                                                   Users::updatecoinsbalance($usercoinsbalance-$goldcoins,$user_id);
                                               }
                                           }
                                           $updatesenderbalance = Users::updatebalance($senderbalance-$totalamountafterdiscount,($todomodel->pay_from=='Tenant')?$todomodel->user_id:$todomodel->landlord_id);
                                           $updatereceiverbalance = Users::updatebalance($receiverbalance+$totalamount,$systemaccount->id);
                                           if($updatereceiverbalance && $updatesenderbalance){
                                               $todomodel->status= 'Paid';
                                               $todomodel->save(false);
                                               $transaction->commit();
                                               return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                           }else{
                                               $transaction->rollBack();
                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }else{
                                           $transaction->rollBack();

                                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                       }
                                   }

                               }else{
                                   return array('status' => 0, 'message' => $transactionmodel->getErrors());

                               }

                           }


                       } else {
                           $transaction->rollBack();
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   } else if ($status == 'Rejected') {
                       $todomodel->status = $status;
                       if ($todomodel->save()) {
                           $transaction->commit();
                           return array('status' => 1, 'message' => 'You have rejected payment successfully.');

                       } else {
                           $transaction->rollBack();
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   }
               }catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }

               break;

       }

   }
   public function actionApplypromocode(){
       $method = $_SERVER['REQUEST_METHOD'];
       if ($method != 'POST') {
           return array('status' => 0, 'message' => 'Bad request.');
       } else {
           if (!empty($_POST) && isset($_POST['amount']) && $_POST['amount']!='' && isset($_POST['promo_code']) && $_POST['promo_code']!='') {

               $user_id = $this->user_id;
               $promocode = $_POST['promo_code'];
               $amount = $_POST['amount'];
               $date = date('Y-m-d');
               $promocodeexist = PromoCodes::find()->where(['promo_code'=>trim($_POST['promo_code']),'status'=>'Active'])->one();
               if (empty($promocodeexist)){
                   return array('status' => 0, 'message' => 'Please enter Valid Promo Code.');
               }
               if ($promocodeexist->expiry_date<$date){
                   return array('status' => 0, 'message' => 'Promo code expired.Please try other');

               }
               if($promocodeexist->type=='Fixed'){
                   $discountamount = $promocodeexist->discount;
               }elseif ($promocodeexist->type=='Percentage'){
                   $countpercentage = number_format($amount * $promocodeexist->discount / 100, 2, '.', '');
                   $discountamount = $countpercentage;

               }
               return array('status' => 1, 'data' => array('discountamout'=>$discountamount));




           }else{
               return array('status' => 0, 'message' => 'Please enter mandatory fields.');

           }
       }
   }

    public function actionTransferproperty(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['property_id']) && $_POST['property_id']!='') {

                $user_id = $this->user_id;
                $propertyexist = Properties::find()->where(['agent_id'=>$user_id,'id'=>$_POST['property_id']])->one();
                if(empty($propertyexist)){
                    return array('status' => 0, 'message' => 'Data Not Found.');

                }
                $tenant_id = $_POST['tenant_id'];
                unset($_POST['tenant_id']);
                $todomodel = new TodoList();
                $todomodel->scenario = 'transferrequest';
                $todomodel->agent_id = $user_id;
                $todomodel->user_id = $tenant_id;
                $todomodel->attributes = Yii::$app->request->post();
                if ($todomodel->validate()){
                    $todomodel->reftype = 'Transfer Request';
                    $todomodel->status = 'Pending';
                    $todomodel->created_at = date('Y-m-d H:i:s');
                    if ($todomodel->save()){
                          return array('status' => 1, 'message' => 'You have sent request successfully.');


                    }else{
                        return array('status' => 0, 'message' => $todomodel->getErrors());

                    }

                }else{
                    return array('status' => 0, 'message' => $todomodel->getErrors());

                }



            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionSearchlandlord(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['mobile_no']) && $_POST['mobile_no']!='') {

                $user_id = $this->user_id;

                $mobile_no = $_POST['mobile_no'];
                $landlorddetails = Users::find()->select('id,full_name')->where(['contact_no'=>trim($_POST['mobile_no']),'status'=>'Active'])->asArray()->one();
                if(!empty($landlorddetails)){
                    return array('status' => 1, 'data' => $landlorddetails);

                }else{
                    return array('status' => 0, 'message' => 'Owner Not Found.');

                }



            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionReportdefect(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $model = new TodoList();
            $model->user_id = $this->user_id;
            $model->scenario = 'reportdefect';
            $model->attributes = Yii::$app->request->post();

            if($model->validate()){
                $property = Properties::findOne($model->property_id);
                $photo = $model->photo;
                $model->photo = null;
                $model->landlord_id = $property->user_id;
                $model->reftype = 'Defect Report';
                $model->status = 'New';
                $model->created_at = date('Y-m-d H:i:s');
                if($model->save(false)) {
                    $filename = uniqid();
                    $data = Yii::$app->common->processBase64($photo);
                    file_put_contents('uploads/tododocuments/' . $filename . '.' . $data['type'], $data['data']);
                    $tododocument = new TodoDocuments();
                    $tododocument->todo_id = $model->id;
                    $tododocument->document = $filename . '.' . $data['type'];
                    $tododocument->created_at = date('Y-m-d H:i:s');
                    if ($tododocument->save(false)){
                        return array('status' => 1, 'message' => 'You have submitted defect report successfully.');

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => $model->getErrors());

            }
        }
    }
    public function actionTransactions()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
                $user_id = $this->user_id;
                $fromdate = (isset($_POST['fromdate']) && !empty($_POST['fromdate']))?(date('Y-m-d 00:00:00',strtotime($_POST['fromdate']))):'';
                $todate = (isset($_POST['todate']) && !empty($_POST['todate']))?(date('Y-m-d 11:59:59',strtotime($_POST['todate']))):'';
                $query = Transactions::find()->where(['user_id'=>$user_id])->orWhere(['landlord_id'=>$user_id]);
                if($fromdate!='' && $todate!=''){
                    // $start = Yii::$app->formatter->asTimestamp($fromdate);
                    //$end = Yii::$app->formatter->asTimestamp($todate);
                    //$query->andWhere(['between', 'date', $start, $end]);

                    $query->andWhere(['>=','DATE(created_at)', $fromdate])->andWhere(['<=','DATE(created_at)', $todate]);
                }
                $transactions = $query->orderBy([
                    'created_at' => SORT_DESC
                ])->all();
                //echo $transactions->createCommand()->getRawSql();exit;

                //->all();
                //echo "<pre>";print_r($transactions);exit;
                $mytransactions = array();
                if(!empty($transactions)){
                    foreach ($transactions as $key=>$transaction){
                        $transactionitems = $transaction->transactionitems;
                        //echo "<pre>";print_r($transactionitems);exit;
                        switch ($transaction->reftype) {
                            case "Monthly Rental";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = ($user_id==$transaction->landlord_id)?1:0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Booking Payment";
                                //$amountarray['rental_deposit']
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = ($user_id==$transaction->landlord_id)?1:0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                $items = array();
                                if(!empty($transactionitems)){
                                   foreach ($transactionitems as $k=>$transactionitem){
                                       $items[$k]['description'] = $transactionitem->description;
                                       $items[$k]['amount'] = $transactionitem->total_amount;
                                       if($user_id==$transaction->landlord_id && ($transactionitem->description=='Booking Fees' || $transactionitem->description == 'Deposit' || $transactionitem->description == 'Keycard Deposit'|| $transactionitem->description == 'Utilities Deposit')){
                                        $items[$k]['incoming'] = 1;
                                       }else if($user_id==$transaction->user_id && ($transactionitem->description=='Booking Fees' || $transactionitem->description == 'Deposit' || $transactionitem->description == 'Keycard Deposit'|| $transactionitem->description == 'Utilities Deposit' || $transactionitem->description=='Stamp Duty' || $transactionitem->description == 'Tenancy Fees')){
                                        $items[$k]['incoming'] = 0;
                                       }
                                   }
                                }
                                $mytransactions[$key]['items'] = $items;
                                break;
                            case "Renovation Payment";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype." - ".$transaction->todo->title;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = ($user_id==$transaction->landlord_id)?1:0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Insurance";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Defect Report";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "General";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Other";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Moveout Refund";
                                $items = array();
                                if(!empty($transactionitems)){
                                    $totalamount = 0;
                                    foreach ($transactionitems as $k=>$transactionitem){
                                        $items[$k]['description'] = $transactionitem->description;
                                        $items[$k]['amount'] = $transactionitem->total_amount;

                                        if($transactionitem->receiver_id==$user_id){
                                            $items[$k]['incoming'] = 1;

                                        }else if($transactionitem->sender_id==$user_id){
                                            $items[$k]['incoming'] = 0;
                                        }
                                        $items[$k]['refund'] = 1;

                                    }
                                }
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = ($user_id==$transaction->user_id)?1:0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                $mytransactions[$key]['items'] = $items;

                                break;
                        }

                    }
                }
                return array('status' => 1, 'data' => $mytransactions);




        }


    }


}
