<?php

namespace app\controllers;

use app\models\AgentRatings;
use app\models\AppRatings;
use app\models\BankAccounts;
use app\models\BookingRequests;
use app\models\Chats;
use app\models\Cms;
use app\models\Devices;
use app\models\EmailTemplates;
use app\models\FavouriteProperties;
use app\models\GoldTransactions;
use app\models\Ilifestyle;
use app\models\Images;
use app\models\Istories;
use app\models\ManualKyc;
use app\models\Msc;
use app\models\Notifications;
use app\models\Packages;
use app\models\Payments;
use app\models\PromoCodes;
use app\models\Properties;
use app\models\PropertyRatings;
use app\models\PropertyViews;
use app\models\ServicerequestImages;
use app\models\ServiceRequests;
use app\models\TodoDocuments;
use app\models\TodoItems;
use app\models\TodoList;
use app\models\Topups;
use app\models\Transactions;
use app\models\TransactionsItems;
use app\models\UserPackages;
use app\models\UsersDocuments;
use app\models\VendorRatings;
use app\models\Withdrawals;
use Da\QrCode\QrCode;
use kartik\mpdf\Pdf;
use sizeg\jwt\JwtHttpBearerAuth;
use yii\db\ActiveQuery;
use yii\db\Exception;
use yii\db\Transaction;
use yii\debug\models\search\User;
use yii\filters\auth\HttpBearerAuth;
use yii\swiftmailer\Mailer;
use yii\web\NotFoundHttpException;
use Codeception\Events;
use Yii;
use yii\rest\ActiveController;
use yii\web\Response;
use yii\filters\ContentNegotiator;
use app\models\Users;
use yii\filters\auth\HttpBasicAuth;
use yii\web\UploadedFile;
use yii\helpers\Url;
//use paragraph1\phpFCM\Recipient\Device;
class ApiusersController extends ActiveController
{
    public $modelClass = 'app\models\Users';
    private $language = 1;
    public $baseurl = null;
    private $user_id;
    public static function allowedDomains()
    {
        return [
             '*',                        // star allows all domains
           // 'http://localhost:3000',
           // 'http://test2.example.com',
        ];
    }
    public function init()
  {
      date_default_timezone_set("Asia/Kuala_Lumpur");

      if($_SERVER['HTTP_HOST'] != 'rumah.test') {
          $this->baseurl = Url::base('https');
      }else{
          $this->baseurl = Url::base(true);
      }

      parent::init(); // TODO: Change the autogenerated stub
   }

   public  function actionPrint($data){
       echo "<pre>";print_r($data);exit;
   }
    /**
     * {@inheritdoc}
     */
//    public function behaviors()
//    {
//
//        return [
//            'contentNegotiator' => [
//                'class' => ContentNegotiator::className(),
//                'formats' => [
//                    'application/json' => Response::FORMAT_JSON,
//                ]
//            ],
//
//        ];
//    }

    public function behaviors()
    {

        return [
            'contentNegotiator' => [
                'class' => ContentNegotiator::className(),
                'formats' => [
                    'application/json' => Response::FORMAT_JSON,
                ]
            ],

        ];
    }
    public function beforeAction($action)
    {
        header('Access-Control-Allow-Origin: *');

        header('Access-Control-Allow-Methods: GET, POST, OPTIONS');

        header("Access-Control-Allow-Headers: X-Requested-With,token,user");
        parent::beforeAction($action);

        if ($action->actionMethod != 'actionLogin' && $action->actionMethod != 'actionRegister' && $action->actionMethod!='actionForgotpassword' && $action->actionMethod!='actionAddrefferal' && $action->actionMethod!='actionVerifyotp' && $action->actionMethod!='actionResendotp' && $action->actionMethod!='actionGooglelogin' && $action->actionMethod!='actionFacebooklogin') {
            $headers = Yii::$app->request->headers;
            if(!empty($headers) && isset($headers['token']) && $headers['token']!=''){
                try{
                    $token = Yii::$app->jwt->getParser()->parse((string) $headers['token']);
                    $data = Yii::$app->jwt->getValidationData(); // It will use the current time to validate (iat, nbf and exp)
                    $data->setIssuer(\Yii::$app->params[ 'hostInfo' ]);
                    $data->setAudience(\Yii::$app->params[ 'hostInfo' ]);
                    $data->setId('4f1g23a12aa');
                    // $data->setCurrentTime(time() + 61);
                    if($token->validate($data)){
                        $userdata = $token->getClaim('uid');
                        $this->user_id = $userdata->id;
                        return true;


                    }else{
                        echo json_encode(array('status' => 0, 'message' => 'Authentication Failed.'));exit;

                    }
                }catch (Exception $e) {
                    echo json_encode(array('status' => 0, 'message' => 'Authentication Failed.'));exit;

                }

                //var_dump($token->validate($data));exit;

                //return true;
            }else{

                echo json_encode(array('status' => 0, 'message' => 'Authentication Failed.'));exit;
            }
            //exit;
        }
        return true;


    }

    //Login users
    public function actionLogin()
    {
        $baseurl = $this->baseurl;
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)){

                $model = new Users();
                $model->scenario = 'login';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){
                    $userexist = Users::find()->select(['id','userid','role','full_name','wallet_balance','coins','property_credited','properties_posted','membership_expire_date','contact_no','email','company_name','document_no','gender','registration_no','dob','race','nationality','education_level','bank_account_name','bank_account_no','bank_name','document_type','referred_by','status','identity_status','ekyc_response','current_status','created_at',new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")])->where([
                        'email' => $model->email,
                        'password' => md5($model->password)
                    ])->andWhere(['in','role',['User']])->asArray()->one();

                    if(!empty($userexist)){
                        if($userexist['status']==2){
                            $contact_no = $userexist['contact_no'];
                            if($contact_no!=''){
                                $curl = curl_init();
//60126479285
                                curl_setopt_array($curl, array(
                                    CURLOPT_URL => "https://secure.etracker.cc/MobileOTPAPI/SMSOTP/OTPGenerate?user=homeplus2u&pass=$2zvDgjJ&from=RUMAH&servid=MES01&ApiReturnType=2&text=Your%20Rumah-i%20pincode%20is%20%3COTPCode%3E.&to=".$contact_no."&type=0",
                                    CURLOPT_RETURNTRANSFER => true,
                                    CURLOPT_ENCODING => "",
                                    CURLOPT_MAXREDIRS => 10,
                                    CURLOPT_TIMEOUT => 0,
                                    CURLOPT_FOLLOWLOCATION => true,
                                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                    CURLOPT_CUSTOMREQUEST => "GET",
                                ));
                                curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Length: 0'));



                                $response = curl_exec($curl);
                                $err = curl_error($curl);

                                curl_close($curl);

                                if ($err) {
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                } else {
                                    return array('status' => 1, 'message' => 'Your account is not verified.Please verify using OTP.', 'data' => $contact_no);

                                    //echo $response;exit;
                                }

                            }
                        }else{
                            $userexist['referral_code'] = Users::getReferralCode($userexist['id']);
                            unset($userexist['document_front']);
                            unset($userexist['document_back']);

                            $token = (string) Users::generateToken($userexist);
                            return array('status' => 1, 'message' => 'User Logged in Successfully', 'data' => $userexist,'token'=>$token);

                        }


                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong email or password.');
                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }

            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionGooglelogin()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['email']) && $_POST['email']!='') {
                $userexist = Users::find()->where(['email'=>$_POST['email'],'role'=>'User'])->one();
                if(!empty($userexist)){
                    $model = $userexist;
                }else{
                    $model = new Users();
                    $model->scenario = 'registergoogle';
                }

                $model->attributes = Yii::$app->request->post();

                if($model->validate()){
                    if(empty($userexist)){
                        $model->role = 'User';
                        $model->created_at = date('Y-m-d H:i:s');

                    }
                    if($model->save(false)){
                        if(empty($userexist)){
                            $model->userid = "CUS".Yii::$app->common->generatereferencenumber($model->id);
                            $model->save(false);
                            $package = Packages::findOne(1);
                            $packagemodel = new UserPackages();
                            $packagemodel->user_id = $model->id;
                            $packagemodel->package_id = 1;
                            $packagemodel->quantity = $package->quantity;
                            $packagemodel->start_date = date('Y-m-d');
                            $packagemodel->end_date = NULL;
                            $packagemodel->created_at = date('Y-m-d H:i:s');
                            if($packagemodel->save(false)){
                                $model->property_credited = $package->quantity;
                                $model->save(false);

                            }
                            $userexist = Users::find()->where(['id'=>$model->id])->asArray()->one();
                            $token = (string) Users::generateToken($userexist);

                        }else{
                            $userexist = Users::find()->where(['id'=>$userexist->id])->asArray()->one();
                            unset($userexist['document_front']);
                            unset($userexist['document_back']);
                            $token = (string) Users::generateToken($userexist);


                        }
                        $userexist['referral_code'] = Users::getReferralCode($userexist['id']);

                        return array('status' => 1, 'message' => 'User Logged in Successfully', 'data' => $userexist,'token'=>$token);

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }



                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }

    public function actionFacebooklogin()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['facebookuser_id']) && $_POST['facebookuser_id']!='') {
                $userexist = Users::find()->where(['facebookuser_id'=>$_POST['facebookuser_id'],'role'=>'User'])->one();
                if(!empty($userexist)){
                    $model = $userexist;
                }else{
                    $model = new Users();
                }
                $model->scenario = 'registerfacebook';

                $model->attributes = Yii::$app->request->post();

                if($model->validate()){
                    if(empty($userexist)){
                        $model->role = 'User';
                        $model->created_at = date('Y-m-d H:i:s');

                    }
                    if($model->save(false)){
                        if(empty($userexist)){
                            $model->userid = "CUS".Yii::$app->common->generatereferencenumber($model->id);
                            $model->save(false);
                            $package = Packages::findOne(1);
                            $packagemodel = new UserPackages();
                            $packagemodel->user_id = $model->id;
                            $packagemodel->quantity = $package->quantity;
                            $packagemodel->package_id = 1;
                            $packagemodel->start_date = date('Y-m-d');
                            $packagemodel->end_date = NULL;
                            $packagemodel->created_at = date('Y-m-d H:i:s');
                            if($packagemodel->save(false)){
                                $model->property_credited = $package->quantity;
                                $model->save(false);

                            }
                            $userexist = Users::find()->where(['id'=>$model->id])->asArray()->one();
                            unset($userexist['document_front']);
                            unset($userexist['document_back']);
                            $token = (string) Users::generateToken($userexist);

                        }else{
                            $userexist = Users::find()->where(['id'=>$userexist->id])->asArray()->one();
                            unset($userexist['document_front']);
                            unset($userexist['document_back']);
                            $token = (string) Users::generateToken($userexist);

                        }
                        $userexist['referral_code'] = Users::getReferralCode($userexist['id']);

                        return array('status' => 1, 'message' => 'User Logged in Successfully', 'data' => $userexist,'token'=>$token);

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }



                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionUpdateuser()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $model = Users::findOne($this->user_id);
            $model->scenario = 'updateuser';
            $model->attributes = Yii::$app->request->post();
            if($model->validate()){
                $model->save(false);
                if($model->status==2){
                    $contact_no = $model->contact_no;
                    if($contact_no!=''){
                        $curl = curl_init();
//60126479285
                        curl_setopt_array($curl, array(
                            CURLOPT_URL => "https://secure.etracker.cc/MobileOTPAPI/SMSOTP/OTPGenerate?user=homeplus2u&pass=$2zvDgjJ&from=RUMAH&servid=MES01&ApiReturnType=2&text=Your%20Rumah-i%20pincode%20is%20%3COTPCode%3E.&to=".$contact_no."&type=0",
                            CURLOPT_RETURNTRANSFER => true,
                            CURLOPT_ENCODING => "",
                            CURLOPT_MAXREDIRS => 10,
                            CURLOPT_TIMEOUT => 0,
                            CURLOPT_FOLLOWLOCATION => true,
                            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                            CURLOPT_CUSTOMREQUEST => "GET",
                        ));
                        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Length: 0'));



                        $response = curl_exec($curl);
                        $err = curl_error($curl);

                        curl_close($curl);

                        if ($err) {
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                        } else {
                            return array('status' => 1, 'message' => 'Your account is not verified.Please verify using OTP.', 'data' => $contact_no);

                            //echo $response;exit;
                        }

                    }
                }

            }else{
                return array('status' => 0, 'message' => $model->getErrors());

            }



        }


    }

    public function actionRegister()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $refferal_code = (isset($_POST['referral_code']))?$_POST['referral_code']:'';

                $model = new Users();
                $model->scenario = 'register';
                $model->attributes = Yii::$app->request->post();

                if($model->validate()){
                    $model->referral_code = NULL;
                    $model->role = 'User';
                    $model->password = md5(Yii::$app->request->post('password'));
                    $model->verify_token = Yii::$app->getSecurity()->generateRandomString();
                    $model->created_at = date('Y-m-d h:i:s');

                    $save = $model->save();

                    if($save){
                        $model->userid = "CUS".Yii::$app->common->generatereferencenumber($model->id);
                        $model->save(false);
                        $contact_no = $model->contact_no;
                        $package = Packages::findOne(1);
                        $packagemodel = new UserPackages();
                        $packagemodel->user_id = $model->id;
                        $packagemodel->package_id = 1;
                        $packagemodel->quantity = $package->quantity;
                        $packagemodel->start_date = date('Y-m-d');
                        $packagemodel->end_date = NULL;
                        $packagemodel->created_at = date('Y-m-d H:i:s');
                        if($packagemodel->save(false)){
                            $model->property_credited = $package->quantity;
                            $model->save(false);

                        }
                        if($contact_no!=''){
                            $curl = curl_init();
//60126479285
                            curl_setopt_array($curl, array(
                                CURLOPT_URL => "https://secure.etracker.cc/MobileOTPAPI/SMSOTP/OTPGenerate?user=homeplus2u&pass=$2zvDgjJ&from=RUMAH&servid=MES01&ApiReturnType=2&text=Your%20Rumah-i%20pincode%20is%20%3COTPCode%3E.&to=".$contact_no."&type=0",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_ENCODING => "",
                                CURLOPT_MAXREDIRS => 10,
                                CURLOPT_TIMEOUT => 0,
                                CURLOPT_FOLLOWLOCATION => true,
                                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                CURLOPT_CUSTOMREQUEST => "GET",
                            ));
                            curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Length: 0'));



                            $response = curl_exec($curl);
                            $err = curl_error($curl);

                            curl_close($curl);
                            //echo $response;exit;
                            if ($err) {
                                echo "cURL Error #:" . $err;exit;
                            } else {
                                //echo $response;exit;
                            }

                        }
                        if(!empty($refferal_code)){
                            $referall_id = Users::getUserIdFromReferralCode($refferal_code);
                            if($referall_id!=null && $model->id!=$referall_id){
                                $referral_user = Users::findOne($referall_id);
                                if(!empty($referral_user)){
                                    $model->referred_by = $referral_user->id;
                                    $model->save(false);

                                    return array('status' => 1, 'message' => 'You have Registered  Successfully.We have sent you OTP on your mobile number,Please verify it.','user_id'=>$model->id);


                                }else{
                                    return array('status' => 0, 'message' => 'Please enter Valid Referral Code.');
                                }
                                //return array('status' => 0, 'message' => 'Please enter Valid Referral Code.');
                            }else{
                                return array('status' => 0, 'message' => 'Please enter Valid Referral Code.');

                            }
                        }else{
                            $model->save(false);

                            return array('status' => 1, 'message' => 'You have Registered  Successfully.We have sent you OTP on your mobile number,Please verify it.','user_id'=>$model->id);

                        }

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                        }



                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }

    public function actionResendotp()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['contact_no']) && $_POST['contact_no'] != '') {
                $contact_no = $_POST['contact_no'];
                if ($contact_no != '') {
                    $curl = curl_init();

                    curl_setopt_array($curl, array(
                        CURLOPT_URL => "https://secure.etracker.cc/MobileOTPAPI/SMSOTP/OTPGenerate?user=homeplus2u&pass=$2zvDgjJ&from=RUMAH&servid=MES01&ApiReturnType=2&text=Your%20Rumah-i%20pincode%20is%20%3COTPCode%3E.&to=".$contact_no."&type=0",
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_ENCODING => "",
                        CURLOPT_MAXREDIRS => 10,
                        CURLOPT_TIMEOUT => 0,
                        CURLOPT_FOLLOWLOCATION => true,
                        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                        CURLOPT_CUSTOMREQUEST => "GET",
                    ));
                    curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Length: 0'));


                    $response = curl_exec($curl);
                    $err = curl_error($curl);

                    curl_close($curl);
                   // echo $response;exit;
                    if ($err) {
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                    } else {
                        return array('status' => 1, 'message' => 'OTP sent successfully.', 'data' => '');

                        //echo $response;exit;
                    }
                } else {
                    return array('status' => 0, 'message' => 'Please enter mandatory fields.');
                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }


        }
    }

    public function actionVerifyotp(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['contact_no']) && $_POST['contact_no']!='' && isset($_POST['otp']) && $_POST['otp']!='') {
               $contact_no = $_POST['contact_no'];
               $otp = $_POST['otp'];
                $curl = curl_init();
                $model = Users::find()->where(['contact_no'=>$contact_no,'role'=>'User'])->one();
                if(empty($model)){
                    return array('status' => 0, 'message' => 'User details not found.');

                }
//60126479285
                curl_setopt_array($curl, array(
                    CURLOPT_URL => "https://secure.etracker.cc/MobileOTPAPI/SMSOTP/OTPVerify?user=homeplus2u&from=RUMAH&to=".$contact_no."&pincode=".$otp."&servid=MES01&ApiReturnType=2&pass=$2zvDgjJ",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 30,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "POST",

                ));
                curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Length: 0'));



                $response = curl_exec($curl);
                $err = curl_error($curl);

                curl_close($curl);

                //print_r($response);exit;
                if ($err) {
                    return array('status' => 0, 'message' => 'Something went wrong.Please try again.');

                } else {
                    $response = json_decode($response);
                    if(!empty($response) && $response->StatusCode==200 || $response->StatusCode==506){

                        $model->status = 1;
                        if($model->save(false)){
                            $userid = $model->referred_by;
                            if($model->referred_by!='') {
                                $user_id = $model->id;
                                $gold_coins = 188;
                                Yii::$app->common->addgoldcoinspurchase($user_id, $gold_coins, null, 'Onboarding', $userid);
                            }

                            //Yii::$app->common->addgoldcoinspurchase($user_id,$gold_coins,null,'Onboarding');

                            return array('status' => 1, 'message' => 'Your account have Verified Successfully.');

                        }else{
                            return array('status' => 0, 'message' => 'You have entered wrong OTP.Please enter correct OTP.');

                        }

                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong OTP.Please enter correct OTP.');

                    }
                    //echo $response;exit;
                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }

    }

    //Forgot password
    public function actionForgotpassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && !empty($_POST['email'])) {
                $model = Users::find()->where(['email'=>$_POST['email']])->andWhere(['in','role',['User']])->one();
                if(!empty($model)){
                    $permitted_chars = '0123456789abcdefghijklmnopqrstuvwxyz';

                    $password = substr(str_shuffle($permitted_chars), 0, 10);
                    $model->password = $password;
                    $emailtemplate = EmailTemplates::findOne(['name'=>'User Forgot Password']);
                    $content = EmailTemplates::getemailtemplate($emailtemplate,$model,'');

                    $send = Yii::$app->mailer->compose()
                        ->setFrom('rumahimy@gmail.com')
                        ->setTo($model->email)
                        ->setSubject($emailtemplate->subject)
                        ->setHtmlBody($content)
                        ->send();
                    //var_dump($send);exit;
                    $model->password = md5($password);
                    $model->save(false);


                    return array('status' => 1, 'message' => 'Your new password sent to your email.Please check your inbox.');
                    //var_dump($send);exit;
                }else{
                    return array('status' => 0, 'message' => 'This email is not registered.');
                }


            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionForgotsecondarypassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
                $model = Users::findOne($this->user_id);
                if(!empty($model)){
                    $permitted_chars = '0123456789';

                    $password = substr(str_shuffle($permitted_chars), 0, 6);
                    $model->secondary_password = md5($password);
                    $model->save(false);
                    $model->secondary_password = $password;
                    $emailtemplate = EmailTemplates::findOne(['name'=>'User Forgot Secondary password']);
                    $content = EmailTemplates::getemailtemplate($emailtemplate,$model,'');

                    $send = Yii::$app->mailer->compose()
                        ->setFrom('rumahimy@gmail.com')
                        ->setTo($model->email)
                        ->setSubject('Your New PIN')
                        ->setHtmlBody($content)
                        ->send();
                    $subject = "New PIN";
                    $textmessage = "New PIN has been delivered to your email!";
//                    if($subject!='' && $textmessage!='' ){
//                        //echo "<pre>";print_r($voucher);exit;
//                        $devices = Devices::find()->where(['user_id'=>$_POST['user_id']])->all();
//                        //echo "<pre>";print_r($devices);exit;
//                        if(!empty($devices)) {
//                            $note = Yii::$app->fcm1->createNotification($subject, $textmessage);
//                            $note->setIcon('fcm_push_icon')->setSound('default')->setClickAction('FCM_PLUGIN_ACTIVITY')
//                                ->setColor('#ffffff');
//
//                            $message = Yii::$app->fcm1->createMessage();
//
//                            foreach ($devices as $device) {
//                                $message->addRecipient(new Device($device->device_token));
//                            }
//
//                            $message->setNotification($note)
//                                ->setData([
//                                    'title' => $subject,
//                                    'body' => $textmessage
//                                ]);
//
//                            $response = Yii::$app->fcm1->send($message);
//                        }
//                    }
                    return array('status' => 1, 'message' => 'Your new PIN sent to your email.Please check your inbox.');
                    //var_dump($send);exit;
                }else{
                    return array('status' => 0, 'message' => 'This email is not registered.');
                }



        }


    }

    public function actionSavedevice()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
                $model = new Devices();
                $model->scenario = 'saveuserdevice';
                $model->attributes = Yii::$app->request->post();
                $model->user_id = $this->user_id;
                if($model->validate()){

                    $tokentexist = Devices::find()->where(['user_id'=>$this->user_id,'device_token'=>$model->device_token])->all();
                    if(!empty($tokentexist)){
                        return array('status' => 1, 'message' => 'You have added device Successfully.');
                    }else {
                        $tokentexistotheruser = Devices::find()->where(['device_token'=>$model->device_token])->one();
                        if(!empty($tokentexistotheruser) && $tokentexistotheruser->user_id!=$this->user_id){
                            $tokentexistotheruser->delete();
                        }
                        $model->created_at = date('Y-m-d H:i:s');
                        $save = $model->save(false);
                        if ($save) {
                            return array('status' => 1, 'message' => 'You have added device Successfully.');
                        } else {
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes');
                        }
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }

        }


    }
    public function actionAbout()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $cmsdetails = Cms::find()->where(['id'=>1])->asArray()->one();
            return array('status' => 1, 'data' => $cmsdetails);
        }
    }

    public function actionNotifications()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $baseurl = $this->baseurl;
            $user_id = $this->user_id;
            $notifications = Notifications::find()->where(['receiver_id'=>$user_id])->orderBy(['id'=>SORT_DESC])->asArray()->all();
            return array('status' => 1, 'data' => $notifications);





        }


    }

    public function actionPackages()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
           $packages = Packages::find()->all();
           $currentpackage = UserPackages::find()->where(['user_id'=>$this->user_id])->andWhere(['>=','end_date',date("Y-m-d")])->orderBy(['id'=>SORT_DESC])->one();
            $mypropertiescount = Properties::find()->where(['user_id'=>$this->user_id])->count();
           // $mypropertiescount = 100;
            $userdetails = Users::findOne($this->user_id);
            $currentpackageid = '';
            $expired_date = '';
           if(!empty($currentpackage)){
               $currentpackageid = $currentpackage->package_id;
               $expired_date = ($currentpackage->end_date!='')?date('d-m-Y',strtotime($currentpackage->end_date)):'';
            }else{
               $currentpackageid = 1;
               $expired_date = '';
           }
            $userdetails = Users::findOne($this->user_id);
            $totalpropertyadded = $userdetails->properties_posted;
            $currentcredit = $userdetails->property_credited;
            $remaining = $currentcredit- $totalpropertyadded;
            $data = array();
            //$remaining = 0;

            if(!empty($packages)){
               foreach ($packages as $key=>$package){
                    if($currentpackageid==$package->id) {
                       $data[$key]['remaining'] = ($remaining>0)?$remaining:0;
                       $data[$key]['id'] = $package->id;
                       $data[$key]['package'] = $package->name;
                       $data[$key]['price'] = $package->price;
                       $data[$key]['current'] = ($currentpackageid==$package->id)?1:0;
                       $data[$key]['total'] = $package->quantity;
                        $data[$key]['expired_date'] = ($currentpackageid>1)?$expired_date:'';

                        $currentkey = $key;
                   }else if(($currentpackageid==1) || ($package->id >1 && $currentpackageid < $package->id)){
                       $data[$key]['id'] = $package->id;
                       $data[$key]['package'] = $package->name;
                       $data[$key]['price'] = $package->price;
                       $data[$key]['current'] = ($currentpackageid==$package->id)?1:0;
                       $data[$key]['total'] = $package->quantity;
                        $data[$key]['expired_date'] = ($currentpackageid>1)?$expired_date:'';

                    }
                  // $data[$key]['expired_date'] = $expired_date;
//                   if(($remaining==0 && $package->id>1) || $currentpackageid==''){
//                       $data[$key]['id'] = $package->id;
//                       $data[$key]['package'] = $package->name;
//                       $data[$key]['price'] = $package->price;
//                       $data[$key]['current'] = ($currentpackageid==$package->id)?1:0;
//                       $data[$key]['total'] = $package->quantity;
//
//                   }



               }
           }

           return array('status' => 1, 'data' => $data,'remaining'=>$remaining);


        }


    }

    public function actionPurchasepackage()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST) && $_POST['package_id']!='') {
                $promocode = (isset($_POST['promo_code']) && $_POST['promo_code'] != '') ? $_POST['promo_code'] : '';
                $amount = (isset($_POST['amount']) && $_POST['amount'] != '') ? $_POST['amount'] : '';
                $discount = (isset($_POST['discount']) && $_POST['discount'] != '') ? $_POST['discount'] : 0;
                $goldcoins = (isset($_POST['gold_coins']) && $_POST['gold_coins'] != '') ? $_POST['gold_coins'] : 0;
                $coins_savings = (isset($_POST['coins_savings']) && $_POST['coins_savings'] != '') ? $_POST['coins_savings'] : 0;
                if ($promocode != '') {
                    $promocodedetails = PromoCodes::find()->where(['promo_code' => $promocode])->one();
                }
                $model = new UserPackages();
                $model->package_id = $_POST['package_id'];

                $packagedetails = Packages::findOne($_POST['package_id']);
                $userbalance = Users::getbalance($this->user_id);
                $amountwithoutsst = $packagedetails->price;
                $totaldiscount = $discount+$coins_savings;
                $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount;
                // echo $totalamount."<br>".$amountwithoutsst."<br>".$tr."<br>".$sstafterdiscount."<br>".$totalamountafterdiscount;exit;

                if ($userbalance < $totalamountafterdiscount) {
                    return array('status' => 0, 'message' => 'You don"t have enough wallet balance');

                }

                    $model->user_id = $this->user_id;
                    $model->start_date = date('Y-m-d');
                    $model->end_date = date('Y-m-d', strtotime('+1 month'));
                    $model->quantity = $packagedetails->quantity;
                    $model->created_at = date('Y-m-d H:i:s');
                    if ($model->save()) {
                        $transactionmodel = new Transactions();
                        $transactionmodel->user_id = $model->user_id;
                        $transactionmodel->amount = $packagedetails->price;
                        $transactionmodel->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                        $transactionmodel->amount = $amountwithoutsst;
                        $transactionmodel->discount = $discount;
                        $transactionmodel->coins = $goldcoins;
                        $transactionmodel->sst = $sstafterdiscount;
                        $transactionmodel->coins_savings = $coins_savings;
                        $transactionmodel->total_amount = $totalamountafterdiscount;
                        $transactionmodel->package_id = $model->id;
                        $transactionmodel->created_at = date('Y-m-d H:i:s');
                        $transactionmodel->type = 'Payment';
                        $transactionmodel->reftype = 'Package Purchase';
                        $transactionmodel->status = 'Completed';
                        if($transactionmodel->save()){
                            $lastid = $transactionmodel->id;
                            $reference_no = Yii::$app->common->generatereferencenumber($lastid);
                            $transactionmodel->reference_no = "TR".$reference_no;
                            $transactionmodel->save(false);
                            $user = Users::findOne($model->user_id);
                            $user->membership_expire_date = date('Y-m-d', strtotime('+1 month'));
                            $user->property_credited += $packagedetails->quantity;
                            if($user->save(false)){
                                Users::updatebalance($userbalance-$totalamountafterdiscount,$this->user_id);
                                if($goldcoins>0) {
                                    Yii::$app->common->deductgoldcoinspurchase($this->user_id, $goldcoins, $lastid);
                                }
                                $gold_coins = $totalamountafterdiscountwithoutsst*1.5;
                                Yii::$app->common->addgoldcoinspurchase($this->user_id,$gold_coins,$lastid);
                                return array('status' => 1, 'message' => 'You have purchased package successfully.');

                            }else{
                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                        }

                        }else{
                        return array('status' => 0, 'message' => $model->getErrors());

                        }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }

        }


    }
    public function actionMyprofile()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $userdetails = Users::find()->select(['*', new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")])->where(['id'=>$this->user_id])->asArray()->one();
            $userdetails['referral_code'] = Users::getReferralCode($userdetails['id']);
            $qrCode = (new QrCode($userdetails['referral_code']))
                ->setSize(250)
                ->setMargin(5)
                ->useForegroundColor(0,0,0);
            $qrCode->writeFile(__DIR__ . '/../vendor/2amigos/code.png');
            $userdetails['qrcode'] = $qrCode->writeDataUri();
            return array('status' => 1, 'data' => $userdetails);


        }


    }

    public function actionUpdateprofile()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
           $model = Users::findOne($this->user_id);
            //$model->scenario = 'updateprofileuser';
               $model->attributes = Yii::$app->request->post();
               $model->dob = (isset($model->dob) && $model->dob!='')?date('Y-m-d',strtotime($model->dob)):NULL;
               $model->updated_at = date('Y-m-d h:i:s');
               if($model->save(false)){
                   return array('status' => 1, 'message' => 'You have updated your profile successfully.');

               }else{
                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

               }



        }


    }

    public function actionUploadprofilepicture()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
                $model = Users::findOne(['id'=>$this->user_id]);
                $model->scenario = 'changepicture';
                $model->attributes = Yii::$app->request->post();
                $model->picture = $uploads = UploadedFile::getInstanceByName('picture');
                if($model->validate()){

                    $newFileName = \Yii::$app->security
                            ->generateRandomString().'.'.$model->picture->extension;
                    $model->image = $newFileName;
                    $model->picture->saveAs('uploads/users/' . $newFileName);
                    $model->picture = null;
                    if ($model->save(false)){
                        return array('status' => 1, 'message' => 'You have changed your profile picture successfully.');

                    }else{
                        return array('status' => 0, 'message' => $model->getErrors());
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }

        }


    }

    public function actionReportproperty()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST) && isset($_POST['property_id']) && $_POST['property_id']!='' && isset($_POST['message']) && $_POST['message']!=''){
                $model = Properties::findOne($_POST['property_id']);
                $usermodel = Users::findOne($this->user_id);
                $emailtemplate = EmailTemplates::findOne(['name' => 'Report Property']);
                $content = EmailTemplates::getemailtemplate($emailtemplate, $model,$usermodel,'',$_POST['message']);
                $send = Yii::$app->mailer->compose()
                    ->setFrom('rumahimy@gmail.com')
                    ->setTo('rumahimy@gmail.com')
                    ->setSubject($emailtemplate->subject)
                    ->setHtmlBody($content)
                    ->send();

                return array('status' => 1, 'message' => 'You have reported property successfully.');

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }



        }


    }
    public function actionDashboard()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if (!empty($_POST)) {
                $baseurl = $this->baseurl;
                $userid = $this->user_id;

                $lat = (isset($_POST['lat']) && $_POST['lat'] != '') ? $_POST['lat'] : '';
                $long = (isset($_POST['long']) && $_POST['long'] != '') ? $_POST['long'] : '';
                //$harvesformula = ($lat != '' && $long != '') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) ) as distance' : '';

                $favouritemerchants = FavouriteProperties::find()->with([
                    'property' => function ($query) {
                        $query->select('id,property_no,title,location,property_type,type,price');
                    },
                    'property.pictures' => function ($query) use($baseurl) {
                        $query->select(['id', 'property_id', new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->one();
                    },
                ])->where(['user_id' => $userid])->asArray()->all();
                $featuredproperties = Properties::find()
                    ->select('id,property_no,title,location,property_type,type,price')
                    ->with([
                        'pictures'=>function ($query) use($baseurl) {
                            $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->one();
                        },
                    ])->where(['is_featured'=>1])->asArray()->all();
                $data['isaved'] = $favouritemerchants;
                $data['featured'] = $featuredproperties;
                $data['istories'] = Istories::find()->select(['id','title','link','description',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->asArray()->all();
                $data['ilifestyles'] = Ilifestyle::find()->select(['id','title','link','description',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->asArray()->all();

                return array('status' => 1, 'data' => $data);

            }else{

                return array('status' => 0, 'message' => 'Please allow location access to search property nearby.');

            }

        }


    }
    public function actionAddtofavourite()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST)){
                $model = new FavouriteProperties();
                $model->scenario = 'addfavourite';
                $model->attributes = Yii::$app->request->post();
                $model->user_id = $this->user_id;
                if($model->validate()){
                    $favouritexists = FavouriteProperties::findOne(['property_id'=>$model->property_id,'user_id'=>$model->user_id]);
                    if(!empty($favouritexists)){
                        return array('status' => 0, 'message' => 'You already added this property as favourite');exit;
                    }
                    $model->created_at = date('Y-m-d h:i:s');
                    $model->save();
                    return array('status' => 1, 'message' => 'Property added as favourite successfully.');
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }

        }


    }
    public function actionRemovefavourite()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST)){
                $model = new FavouriteProperties();
                $model->scenario = 'removefavourite';
                $model->attributes = Yii::$app->request->post();
                $model->user_id = $this->user_id;
                if($model->validate()){
                    $favouritexists = FavouriteProperties::findOne(['property_id'=>$model->property_id,'user_id'=>$model->user_id]);
                    $favouritexists->delete();
                    return array('status' => 1, 'message' => 'Property removed successfully.');
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }

        }


    }
    public function actionFavourites()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['lat']) && $_POST['lat'] != '' && isset($_POST['long']) && $_POST['long'] != '') {
                $baseurl = $this->baseurl;
                $userid = $this->user_id;

                $lat = (isset($_POST['lat']) && $_POST['lat'] != '') ? $_POST['lat'] : '';
                $long = (isset($_POST['long']) && $_POST['long'] != '') ? $_POST['long'] : '';
                $harvesformula = ($lat != '' && $long != '') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) ) as distance' : '';

                $favouritemerchants = FavouriteProperties::find()->with([
                    'property' => function ($query) use ($harvesformula) {
                        $query->select('id,latitude,longitude,property_no,title,description,location,property_type,type,room_type,preference,bedroom,bathroom,availability,size_of_area,price,' . $harvesformula);
                    },
                    'property.pictures' => function ($query) use($baseurl) {
                        $query->select(['id', 'property_id', new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->one();
                    },
                ])->where(['user_id' => $userid])->asArray()->all();

                return array('status' => 1, 'data' => $favouritemerchants);

            }else{

                return array('status' => 0, 'message' => 'Please allow location access to search property nearby.');

            }
        }




    }
    public function actionGoldtransactions()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $userdetails = Users::find()->select(['id','full_name', 'coins',new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")])->where(['id'=>$this->user_id])->asArray()->one();
            $transactions = GoldTransactions::find()->where(['user_id'=>$this->user_id])->orWhere(['refferer_id'=>$this->user_id])->andWhere(['status'=>'Completed'])->orderBy(['id'=>SORT_DESC])->asArray()->all();

            $goldtransactions = array();
            $goldtransactions1 = array();
            if(!empty($transactions)){
                foreach ($transactions as $transaction){
                    if($transaction['reftype']=='Tenancy signed' || $transaction['reftype']=='Onboarding'){
                        if($transaction['refferer_id']==$this->user_id) {
                            $goldtransactions[] = $transaction;
                        }
                    }else{
                        $goldtransactions[] = $transaction;
                    }
                }
            }
            //echo "<pre>";print_r($goldtransactions);exit;
            $userdetails['coins'] = round($userdetails['coins']);
            return array('status' => 1, 'userdetails' => $userdetails,'data'=>$goldtransactions);


        }


    }
    public function actionMyproperties()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $baseurl = $this->baseurl;
            $user_id = $this->user_id;
            $vacantproperties = Properties::find()->with([
                'pictures'=>function ($query) use($baseurl) {
                    $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->all();
                },
                'views'=>function ($query) use($baseurl) {
                    $query->select('COUNT(*) as views,property_id')->all();
                },
            ])->where(['user_id'=>$user_id,'status'=>'Active'])->asArray()->all();
            $rentedproperties = Properties::find()->with([
                'pictures'=>function ($query) use($baseurl) {
                    $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->all();
                },
                'views'=>function ($query) use($baseurl) {
                    $query->select('COUNT(*) as views,property_id')->all();
                },
                'request'=>function ($query) use($baseurl) {
                    $query->select('id,commencement_date,monthly_rental,tenancy_period,user_id')->all();
                },
                'request.user'=>function ($query) use($baseurl) {
                    $query->select("id,full_name")->all();
                },
            ])->where(['user_id'=>$user_id,'status'=>'Rented'])->asArray()->all();
            if(!empty($rentedproperties)){
                foreach ($rentedproperties as $key=>$rentedproperty){
                    $commencmentdate = $rentedproperty['request']['commencement_date'];
                    $months = $rentedproperty['request']['tenancy_period'];
                    $effectiveDate = date('Y-m-d', strtotime("+".$months." months", strtotime($commencmentdate)));
                    $rentedproperties[$key]['tenant'] =  $rentedproperty['request']['user']['full_name'];
                    $rentedproperties[$key]['rental'] =  $rentedproperty['request']['monthly_rental'];
                    $rentedproperties[$key]['date'] =  $effectiveDate;


                }

            }
            $myvacantproperties = BookingRequests::find()->select(['id','property_id','user_id','landlord_id','monthly_rental','commencement_date','tenancy_period'])->with([
                'property'=>function ($query) {
                    $query->select('id,property_no,title,doorlock_code,is_managed');
                },
                'property.pictures'=>function ($query) use($baseurl) {
                    $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->all();
                },
                'user'=>function($query){
                    $query->select(["id","full_name"]);
                },
                'landlord'=>function($query){
                    $query->select(["id","full_name"]);

                },
          ])->where(['user_id'=>$user_id,'status'=>'Rented'])->asArray()->all();
            $myrentedproperties = array();
            if(!empty($myvacantproperties)){
                foreach ($myvacantproperties as $key=>$myvacantproperty){
                    $commencmentdate = $myvacantproperty['commencement_date'];
                    $months = $myvacantproperty['tenancy_period'];
                    $effectiveDate = date('Y-m-d', strtotime("+".$months." months", strtotime($commencmentdate)));
                    $myrentedproperties[] = $myvacantproperty['property'];
                    $myrentedproperties[$key]['landlord_id'] =  $myvacantproperty['landlord']['id'];
                    $myrentedproperties[$key]['landlord'] =  $myvacantproperty['landlord']['full_name'];
                    $myrentedproperties[$key]['rental'] =  $myvacantproperty['monthly_rental'];
                    $myrentedproperties[$key]['date'] =  $effectiveDate;


                }

            }
            $data['vacant'] = $vacantproperties;
            $data['rented'] = $rentedproperties;
            $data['myrented'] = $myrentedproperties;

            return array('status' => 1, 'data' => $data);


        }


    }
    public function actionChangepassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $model = new Users();
                    //Users::findOne($this->user_id);
                $model->scenario = 'changepassword';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){

                    $usermodel = Users::findOne(['id'=>$this->user_id,'password'=>md5($model->oldpassword)]);
                    if (!empty($usermodel)){
                        $usermodel->password = md5($model->newpassword);
                        $usermodel->save(false);
                        return array('status' => 1, 'message' => 'You have changed your primary password successfully.');
                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong old password.');
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
//change secondary password
    public function actionChangesecondarypassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $model = new Users();
                $model->scenario = 'changepassword';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){

                    $usermodel = Users::findOne(['id'=>$this->user_id,'secondary_password'=>md5($model->oldpassword)]);
                    if (!empty($usermodel)){
                        $usermodel->secondary_password = md5($model->newpassword);
                        $usermodel->save(false);
                        return array('status' => 1, 'message' => 'You have changed your PIN successfully.');
                    }else{
                        return array('status' => 0, 'message' => 'You have entered wrong old PIN.');
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionCreatesecondarypassword()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $model = Users::findOne(['id'=>$this->user_id]);
                $model->scenario = 'createsecondarypassword';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){
                    $model->secondary_password = md5($_POST['secondary_password']);
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have created your PIN successfully.');
                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());
                }
            } else {
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }


    }
    public function actionAddbankdetails()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if(!empty($_POST)){
                $model = Users::findOne($this->user_id);
                $model->scenario = 'adduseraccount';
                $model->attributes = Yii::$app->request->post();

                if ($model->validate()) {
                    $validatepassword = Yii::$app->common->validatesecondarypassword($this->user_id,$model->secondarypassword);
                    if(!$validatepassword){
                        return array('status' => 0, 'message' => 'You have entered invalid wrong PIN.');
                    }
                    unset($model->secondarypassword);
                    if($model->save(false)){
                        return array('status' => 1, 'message' => 'You have updated bank account successfully.');

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }


                } else {
                    return array('status' => 0, 'message' => $model->getErrors());
                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }

        }


    }

    public function actionTopup()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
            if(!empty($_POST)){
                $transaction = Yii::$app->db->beginTransaction();

                try {
                    $model = new Topups();
                    $model->scenario = 'topup';
                    $model->attributes = Yii::$app->request->post();
                    $model->user_id = $user_id;
                    if ($model->validate()) {

                        $validatepassword = Yii::$app->common->validatesecondarypassword($model->user_id,$model->password);
                        if(!$validatepassword){
                            return array('status' => 0, 'message' => 'You have entered invalid wrong PIN.');
                        }
                        $userbalance = Users::getbalance($model->user_id);
                        $amount = $model->amount;
                        if($amount<=0){
                            return array('status' => 0, 'message' => 'Amount must be greator than 0.');
                        }
                        $model->amount =  $amount;
                        $model->total_amount = $amount;
                        $model->oldbalance = $userbalance;
                        $model->newbalance = $userbalance + $model->amount;
                        $model->status = 'Completed';
                        $model->created_at = date('Y-m-d H:i:s');
                        if($model->save(false)){
                            $transactionmodel = new Transactions();
                            $transactionmodel->user_id = $model->user_id;
                            $transactionmodel->amount = $amount;
                            $transactionmodel->total_amount = $amount;
                            $transactionmodel->topup_id = $model->id;
                            //$transactionmodel->senangpay_order_id = time().$model->user_id;
                            $transactionmodel->created_at = date('Y-m-d H:i:s');
                            $transactionmodel->reftype = 'Topup';
                            $transactionmodel->status = 'Completed';
                            if($transactionmodel->save(false)){
                                $lastid = $transactionmodel->id;
                                $reference_no = Yii::$app->common->generatereferencenumber($lastid);
                                $transactionmodel->reference_no = $reference_no;
                                if($transactionmodel->save()){
                                    Users::updatebalance($userbalance + $model->amount,$user_id);
                                    $transaction->commit();
                                    return array('status' => 1, 'message' => 'You have added money to your wallet.');
                                }else{
                                    $transaction->rollBack(); // if save fails then rollback
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                }
                            }else{
                                $transaction->rollBack();
                                return array('status' => 0, 'message' => $transactionmodel->getErrors());
                            }

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try  after sometimes.');
                        }

                    } else {
                        return array('status' => 0, 'message' => $model->getErrors());
                    }
                }catch (Exception $e) {
                    // # if error occurs then rollback all transactions
                    $transaction->rollBack();
                }

            }else{

                return array('status' => 0,'message'=>'Please enter Mandatory Fields.');
            }

        }


    }
    public function actionWithdrawal()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if(!empty($_POST)){

                $transaction = Yii::$app->db->beginTransaction();

                try {

                    $model = new Withdrawals();
                    $model->scenario = 'userwithdrawal';
                    $model->attributes = Yii::$app->request->post();
                    $model->user_id = $this->user_id;
                    if ($model->validate()) {
                        $userdetails = Users::findOne($model->user_id);
                        $validatepassword = Yii::$app->common->validatesecondarypassword($model->user_id,$model->password);
                        if(!$validatepassword){
                            return array('status' => 0, 'message' => 'You have entered invalid wrong PIN.');
                        }


                        $withdrawalrequestexist = Withdrawals::findOne(['status'=>'Pending','user_id'=>$model->user_id]);
                        if(!empty($withdrawalrequestexist)){
                            return array('status' => 0, 'message' => 'You have already submitted a withdrawal request. Please wait for it to complete processing first before submitting again.');
                        }

                        $bankaccountexist = Users::findOne(['id'=>$this->user_id]);
                        if($bankaccountexist->bank_name=='' || $bankaccountexist->bank_account_no==''){
                            return array('status' => 0, 'message' => 'Please submit your banking information.');
                        }
                        $userbalance = Users::getbalance($model->user_id);
                        $amount = $model->amount;
                        if($amount<=0){
                            return array('status' => 0, 'message' => 'Amount must be greator than 0.');
                        }
                        if($amount>$userbalance){
                            return array('status' => 0, 'message' => 'Please enter lower amount.');
                        }
                        $model->old_balance = $userbalance;
                        $model->new_balance = $userbalance-$amount;
                        $model->total_amount = $amount;
                        $model->updated_by = $this->user_id;
                        $model->status = 'Pending';
                        $model->created_at = date('Y-m-d H:i:s');
                        $model->updated_at = date('Y-m-d H:i:s');

                        if($model->save(false)){
                            $transactionmodel = new Transactions();
                            $transactionmodel->user_id = $model->user_id;
                            $transactionmodel->amount = $model->amount;
                            $transactionmodel->total_amount = $amount;
                            $transactionmodel->withdrawal_id = $model->id;
                            $transactionmodel->created_at = date('Y-m-d H:i:s');
                            $transactionmodel->reftype = 'Withdrawal';
                            $transactionmodel->status = 'Pending';
                            if($transactionmodel->save()){
                                $lastid = $transactionmodel->id;
                                $reference_no = Yii::$app->common->generatereferencenumber($lastid);
                                $transactionmodel->reference_no = $reference_no;
                                if($transactionmodel->save()){
                                    $model->reference_no = "TR".$reference_no;
                                    $model->save(false);
                                    Users::updatebalance($model->new_balance,$this->user_id);
                                    $transaction->commit();

                                    return array('status' => 1, 'message' => 'Withdrawal request submitted successfully. Please allow 7 days for processing.');
                                }else{
                                    $transaction->rollBack(); // if save fails then rollback
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                }
                            }

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try  after sometimes.');
                        }

                    } else {
                        return array('status' => 0, 'message' => $model->getErrors());
                    }
                }catch (Exception $e) {
                    // # if error occurs then rollback all transactions
                    $transaction->rollBack();
                    return array('status' => 0, 'message' => 'Something went wrong.Please try  after sometimes.');
                }

            }else{

                return array('status' => 0,'message' => 'Please enter mandatory fields.');
            }

        }


    }


    public function actionAddproperty()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            if(!empty($_POST)){
                $propertymodel = new Properties();
                $propertymodel->scenario = 'addproperty';
                $propertymodel->attributes = Yii::$app->request->post();
                $propertymodel->amenities = implode(',',$propertymodel->amenities);
                $propertymodel->commute = implode(',',$propertymodel->commute);
                if($propertymodel->validate()){
                    $mypropertiescount = Properties::find()->where(['user_id'=>$this->user_id])->count();
                    $userdetails = Users::findOne($this->user_id);
                    $totalpropertyadded = $userdetails->properties_posted;
                    $currentcredit = $userdetails->property_credited;
                    if($totalpropertyadded >= $currentcredit){
                        return array('status' => 0, 'message' => 'You have already exceeded limit of Post Property. So Please purchase package or delete your listings');

                    }
                    $pictures = $propertymodel->pictures;
                    $propertymodel->pictures = null;
                    $propertymodel->user_id = $this->user_id;
                    $propertymodel->created_at = date('Y-m-d H:i:s');
                    $propertymodel->status = 'Active';
                    if($propertymodel->save(false)){
                        $property_id = $propertymodel->id;
                        if(!empty($pictures)){
                            foreach ($pictures as $picture){
                                $filename = uniqid();

                                $data = Yii::$app->common->processBase64($picture);

                                file_put_contents('uploads/properties/' . $filename . '.' . $data['type'], $data['data']);
                                $propertyimages = new Images();
                                $propertyimages->property_id = $property_id;
                                $propertyimages->image = 'uploads/properties/'.$filename . '.' . $data['type'];
                                $propertyimages->created_at = date('Y-m-d H:i:s');
                                $propertyimages->save(false);
                            }
                        }
                        $propertymodel->property_no = "PR".Yii::$app->common->generatereferencenumber($property_id);
                        if($propertymodel->save(false)){
                            if($propertymodel->insurance==1){
                                $modelCustomer = new TodoList();
                                $modelCustomer->property_id = $propertymodel->id;
                                $modelCustomer->landlord_id = $this->user_id;
                                $modelCustomer->reftype = "Insurance";
                                $modelCustomer->status = "Pending";
                                $modelCustomer->created_at = date('Y-m-d H:i:s');
                                $modelCustomer->save(false);
                            }
                            $userdetails->properties_posted = $userdetails->properties_posted+1;
                            $userdetails->save(false);
                            $countproperties = Properties::find()->where(['user_id'=>$this->user_id])->count();
                            if($countproperties==1) {
                                $userdetails = Users::findOne($this->user_id);
                                //if($userdetails->referred_by!=''){
                                    $gold_coins = 188;
                                    Yii::$app->common->addgoldcoinspurchase($this->user_id,$gold_coins,null,'1st Property Listed',$userdetails->referred_by);


                                //}
                            }
                            return array('status' => 1, 'message' => 'You have added property successfully.');

                        }



                    }else{
                        return array('status' => 0, 'message' => $propertymodel->getErrors());

                    }

                }else{
                    return array('status' => 0, 'message' => $propertymodel->getErrors());

                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }

        }


    }
    public function actionSearch()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $baseurl = $this->baseurl;
            if (!empty($_POST) && isset($_POST['lat']) && $_POST['lat']!='' && isset($_POST['long']) && $_POST['long']!='') {
                $user_id = $this->user_id;
                $lat = (isset($_POST['lat']) && $_POST['lat']!='')?$_POST['lat']:'';
                $long = (isset($_POST['long']) && $_POST['long']!='')?$_POST['long']:'';
                $furnished_status = (isset($_POST['furnished_status']) && $_POST['furnished_status']!='')?$_POST['furnished_status']:'';

                $property_type = (isset($_POST['property_type']) && $_POST['property_type']!='')?$_POST['property_type']:'';
                $room_type = (isset($_POST['room_type']) && $_POST['room_type']!='')?$_POST['room_type']:'';
                $preference = (isset($_POST['preference']) && $_POST['preference']!='')?$_POST['preference']:'';
                $price = (isset($_POST['price']) && $_POST['price']!='')?explode(",",$_POST['price']):'';
                $distance = (isset($_POST['distance']) && $_POST['distance']!='')?$_POST['distance']:5;
                $commute = (isset($_POST['commute']) && $_POST['commute']!='')?explode(",",$_POST['commute']):'';
                $amenities = (isset($_POST['amenities']) && $_POST['amenities']!='')?explode(",",$_POST['amenities']):'';
                $rooms = (isset($_POST['rooms']) && $_POST['rooms']!='')?$_POST['rooms']:'';
                $size = (isset($_POST['size']) && $_POST['size']!='')?$_POST['size']:'';
                $search = (isset($_POST['search']) && $_POST['search']!='')?$_POST['search']:'';
                $location = (isset($_POST['location']) && $_POST['location']!='')?$_POST['location']:'';
                $sort = (isset($_POST['sort']) && $_POST['sort']!='')?$_POST['sort']:'';

                //print_r($price);exit;
                // $searchword = $_POST['search'];

                $baseurl = $this->baseurl;
                $harvesformula = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) ) as distance': '';
                $harvesformula1 = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) )' : '';

                $query1 = Properties::find()
                    ->select('id,user_id,latitude,longitude,property_no,title,description,location,property_type,type,room_type,preference,bedroom,bathroom,availability,size_of_area,status,price,'.$harvesformula)
                ->with([
                    'pictures'=>function ($query) use($baseurl) {
                        $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->one();
                    },
                ]);
                $query1->where(['!=', 'user_id', $user_id])->andWhere(['status'=>'Active']);
                if(!empty($commute)){
                    foreach ($commute as $key=>$item){
                        if($key==0) {
                            $query1->andWhere(new \yii\db\Expression('FIND_IN_SET("'.$item.'",commute)'));
                            // $query1->andWhere(['like', 'commute', $item]);
                        }else{
                            $query1->orWhere(new \yii\db\Expression('FIND_IN_SET("'.$item.'",commute)'));//->addParams([':commute_to_find' => $item]);

                        }

                    }
                }
                if(!empty($amenities)){
                    foreach ($amenities as $key=>$amenity){
                        if($key==0) {
                            $query1->andWhere(new \yii\db\Expression('FIND_IN_SET("'.$amenity.'",amenities)'));

                        }else{
                            $query1->orWhere(new \yii\db\Expression('FIND_IN_SET("'.$amenity.'",amenities)'));//->addParams([':commute_to_find' => $item]);


                        }

                    }
                }
                if($distance!='' && $lat!='' && $long!=''){
                        $query1->andWhere(['<=', $harvesformula1, $distance]);


                }
                if($location!=''){
                    $query1->orWhere(['like', 'location', $location]);
                }

                if($search!=''){
                    $query1->andWhere(['like', 'title', $search]);
                }
                if ($property_type!=''){
                    $query1->andWhere(['property_type'=>$property_type]);
                }
                if($room_type!=''){
                    $query1->andWhere(['room_type'=>$room_type]);
                }
                if($preference!=''){
                    $query1->andWhere(['preference'=>$preference]);
                }

                if($furnished_status!=''){
                   $query1->andWhere(['furnished_status'=>$furnished_status]);
                }
                if($rooms!=''){
                    $query1->andWhere(['<=', 'bedroom', $rooms]);

                }
                if($size!=''){
                    $query1->andWhere(['>=', 'size_of_area', $size]);

                }
                if(!empty($price)){
                    $query1->andWhere(["between", "price", $price[0], $price[1]]);

                }

                if($sort!=''){
                    if($sort=='pricedesc'){
                        $query1->orderBy(['price' => SORT_DESC]);

                    }else if($sort=='priceasc'){
                        $query1->orderBy(['price' => SORT_ASC]);

                    }else if($sort=='posting_date'){
                        $query1->orderBy(['created_at' => SORT_DESC]);

                    }

                }else {

                    if ($lat != '' && $long != '') {
                        $query1->orderBy(['distance' => SORT_ASC]);
                    }
                }

                //$query1->all();

                $properties =  $query1->asArray()->all();
                //echo "<pre>";print_r($properties);exit;
                $properties1 = array();
                if(!empty($properties)){
                    foreach ($properties as $key=>$property){
                        if($property['status']=='Active' && $property['user_id']!=$user_id) {
                            $properties[$key]['favourite'] = Properties::checkfavourite($property['id'], $user_id);
                            $properties1[] = $property;

                        }

                    }
                }
                return array('status' => 1, 'data' => $properties1,'total'=>count($properties1));


            }else{
                return array('status' => 0, 'message' => 'Please allow location access to search property nearby.');

            }
        }


    }

    public function actionPropertydetails()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && !empty($_POST['property_id'])) {
                $baseurl = $this->baseurl;
                $user_id = $this->user_id;
                $query1 = Properties::find()
                    ->select('id,user_id,agent_id,latitude,longitude,property_no,title,description,location,property_type,type,room_type,preference,bedroom,bathroom,availability,size_of_area,price,carparks,amenities,commute,status,digital_tenancy')
                    ->with([
                        'images'=>function ($query) use($baseurl) {
                            $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")]);
                        },
                        'user'=>function($query){
                            $query->select(["id","full_name",'contact_no',new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")]);
                        },
                        'agent'=>function($query){
                            $query->select(["id","company_name",'contact_no','document_no',new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")]);
                        }
                    ])->where(['id'=>$_POST['property_id']]);

                $propertydata =  $query1->asArray()->one();
                if(empty($propertydata)){
                    return array('status' => 0, 'message' => 'No property details found.');

                }
                $propertydata['favourite'] = Properties::checkfavourite($_POST['property_id'],$user_id);
                $lat = $propertydata['latitude'];
                $long = $propertydata['longitude'];
                $harvesformula = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) ) as distance': '';
                $harvesformula1 = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) )' : '';
                $query1 = Properties::find()
                    ->select('id,latitude,longitude,property_no,title,description,location,property_type,type,room_type,preference,bedroom,bathroom,availability,size_of_area,price,'.$harvesformula)
                    ->with([
                        'pictures'=>function ($query) use($baseurl) {
                            $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->one();
                        },
                    ]);
                $distance = 20;
                $propertytype = $propertydata['room_type'];
                $query1->where(['!=', 'user_id', $user_id])->andWhere(['!=', 'id', $_POST['property_id']])->andWhere(['status'=>'Active']);

                $query1->andWhere(['room_type'=>$propertytype]);
                if($distance!='' && $lat!='' && $long!=''){
                    $query1->andWhere(['<=', $harvesformula1, $distance]);

                }
                $properties =  $query1->asArray()->all();
                if(!empty($properties)){
                    foreach ($properties as $key=>$property){
                        $properties[$key]['favourite'] = Properties::checkfavourite($property['id'],$user_id);

                    }
                }
                $bookingrequestmodel = BookingRequests::find()->select('id,status')->where(['property_id'=>$_POST['property_id']])->one();
                if(!empty($bookingrequestmodel)){
                    if($bookingrequestmodel->status=='Approved' || $bookingrequestmodel->status=='Processing' || $bookingrequestmodel->status=='Processed' || $bookingrequestmodel->status=='Agreement Processing' || $bookingrequestmodel->status=='Payment Requested' || $bookingrequestmodel->status=='Rented'){
                        $bookingexists = 1;
                    }else{
                        $bookingexists = 0;
                    }

                }else{
                    $bookingexists = 0;
                }
                $propertydata['bookingexists'] = $bookingexists;
                $data['propertydata'] = $propertydata;
                $data['similarproperties'] = $properties;
                $propertyviewexist = PropertyViews::find()->where(['property_id'=>$_POST['property_id'],'user_id'=>$user_id])->one();
                if(empty($propertyviewexist)){
                    $propertview = new PropertyViews();
                    $propertview->user_id = $user_id;
                    $propertview->property_id = $_POST['property_id'];
                    $propertview->created_at = date('Y-m-d H:i:s');
                    $propertview->save(false);
                }
                $agentratings = 0;
                if($propertydata['agent_id']!=''){
                    $ratings = AgentRatings::find()->select(['(SUM(appearance)+SUM(attitude)+SUM(knowledge))/3 AS ratings'])->where(['agent_id'=>$propertydata['agent_id']])->asArray()->all();
                    $totalratings = AgentRatings::find()->where(['agent_id'=>$propertydata['agent_id']])->count();

                    if($totalratings>0){
                        $ratings = $ratings[0]['ratings'];
                        $agentratings = $ratings/$totalratings;
                    }
                }


                $data['agentratings'] = number_format((float)$agentratings, 2, '.', '');
                return array('status' => 1, 'data' => $data);


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }
    public function actionAppointment(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
            $model = new TodoList();
            $model->scenario = 'appointment';
            $model->attributes = Yii::$app->request->post();
            $model->user_id = $model->tenant_id;
            if($model->validate()){
                $model->tenant_id = null;
                $property = Properties::findOne($model->property_id);
                $photo = $model->photo;
                $model->photo = null;
                $model->landlord_id = $property->user_id;
                $model->reftype = 'Appointment';
                $model->status = 'Pending';
                $model->created_at = date('Y-m-d H:i:s');
                if($model->save(false)) {
                    return array('status' => 1, 'message' => 'You have submitted appointment successfully.');

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => $model->getErrors());

            }
        }
    }

    public function actionBookingrequestdetails()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && $_POST['request_id']!='') {

                $query1 = BookingRequests::find()->select(['id','property_id','user_id','landlord_id','booking_fees','credit_score','monthly_rental','tenancy_fees','stamp_duty','keycard_deposit','rental_deposit','utilities_deposit','subtotal','total','commencement_date','tenancy_period','security_deposit',new \yii\db\Expression("CONCAT('/uploads/creditscorereports/', '', `credit_score_report`) as credit_score_report"),new \yii\db\Expression("CONCAT('/uploads/agreements/', '', `agreement_document`) as agreement_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document")])->with([
                    'property'=>function ($query) {
                        $query->select('id,property_no,title');
                    },
                    'user'=>function($query){
                        $query->select(["id","full_name"]);
                    },
                    'landlord'=>function($query){
                        $query->select(["id","full_name"]);

                    },
//                    'agent'=>function($query){
//                        $query->select(["id","full_name"]);
//
//                    }
                ])->where(['id'=>$_POST['request_id']]);

                $requestdata =  $query1->asArray()->one();;

                return array('status' => 1, 'data' => $requestdata);


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }

    public function actionBookproperty()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST)) {
                $transaction = Yii::$app->db->beginTransaction();

                try {
                    $model = new BookingRequests();
                    $model->scenario = 'bookfirststep';
                    $model->attributes = Yii::$app->request->post();

                    if ($model->validate()) {
                        $checkbookingrequestexist = BookingRequests::find()->where(['user_id'=>$model->tenant_id,'property_id'=>$model->property_id])->andWhere(['!=','status','Rented'])->one();
                        if(!empty($checkbookingrequestexist)){
                            return array('status' => 0, 'message' => 'You already sent booking request for this property.');

                        }
                        $propertymodel = Properties::findOne($model->property_id);
                        $model->user_id = $model->tenant_id;
                        $model->landlord_id = $this->user_id;
                        if($propertymodel->agent_id!=''){
                            $model->agent_id = $propertymodel->agent_id;

                        }
                        $model->tenant_id = null;
                        $model->status = 'New';
                        $model->created_at = date('Y-m-d H:i:s');
                        if ($model->save(false)) {
                            $lastid = $model->id;
                            $reference_no = "BR" . Yii::$app->common->generatereferencenumber($lastid);
                            $model->reference_no = $reference_no;
                            $model->save(false);
                            $todomodel = new TodoList();
                            $todomodel->user_id = $model->user_id;
                            $todomodel->landlord_id = $this->user_id;
                            $todomodel->request_id = $model->id;
                            $todomodel->property_id = $model->property_id;
                            $todomodel->created_at = date('Y-m-d H:i:s');
                            $todomodel->updated_at = date('Y-m-d H:i:s');
                            $todomodel->reftype = 'Booking';
                            $todomodel->status = 'New';
                            if ($todomodel->save(false)) {
                                $transaction->commit();
                                $subject = 'Booking Request';
                                $textmessage = 'You have a booking request pending for action, confirm now to secure the unit.';
                                Yii::$app->common->Savenotification($model->user_id,$subject,$textmessage,'',$todomodel->property_id,$todomodel->id);

                                Yii::$app->common->Sendpushnotification($model->user_id,$subject,$textmessage,'User');

                                return array('status' => 1, 'message' => 'You have sent booking request successfully.');

                            } else {
                                $transaction->rollBack();

                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }

                        } else {
                            $transaction->rollBack();

                            return array('status' => 0, 'message' => $model->getErrors());

                        }

                    } else {
                        $transaction->rollBack();

                        return array('status' => 0, 'message' => $model->getErrors());

                    }

                }catch (Exception $e) {
                    // # if error occurs then rollback all transactions
                    $transaction->rollBack();
                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }

    public function actionConfirmbookproperty()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && $_POST['request_id']!='') {

                $model = BookingRequests::findOne($_POST['request_id']);
                $todomodel = TodoList::find()->where(['request_id'=>$model->id,'reftype'=>'Booking','status'=>'Pending'])->one();
                if(empty($todomodel)){
                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');exit;

                }
                unset($_POST['request_id']);
                $model->scenario = 'bookconfirm';
                $model->attributes = Yii::$app->request->post();
                if($model->validate()){

                    $full_name = $model->full_name;
                    $identification_no = $model->identification_no;
                    $usermodel = Users::findOne($this->user_id);
                    $kyc_document = $model->kyc_document;
                    $spa_document = $model->spa_document;
                    $model->kyc_document = null;
                    $model->spa_document = null;
                    $filename = uniqid();

                    $data = Yii::$app->common->processBase64($kyc_document);

                    file_put_contents('uploads/user_documents/' . $filename . '.' . $data['type'], $data['data']);
                    $filename1 = uniqid();

                    $data1 = Yii::$app->common->processBase64($spa_document);

                    file_put_contents('uploads/user_documents/' . $filename1 . '.' . $data1['type'], $data1['data']);
                    $documents = new UsersDocuments();
                    $documents->request_id = $model->id;
                    $documents->user_id = $this->user_id;
                    $documents->ekyc_document = $filename . '.' . $data['type'];
                    $documents->supporting_document = $filename1 . '.' . $data1['type'];
                    $documents->created_at = date('Y-m-d H:i:s');
                    $documents->save(false);
                    $model->full_name = null;
                    $model->identification_no = null;
                    $model->status = 'Confirmed';
                    $model->updated_at = date('Y-m-d H:i:s');
                    if($model->save(false)){
                        $todomodel->status = 'Confirmed';
                        $todomodel->updated_at = date('Y-m-d H:i:s');
                        $todomodel->save();
                        $usermodel->full_name = $full_name;
                        $usermodel->document_no = $identification_no;
                        if($usermodel->save(false)){
                            return array('status' => 1, 'message' => 'You have confirmed request successfully.');

                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                        }
                    }else{
                        return array('status' => 0, 'message' => $model->getErrors());

                    }

                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }


    public function actionBookingprocess()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['request_id']) && $_POST['request_id']!='' && isset($_POST['step']) && $_POST['step']!='' && isset($_POST['todo_id']) && !empty($_POST['todo_id'])) {
                $request_id = $_POST['request_id'];
                $step = $_POST['step'];
                $model = BookingRequests::findOne($_POST['request_id']);
                $todomodel = TodoList::find()->where(['request_id'=>$model->id,'reftype'=>'Booking'])->one();
                if(empty($model) || empty($todomodel)){
                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                }
                $user_id = $this->user_id;
                switch ($step){
                    case "first";
                        if ($model->status=='New' && isset($_POST['status']) && !empty($_POST['status']) && isset($_POST['name']) && !empty($_POST['name']) && isset($_POST['document_no']) && !empty($_POST['document_no']) && $model->user_id==$this->user_id) {
                            $transaction1 = Yii::$app->db->beginTransaction();

                            try {

                                $senderbalance = Users::getbalance($model->user_id);
                                if($senderbalance < $model->booking_fees){
                                    return array('status' => 0, 'message' => 'You don"t have enough wallet balance.');

                                }
                                $systemaccount = Yii::$app->common->getsystemaccount();
                                $systemaccountbalance = $systemaccount->wallet_balance;
                                $model->status = $_POST['status'];
                                $model->updated_by = $this->user_id;
                                $model->updated_at = date('Y-m-d H:i:s');
                                if ($model->save(false)) {
                                    $todomodel->status = $_POST['status'];
                                    $todomodel->updated_at = date('Y-m-d H:i:s');
                                    if ($todomodel->save(false)) {
                                        $transaction = new Transactions();
                                        $transaction->user_id = $this->user_id;
                                        $transaction->request_id = $model->id;
                                        $transaction->landlord_id = $model->landlord_id;
                                        $transaction->amount = $model->booking_fees;
                                        $transaction->total_amount = $model->booking_fees;
                                        $transaction->reftype = 'Booking Fees Payment';
                                        $transaction->status = 'Completed';
                                        $transaction->created_at = date('Y-m-d H:i:s');
                                        if($transaction->save(false)){
                                            $lastid = $transaction->id;
                                            $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                            $transaction->reference_no = $reference_no;
                                            if ($transaction->save(false)) {
                                                $updatesenderbalance = Users::updatebalance($senderbalance-$model->booking_fees,$model->user_id);
                                                $updatesystemaccountbalance = Users::updatebalance($systemaccountbalance+$model->booking_fees,$systemaccount->id);
                                                $ipaddress = '';

                                                if (isset($_SERVER['HTTP_CLIENT_IP']))
                                                    $ipaddress = $_SERVER['HTTP_CLIENT_IP'];
                                                else if(isset($_SERVER['HTTP_X_FORWARDED_FOR']))
                                                    $ipaddress = $_SERVER['HTTP_X_FORWARDED_FOR'];
                                                else if(isset($_SERVER['HTTP_X_FORWARDED']))
                                                    $ipaddress = $_SERVER['HTTP_X_FORWARDED'];
                                                else if(isset($_SERVER['HTTP_FORWARDED_FOR']))
                                                    $ipaddress = $_SERVER['HTTP_FORWARDED_FOR'];
                                                else if(isset($_SERVER['HTTP_FORWARDED']))
                                                    $ipaddress = $_SERVER['HTTP_FORWARDED'];
                                                else if(isset($_SERVER['REMOTE_ADDR']))
                                                    $ipaddress = $_SERVER['REMOTE_ADDR'];
                                                else
                                                    $ipaddress = 'UNKNOWN';
                                                $content = file_get_contents('cc-letter/cc-letter.html');
                                                $content = str_replace("@name@",$_POST['name'],$content);
                                                $content = str_replace("@document_no@",$_POST['document_no'],$content);
                                                $content = str_replace("@ipaddress@",$ipaddress,$content);
                                                $content = str_replace("@date@",date('d M Y'),$content);
                                                $pdf = new Pdf([
                                                    // set to use core fonts only
                                                    'mode' => Pdf::MODE_CORE,
                                                    // A4 paper format
                                                    'format' => Pdf::FORMAT_A4,
                                                    // portrait orientation
                                                    'orientation' => Pdf::ORIENT_PORTRAIT,
                                                    // stream to browser inline
                                                    'destination' => Pdf::DEST_BROWSER,
                                                    // your html content input
                                                    'content' => $content,
                                                    // format content from your own css file if needed or use the
                                                    // enhanced bootstrap css built by Krajee for mPDF formatting
                                                    //'cssFile' => '@vendor/kartik-v/yii2-mpdf/src/assets/bootstrap.css',

                                                    // any css to be embedded if required
                                                    'cssFile' => '@vendor/kartik-v/yii2-mpdf/src/assets/kv-mpdf-bootstrap.min.css',

                                                    // any css to be embedded if required
                                                    'cssInline' => '.kv-heading-1{font-size:18px}',
                                                    // call mPDF methods on the fly
                                                    'methods' => [
                                                        'SetHeader' => [''],
                                                        'SetFooter' => [''],
                                                    ]
                                                ]);
                                                $filename = \Yii::$app->security
                                                        ->generateRandomString().time().".pdf";
                                                // return the pdf output as per the destination setting
                                                $pdf->output($content,'uploads/' .$filename,'F');
                                                $model->cc_letter = 'uploads/' .$filename;
                                                $model->save(false);
                                                $transaction1->commit();
                                                return array('status' => 1, 'message' => 'You have ' . $_POST['status'] . ' of request successfully.');

                                            }else{
                                                $transaction1->rollBack();
                                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                            }
                                        }else{
                                            $transaction1->rollBack();
                                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                        }

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }

                            } catch (Exception $e) {
                                // # if error occurs then rollback all transactions
                                $transaction1->rollBack();
                            }
                        }else{
                            return array('status' => 0, 'message' => 'Please enter mandatory Fields.');

                        }
                        break;
                    case "second";
                        if ($model->status=='Pending' && isset($_POST['status']) && !empty($_POST['status']) && $model->landlord_id==$this->user_id) {
                            $transaction1 = Yii::$app->db->beginTransaction();

                            try {
                                $model->status = $_POST['status'];
                                $model->updated_at = date('Y-m-d H:i:s');
                                $model->updated_by = $this->user_id;
                                if ($model->save(false)) {
                                    $todomodel->status = $_POST['status'];
                                    $todomodel->updated_at = date('Y-m-d H:i:s');
                                    if ($todomodel->save(false)) {

                                        if($model->status=='Rejected'){
                                            $senderbalance = Users::getbalance($model->user_id);
                                            $systemaccount = Yii::$app->common->getsystemaccount();
                                            $systemaccountbalance = $systemaccount->wallet_balance;
                                            $transaction = new Transactions();
                                            $transaction->user_id = $this->user_id;
                                            $transaction->request_id = $model->id;
                                            $transaction->amount = $model->booking_fees;
                                            $transaction->total_amount = $model->booking_fees;
                                            $transaction->reftype = 'Booking Fees Refund';
                                            $transaction->status = 'Completed';
                                            $transaction->created_at = date('Y-m-d H:i:s');
                                            if($transaction->save(false)) {
                                                $lastid = $transaction->id;
                                                $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                                $transaction->reference_no = $reference_no;
                                                if ($transaction->save(false)) {
                                                    $updatesenderbalance = Users::updatebalance($senderbalance+$model->booking_fees,$model->user_id);
                                                    $updatesystemaccountbalance = Users::updatebalance($systemaccountbalance-$model->booking_fees,$systemaccount->id);

                                                    $subject = 'Booking Request Rejected';
                                                    $textmessage = 'You have a booking has been rejected.';
                                                    Yii::$app->common->Savenotification($model->user_id, $subject, $textmessage, '', $model->property_id, $todomodel->id);

                                                    Yii::$app->common->Sendpushnotification($model->user_id, $subject, $textmessage, 'User');
                                                    $transaction1->commit();
                                                }else{
                                                    $transaction1->rollBack();
                                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                                }
                                            }else{
                                                $transaction1->rollBack();
                                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                                            }


                                        }else{
                                            $subject = 'Agreement preparation';
                                            $textmessage = 'You have one agreement pending for your action, kindly insert tenancy details to proceed for tenancy signing.';
                                            Yii::$app->common->Savenotification($model->user_id,$subject,$textmessage,'',$model->property_id,$todomodel->id);

                                            Yii::$app->common->Sendpushnotification($model->user_id,$subject,$textmessage,'User');
                                            $transaction1->commit();

                                        }
                                        return array('status' => 1, 'message' => 'You have ' . $_POST['status'] . ' of request successfully.');

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }

                            } catch (Exception $e) {
                                // # if error occurs then rollback all transactions
                                $transaction1->rollBack();
                            }
                        }else{
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                        }
                        break;
                    case "third";
                        if ($model->status=='Approved'  && $model->user_id==$this->user_id) {
                            $transaction1 = Yii::$app->db->beginTransaction();

                            try {
                                $model->scenario = 'bookingprocesssecondstep';
                                $model->attributes = Yii::$app->request->post();
                                //$model->spa_document = UploadedFile::getInstanceByName('spa_document');
                                if ($model->validate()) {
//                                    $checkidexist = Users::find()->where(['document_no'=>trim($model->identification_no)])->andWhere(['!=','id',$model->user_id])->one();
//                                    if(!empty($checkidexist)){
//                                        $transaction1->rollBack();
//
//                                        return array('status' => 0, 'message' => 'IC number you entered already exist in system.');
//
//                                    }
                                    $kyc_document = $model->kyc_document;
                                    $spa_document = $model->spa_document;
                                    $model->kyc_document = null;

                                    $filename = uniqid();

                                    $data = Yii::$app->common->processBase64($kyc_document);

                                    file_put_contents('uploads/user_documents/' . $filename . '.' . $data['type'], $data['data']);
                                    $data1 = Yii::$app->common->processBase64pdf($spa_document);
                                    $filename1 = rand().uniqid();
                                    file_put_contents('uploads/user_documents/' . $filename1 . '.' . $data1['type'], $data1['data']);
//                                    $data1 = Yii::$app->common->processBase64($spa_document);
//
//                                    file_put_contents('uploads/user_documents/' . $filename1 . '.' . $data1['type'], $data1['data']);
//
                                    $model->spa_document=null;
                                    $documents = new UsersDocuments();
                                    $documents->request_id = $_POST['request_id'];
                                    $documents->user_id = $this->user_id;
                                    $documents->ekyc_document = $filename . '.' . $data['type'];
                                    $documents->supporting_document = $filename1. '.' . $data1['type'];
                                    $documents->created_at = date('Y-m-d H:i:s');
                                    $full_name = $model->full_name;
                                    $identification_no = $model->identification_no;
                                    $usermodel = Users::findOne($this->user_id);
                                    $model->full_name = null;
                                    $model->identification_no = null;
                                    $model->status = 'Processing';
                                    $model->updated_at = date('Y-m-d H:i:s');
                                    $model->updated_by = $this->user_id;
                                    if ($model->save(false)) {

                                        $documents->save(false);

                                        $usermodel->full_name = $full_name;
                                        $usermodel->document_no = $identification_no;
                                        $usermodel->save(false);
                                        $todomodel->status = 'Processing';
                                        $todomodel->updated_at = date('Y-m-d H:i:s');
                                        if($todomodel->save(false)){

                                            $transaction1->commit();
                                            return array('status' => 1, 'message' => 'You have uploaded details successfully.');


                                        }else{
                                            $transaction1->rollBack();

                                            return array('status' => 0, 'message' => $todomodel->getErrors());

                                        }
                                    } else {
                                        $transaction1->rollBack();

                                        return array('status' => 0, 'message' => $model->getErrors());

                                    }

                                } else {
                                    $transaction1->rollBack();

                                    return array('status' => 0, 'message' => $model->getErrors());

                                }
                            }catch (Exception $e) {
                                // # if error occurs then rollback all transactions
                                $transaction1->rollBack();
                                return array('status' => 0, 'message' => $e);

                            }
                        }else{

                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes here.');

                        }


                        break;
                    case "fourth";
                    if ($model->status=='Processing' && $model->landlord_id==$this->user_id){
                        $transaction1 = Yii::$app->db->beginTransaction();

                        try {
                            $model->scenario = 'bookingprocessfirststepapprove';
                            $useridtenant = $model->user_id;
                            $model->attributes = Yii::$app->request->post();
                            //$model->spa_document = UploadedFile::getInstanceByName('spa_document');
                            if ($model->validate()) {
//                                $checkidexist = Users::find()->where(['document_no'=>trim($model->identification_no)])->andWhere(['!=','id',$model->landlord_id])->one();
//                                if(!empty($checkidexist)){
//                                    return array('status' => 0, 'message' => 'IC number you entered already exist in system.');
//
//                                }
                                    $model->user_id = $useridtenant;
                                    $model->tenancy_fees = 99;
                                    $sstappliedamount = $model->tenancy_fees;
                                    $subtotal = $model->monthly_rental + $model->security_deposit+$model->keycard_deposit+$model->utilities_deposit;
                                    $sst =Yii::$app->common->calculatesst($sstappliedamount);
                                    $tenancyfeeswithsst = $sstappliedamount+$sst;
                                    $bookingfees = $model->booking_fees;
                                    $stamp_duty = $model->stamp_duty;
                                    $model->subtotal = $subtotal+$model->tenancy_fees+$stamp_duty-$bookingfees;
                                    $model->sst = $sst;
                                    $model->total = $subtotal+$tenancyfeeswithsst+$stamp_duty-$bookingfees;
                                    $model->commencement_date = date('Y-m-d',strtotime($model->commencement_date));
                                    $full_name = $model->full_name;
                                    $identification_no = $model->identification_no;
                                    $usermodel = Users::findOne($this->user_id);
                                    $model->full_name = null;
                                    $model->identification_no = null;
                                    $usermodel->full_name = $full_name;
                                    $usermodel->document_no = $identification_no;
                                    $usermodel->save();
                                    $kyc_document = $model->kyc_document;
                                    $spa_document = $model->spa_document;
                                    $model->kyc_document = null;
                                     $model->spa_document=null;
                                    //$model->spa_document = null;
                                    $filename = uniqid();

                                    $data = Yii::$app->common->processBase64($kyc_document);

                                    file_put_contents('uploads/user_documents/' . $filename . '.' . $data['type'], $data['data']);
                                $data1 = Yii::$app->common->processBase64pdf($spa_document);
                                  $filename1 = rand().uniqid();
                                   file_put_contents('uploads/user_documents/' . $filename1 . '.' . $data1['type'], $data1['data']);

//                                    $data1 = Yii::$app->common->processBase64($spa_document);
//
//                                    file_put_contents('uploads/user_documents/' . $filename1 . '.' . $data1['type'], $data1['data']);
//
                                //$filename1 = uniqid().'.'.$model->spa_document->extension;;
                                //$model->spa_document->saveAs('uploads/user_documents/' . $filename1);
                                   $model->spa_document = null;
                                    $documents = new UsersDocuments();
                                    $documents->request_id = $_POST['request_id'];
                                    $documents->user_id = $this->user_id;
                                    $documents->ekyc_document = $filename . '.' . $data['type'];
                                    $documents->supporting_document = $filename1. '.' . $data1['type'];
                                    $documents->created_at = date('Y-m-d H:i:s');
                                    $documents->save(false);
                                $model->status = 'Processed';
                                $model->updated_at = date('Y-m-d H:i:s');
                                $model->updated_by = $this->user_id;
                                if ($model->save(false)) {
                                    $todomodel->status = 'Processed';
                                    $todomodel->updated_at = date('Y-m-d H:i:s');
                                    if ($todomodel->save(false)) {
                                        $transaction1->commit();
                                        return array('status' => 1, 'message' => 'You have uploaded documents successfully.');

                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                } else {
                                    $transaction1->rollBack();
                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }
                            } else {
                                return array('status' => 0, 'message' => $model->getErrors());

                            }
                        }catch (Exception $e) {
                            // # if error occurs then rollback all transactions
                            $transaction1->rollBack();
                        }
                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }
                     break;
                    case "fifth";
                        if ($model->status=='Agreement Processing'  && isset($_POST['status']) && !empty($_POST['status']) && $model->landlord_id==$this->user_id){
                            $transaction1 = Yii::$app->db->beginTransaction();

                            try {
                                $status = $_POST['status'];
                                if($status=='Accepted'){
                                    $model->status = 'Payment Requested';
                                    $model->updated_at = date('Y-m-d H:i:s');
                                    $model->updated_by = $this->user_id;
                                    if ($model->save(false)) {
                                        $todomodel->status = 'Unpaid';
                                        $todomodel->updated_at = date('Y-m-d H:i:s');
                                        if ($todomodel->save(false)) {
                                            $transaction1->commit();

                                            return array('status' => 1, 'message' => 'You have ' . $_POST['status'] . ' of request successfully.');

                                        } else {
                                            $transaction1->rollBack();
                                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                        }
                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                }else if($status=='Rejected'){
                                    $model->status = 'Cancelled';
                                    $model->updated_at = date('Y-m-d H:i:s');
                                    $model->updated_by = $this->user_id;
                                    if ($model->save(false)) {
                                        $todomodel->remarks = 'Cancelled due to Landlord Rejected MSC';
                                        $todomodel->status = 'Rejected';
                                        $todomodel->updated_at = date('Y-m-d H:i:s');
                                        if ($todomodel->save(false)) {
                                            $senderbalance = Users::getbalance($model->user_id);
                                            $systemaccount = Yii::$app->common->getsystemaccount();
                                            $systemaccountbalance = $systemaccount->wallet_balance;
                                            $transaction = new Transactions();
                                            $transaction->user_id = $this->user_id;
                                            $transaction->request_id = $model->id;
                                            $transaction->amount = $model->booking_fees;
                                            $transaction->total_amount = $model->booking_fees;
                                            $transaction->reftype = 'Booking Fees Refund';
                                            $transaction->status = 'Completed';
                                            $transaction->created_at = date('Y-m-d H:i:s');
                                            if($transaction->save(false)) {
                                                $lastid = $transaction->id;
                                                $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                                $transaction->reference_no = $reference_no;
                                                if ($transaction->save(false)) {
                                                    $updatesenderbalance = Users::updatebalance($senderbalance + $model->booking_fees, $model->user_id);
                                                    $updatesystemaccountbalance = Users::updatebalance($systemaccountbalance - $model->booking_fees, $systemaccount->id);
                                                }
                                            }
                                                    $transaction1->commit();

                                            return array('status' => 1, 'message' => 'You have ' . $_POST['status'] . ' of request successfully.');

                                        } else {
                                            $transaction1->rollBack();
                                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                        }
                                    } else {
                                        $transaction1->rollBack();
                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }
                                }


                            } catch (Exception $e) {
                                // # if error occurs then rollback all transactions
                                $transaction1->rollBack();
                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');
                            }

                        }
                        break;
                    case "sixth";
                    if ($model->status=='Payment Requested' && $model->user_id==$this->user_id && isset($_POST['amount']) && $_POST['amount']!=''){
                        $promocode = (isset($_POST['promo_code']) && $_POST['promo_code']!='')?$_POST['promo_code']:'';
                        $amount = (isset($_POST['amount']) && $_POST['amount']!='')?$_POST['amount']:'';
                        $discount = (isset($_POST['discount']) && $_POST['discount']!='')?$_POST['discount']:0;
                        $goldcoins = (isset($_POST['gold_coins']) && $_POST['gold_coins']!='')?$_POST['gold_coins']:0;
                        $coins_savings = (isset($_POST['coins_savings']) && $_POST['coins_savings']!='')?$_POST['coins_savings']:0;
                        if($promocode!=''){
                            $promocodedetails = PromoCodes::find()->where(['promo_code'=>$promocode])->one();
                        }
                        $sst = $model->sst;
                        $totalamount = $amount;
                        $tenancyfees = $model->tenancy_fees;
                        $totaldiscount = (float)$discount+(float)$coins_savings;
                        $totaltenancyfees = $model->tenancy_fees-$totaldiscount;
                        $sst =Yii::$app->common->calculatesst($totaltenancyfees);
                        $tenancyfeeswithsst = $totaltenancyfees+$sst;
                        $bookingfees = $model->booking_fees;
                        $stamp_duty = $model->stamp_duty;
                        $subtotal = $model->monthly_rental + $model->security_deposit+$model->keycard_deposit+$model->utilities_deposit+$tenancyfees+$stamp_duty-$bookingfees;

                        $totalcoinsamountapplied = $tenancyfees - ((float)$discount + (float)$coins_savings);
                        $totalamountafterdiscount = $model->monthly_rental + $model->security_deposit+$model->keycard_deposit+$model->utilities_deposit+(float)$totalcoinsamountapplied+$sst+$stamp_duty-$bookingfees;
                        //$totalamountafterdiscount = $model->monthly_rental + $model->security_deposit+$model->keycard_deposit+$model->utilities_deposit+(float)$totalcoinsamountapplied+$sst+$stamp_duty;
                        $receiverbalance = Users::getbalance($model->landlord_id);
                        $senderbalance = Users::getbalance($model->user_id);
                        if($senderbalance < $totalamountafterdiscount){
                            return array('status' => 0, 'message' => 'You don"t have enough wallet balance');

                        }
                        $systemaccount = Yii::$app->common->getsystemaccount();
                        $systemaccountbalance = $systemaccount->wallet_balance;

                        $transaction1 = Yii::$app->db->beginTransaction();

                        try {
                            $transaction = new Transactions();
                            $transaction->user_id = $this->user_id;
                            $transaction->request_id = $model->id;
                            $transaction->landlord_id = $model->landlord_id;
                            $transaction->promo_code = ($promocode!='')?$promocodedetails->id:NULL;
                            $transaction->amount = $subtotal;
                            $transaction->sst = $sst;
                            $transaction->discount = $discount;
                            $transaction->coins = $goldcoins;
                            $transaction->coins_savings = $coins_savings;
                            $transaction->total_amount = $totalamountafterdiscount;
                            $transaction->reftype = 'Booking Payment';
                            $transaction->status = 'Completed';
                            $transaction->created_at = date('Y-m-d H:i:s');
                            if ($transaction->save(false)) {
                                $lastid = $transaction->id;
                                $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                $transaction->reference_no = $reference_no;
                                if ($transaction->save(false)) {
//                                    if($model->booking_fees>0){
//                                        $transactionitems = new TransactionsItems();
//                                        $transactionitems->sender_id = $model->user_id;
//                                        $transactionitems->receiver_id = $model->landlord_id;
//                                        $transactionitems->amount = $model->booking_fees;
//                                        $transactionitems->total_amount = $model->booking_fees;
//                                        $transactionitems->oldsenderbalance = $senderbalance;
//                                        $transactionitems->newsenderbalance = $senderbalance-$model->booking_fees;
//                                        $transactionitems->oldreceiverbalance = $receiverbalance;
//                                        $transactionitems->newreceiverbalance = $receiverbalance+$model->booking_fees;
//                                        $transactionitems->description = 'Booking Fees';
//                                        $transactionitems->created_at = date('Y-m-d H:i:s');
//                                        $transactionitems->save(false);
//                                    }
                                    if($model->security_deposit>0){
                                        $transactionitems = new TransactionsItems();
                                        $transactionitems->transaction_id = $transaction->id;
                                        $transactionitems->sender_id = $model->user_id;
                                        $transactionitems->receiver_id = $model->landlord_id;
                                        $transactionitems->amount = $model->security_deposit;
                                        $transactionitems->total_amount = $model->security_deposit;
                                        $transactionitems->oldsenderbalance = $senderbalance;
                                        $transactionitems->newsenderbalance = $senderbalance-$model->security_deposit;
                                        $transactionitems->oldreceiverbalance = $receiverbalance;
                                        $transactionitems->newreceiverbalance = $receiverbalance+$model->security_deposit;
                                        $transactionitems->description = 'Deposit';
                                        $transactionitems->created_at = date('Y-m-d H:i:s');
                                        $transactionitems->save(false);
                                    }
                                    if($model->monthly_rental>0){
                                        $transactionitems1 = new TransactionsItems();
                                        $transactionitems1->transaction_id = $transaction->id;
                                        $transactionitems1->sender_id = $model->user_id;
                                        $transactionitems1->receiver_id = $model->landlord_id;
                                        $transactionitems1->amount = $model->monthly_rental;
                                        $transactionitems1->total_amount = $model->monthly_rental;
                                        $transactionitems1->oldsenderbalance = $senderbalance;
                                        $transactionitems1->newsenderbalance = $senderbalance-$model->monthly_rental;
                                        $transactionitems1->oldreceiverbalance = $receiverbalance;
                                        $transactionitems1->newreceiverbalance = $receiverbalance+$model->monthly_rental;
                                        $transactionitems1->description = 'Monthly Rental Deposit';
                                        $transactionitems1->created_at = date('Y-m-d H:i:s');
                                        $transactionitems1->save(false);
                                    }
                                    if($model->keycard_deposit>0){
                                        $transactionitems2 = new TransactionsItems();
                                        $transactionitems2->transaction_id = $transaction->id;
                                        $transactionitems2->sender_id = $model->user_id;
                                        $transactionitems2->receiver_id = $model->landlord_id;
                                        $transactionitems2->amount = $model->keycard_deposit;
                                        $transactionitems2->total_amount = $model->keycard_deposit;
                                        $transactionitems2->oldsenderbalance = $senderbalance;
                                        $transactionitems2->newsenderbalance = $senderbalance-$model->keycard_deposit;
                                        $transactionitems2->oldreceiverbalance = $receiverbalance;
                                        $transactionitems2->newreceiverbalance = $receiverbalance+$model->keycard_deposit;
                                        $transactionitems2->description = 'Keycard Deposit';
                                        $transactionitems2->created_at = date('Y-m-d H:i:s');
                                        $transactionitems2->save(false);
                                    }
                                    if($model->utilities_deposit>0){
                                        $transactionitems3 = new TransactionsItems();
                                        $transactionitems3->transaction_id = $transaction->id;
                                        $transactionitems3->sender_id = $model->user_id;
                                        $transactionitems3->receiver_id = $model->landlord_id;
                                        $transactionitems3->amount = $model->utilities_deposit;
                                        $transactionitems3->total_amount = $model->utilities_deposit;
                                        $transactionitems3->oldsenderbalance = $senderbalance;
                                        $transactionitems3->newsenderbalance = $senderbalance-$model->utilities_deposit;
                                        $transactionitems3->oldreceiverbalance = $receiverbalance;
                                        $transactionitems3->newreceiverbalance = $receiverbalance+$model->utilities_deposit;
                                        $transactionitems3->description = 'Utilities Deposit';
                                        $transactionitems3->created_at = date('Y-m-d H:i:s');
                                        $transactionitems3->save(false);
                                    }
                                    if($model->stamp_duty>0){
                                        $transactionitems4 = new TransactionsItems();
                                        $transactionitems4->transaction_id = $transaction->id;
                                        $transactionitems4->sender_id = $model->user_id;
                                        $transactionitems4->receiver_id = $systemaccount->id;
                                        $transactionitems4->amount = $model->stamp_duty;
                                        $transactionitems4->total_amount = $model->stamp_duty;
                                        $transactionitems4->oldsenderbalance = $senderbalance;
                                        $transactionitems4->newsenderbalance = $senderbalance-$model->stamp_duty;
                                        $transactionitems4->oldreceiverbalance = $systemaccountbalance;
                                        $transactionitems4->newreceiverbalance = $systemaccountbalance+$model->stamp_duty;
                                        $transactionitems4->description = 'Stamp Duty';
                                        $transactionitems4->created_at = date('Y-m-d H:i:s');
                                        $transactionitems4->save(false);
                                    }
                                    if($model->tenancy_fees>0){
                                        $transactionitems5 = new TransactionsItems();
                                        $transactionitems5->transaction_id = $transaction->id;
                                        $transactionitems5->sender_id = $model->user_id;
                                        $transactionitems5->receiver_id = $systemaccount->id;
                                        $transactionitems5->amount = $model->tenancy_fees;
                                        $transactionitems5->total_amount = $model->tenancy_fees;
                                        $transactionitems5->oldsenderbalance = $senderbalance;
                                        $transactionitems5->newsenderbalance = $senderbalance-$model->tenancy_fees;
                                        $transactionitems5->oldreceiverbalance = $systemaccountbalance;
                                        $transactionitems5->newreceiverbalance = $systemaccountbalance+$model->tenancy_fees;
                                        $transactionitems5->description = 'Tenancy Fees';
                                        $transactionitems5->created_at = date('Y-m-d H:i:s');
                                        $transactionitems5->save(false);
                                    }
                                    $model->updated_by = $this->user_id;
                                    $model->status = 'Rented';
                                    $model->rented_at = date('Y-m-d H:i:s');
                                    if ($model->save(false)) {
                                        $todomodel->status = 'Paid';
                                        $todomodel->save(false);
                                        $months = $model->tenancy_period;
                                        $effectiveDate = date('Y-m-d', strtotime("+".$months." months", strtotime($model->commencement_date)));
                                        $model->property->availability = date('Y-m-d', strtotime("+".$months." months", strtotime($effectiveDate)));
                                        $model->property->status = 'Rented';
                                        $model->property->request_id = $model->id;
                                        if($model->property->save(false)){
                                            if($model->property->agent_id!=''){
                                                $todorequest = TodoList::find()->where(['landlord_id'=>$model->landlord_id,'agent_id'=>$model->property->agent_id,'reftype'=>'Transfer Request','status'=>'Accepted','property_id'=>$model->property_id,'user_id'=>$model->user_id])->orderBy(['id'=>SORT_DESC])->one();
                                                if(!empty($todorequest)){
                                                    $todorequest->status = 'Completed';
                                                    $todorequest->save(false);
                                                    if($todorequest->receive_via=='Rumah-i') {
                                                        $commision = $todorequest->commission;
                                                        $servicefees = number_format($commision * 1.5 / 100, 2, '.', '');
                                                        $sst = \Yii::$app->common->calculatesst($servicefees);
                                                        $commissionamount = $commision - $servicefees - $sst;
                                                        $agentbalance = Users::getbalance($model->property->agent_id);
                                                        $commisiontransaction = new Transactions();
                                                        $commisiontransaction->reftype = 'Agent Commision';
                                                        $commisiontransaction->user_id = $model->property->agent_id;
                                                        $commisiontransaction->property_id = $model->property_id;
                                                        $commisiontransaction->todo_id = $todorequest->id;
                                                        $commisiontransaction->amount = $commision;
                                                        $commisiontransaction->subtotal = $commision;
                                                        $commisiontransaction->sst = $sst;
                                                        $commisiontransaction->service_fees = $servicefees;
                                                        $commisiontransaction->total_amount = $commissionamount;
                                                        $commisiontransaction->type = 'Payment';
                                                        $commisiontransaction->status = 'Completed';
                                                        $commisiontransaction->created_at = date('Y-m-d H:i:s');
                                                        if($commisiontransaction->save(false)){
                                                            $lastid1 = $commisiontransaction->id;
                                                            $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid1);
                                                            $commisiontransaction->reference_no = $reference_no;
                                                            $commisiontransaction->save(false);
                                                            Users::updatebalance($agentbalance+$commissionamount,$model->property->agent_id);
                                                        }else{
                                                            $transaction1->rollBack();
                                                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                                        }

                                                    }
                                                }
                                            }

                                            if($goldcoins>0) {
                                                Yii::$app->common->deductgoldcoinspurchase($model->user_id, $goldcoins, $lastid);
                                            }
                                            $gold_coins = $totalcoinsamountapplied*1.5;
                                            Yii::$app->common->addgoldcoinspurchase($model->user_id,$gold_coins,$lastid);
                                            $usermodel = Users::findOne($model->user_id);
                                            if($usermodel->referred_by!='') {
                                                $checkgoldcoinsalreadyreceived = GoldTransactions::find()->where(['user_id'=>$model->user_id,'refferer_id'=>$usermodel->referred_by,'reftype'=>'Tenancy Signed'])->one();
                                                if(empty($checkgoldcoinsalreadyreceived)) {

                                                    $gold_coinsreffer = 4688;
                                                    Yii::$app->common->addgoldcoinspurchase($model->user_id, $gold_coinsreffer, $lastid, 'Tenancy Signed', $usermodel->referred_by);
                                                }
                                            }
                                            $updatesenderbalance = Users::updatebalance($senderbalance-$totalamountafterdiscount,$model->user_id);
                                            $updatereceiverbalance = Users::updatebalance($receiverbalance+$model->monthly_rental + $model->security_deposit+$model->utilities_deposit+$model->keycard_deposit+$model->booking_fees,$model->landlord_id);
                                            $updatesystemaccountbalance = Users::updatebalance($systemaccountbalance-$model->booking_fees+$model->tenancy_fees+$model->stamp_duty+$sst,$systemaccount->id);
                                            $agreementdocument = $model->agreement_document;
                                            if ($agreementdocument != '') {

                                                $tenantmscmodel = Msc::find()->where(['request_id' => $model->id, 'user_id' => $model->user_id, 'status' => 'Approved'])->orderBy(['id' => SORT_DESC])->one();
                                                $landlordmscmodel = Msc::find()->where(['request_id' => $model->id, 'user_id' => $model->landlord_id, 'status' => 'Approved'])->orderBy(['id' => SORT_DESC])->one();
                                                if (!empty($tenantmscmodel) && !empty($landlordmscmodel)) {

                                                    $b64Doc = chunk_split(base64_encode(file_get_contents($agreementdocument)));


                                                    $landlordmscmodel->pdf = $b64Doc;
                                                    $landlordmscmodel->updated_at = date('Y-m-d H:i:s');
                                                    if ($landlordmscmodel->save(false)) {

                                                        $tenantmscmodel->save(false);
                                                        $signpdfresponse = $this->actionSignpdf($landlordmscmodel, $model);
                                                        //echo "<pre>";print_r($signpdfresponse);exit;

                                                        if (!empty($signpdfresponse) && isset($signpdfresponse['return']) && !empty($signpdfresponse['return']) && $signpdfresponse['return']['statusCode'] == '000') {
                                                            $landlordmscmodel->signpdf_response = json_encode($signpdfresponse);
                                                            $landlordmscmodel->signedpdf = $signpdfresponse['return']['signedPdfInBase64'];
                                                            $landlordmscmodel->status = 'Completed';
                                                            $landlordmscmodel->updated_at = date('Y-m-d H:i:s');
                                                            $landlordmscmodel->save(false);

                                                            if (isset($signpdfresponse['return']['signedPdfInBase64']) && $signpdfresponse['return']['signedPdfInBase64'] != '') {
                                                                $tenantmscmodel->pdf = $signpdfresponse['return']['signedPdfInBase64'];
                                                                $tenantmscmodel->updated_at = date('Y-m-d H:i:s');
                                                                $tenantmscmodel->save(false);
                                                                $signpdftenantresponse = $this->actionSignpdf($tenantmscmodel, $model);
                                                                if (!empty($signpdftenantresponse) && isset($signpdftenantresponse['return']) && !empty($signpdftenantresponse['return']) && $signpdftenantresponse['return']['statusCode'] == '000') {
                                                                    $tenantmscmodel->signpdf_response = json_encode($signpdftenantresponse);
                                                                    $tenantmscmodel->signedpdf = $signpdftenantresponse['return']['signedPdfInBase64'];
                                                                    $tenantmscmodel->status = 'Completed';
                                                                    $tenantmscmodel->updated_at = date('Y-m-d H:i:s');
                                                                    if ($tenantmscmodel->save(false)) {

                                                                        $model->signed_agreement = $signpdftenantresponse['return']['signedPdfInBase64'];
                                                                        $model->updated_at = date('Y-m-d H:i:s');
                                                                        $decoded = base64_decode($model->signed_agreement);
                                                                        $filename = "signedagreement_" . time() . $model->reference_no . '.pdf';
                                                                        file_put_contents('uploads/agreements/' . $filename, $decoded);
                                                                        $model->signed_agreement_document = 'uploads/agreements/' . $filename;
                                                                        //$model->status = 'Agreement Processed';
                                                                        $model->save(false);


                                                                    }

                                                                } else {
                                                                    $tenantmscmodel->signpdf_response = json_encode($signpdftenantresponse);
                                                                    $tenantmscmodel->save(false);

//
                                                                }

                                                            } else {
                                                                $landlordmscmodel->signpdf_response = json_encode($signpdfresponse);
                                                                $landlordmscmodel->save(false);


                                                            }

                                                        } else {
                                                            $landlordmscmodel->signpdf_response = json_encode($signpdfresponse);
                                                            $landlordmscmodel->save(false);


                                                        }

                                                    } else {

                                                    }

                                                    //return $this->redirect(['index']);

                                                } else {
                                                    //Yii::$app->session->setFlash('error', "Verification process is still in Pending.Please try after verification done from MSC");
                                                }


                                            }
                                            $transaction1->commit();
                                            return array('status' => 1, 'message' => 'You have rented property successfully.Agreement will display in your MyDocs Shortly.');


                                        }else{
                                            $transaction1->rollBack();
                                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                        }


                                    }else{
                                        $transaction1->rollBack();

                                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                    }

                                }else{
                                    $transaction1->rollBack();

                                    return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                }


                            } else {
                                $transaction1->rollBack();

                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                            }
                        }catch (Exception $e) {
                            // # if error occurs then rollback all transactions
                            $transaction1->rollBack();
                        }
                        //$transaction
                    }else{
                        return array('status' => 0, 'message' => 'Please enter mandatory fields.');

                    }
                    break;

                }


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }
    private function actionSignpdf($mscmodel,$model){
        //echo "<pre>";  print_r($mscmodel);exit;

        $curl = curl_init();

        $sadfc=  curl_setopt_array($curl, array(
            CURLOPT_URL => "ec2-13-250-42-162.ap-southeast-1.compute.amazonaws.com/MTSAPilot/MyTrustSignerAgentWS?wsdl",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS =>"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mtsa=\"http://mtsa.msctg.com/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <mtsa:SignPDF>\n         <UserID>".$mscmodel->document_no."</UserID>\n         <FullName>".$mscmodel->full_name."</FullName>\n         <!--Optional:-->\n         <AuthFactor></AuthFactor>\n\t\t<SignatureInfo>\n            <!--Optional:-->\n            <pageNo>".$mscmodel->page_no."</pageNo>\n            <!--Optional:-->\n            <pdfInBase64>".$mscmodel->pdf."</pdfInBase64>\n            <sigImageInBase64></sigImageInBase64>\n            <!--Optional:-->\n            <visibility>true</visibility>\n            <!--Optional:-->\n            <x1>".$mscmodel->x1."</x1>\n            <!--Optional:-->\n            <x2>".$mscmodel->x2."</x2>\n            <!--Optional:-->\n            <y1>".$mscmodel->y1."</y1>\n            <!--Optional:-->\n            <y2>".$mscmodel->y2."</y2>\n         </SignatureInfo>\n      </mtsa:SignPDF>\n   </soapenv:Body>\n</soapenv:Envelope>",
            CURLOPT_HTTPHEADER => array(
                "Username: rumahi",
                "Password: YcuLxvMMcXWPLRaW",
                "Content-Type: text/xml"
            ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);
        if ($err) {
            return false;
        } else {
            $response = preg_replace("/(<\/?)(\w+):([^>]*>)/", "$1$2$3", $response);
            $xml = new \SimpleXMLElement($response);
            $body = $xml->xpath('//SBody')[0];
            $responsearray = json_decode(json_encode((array)$body), TRUE);

            if(!empty($responsearray) &&  isset($responsearray['ns2SignPDFResponse'])  && !empty($responsearray['ns2SignPDFResponse'])){
                return $responsearray['ns2SignPDFResponse'];
            }else{
                return false;
            }
            //echo $response;exit;
        }
    }
    public function actionTodolist()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
           // echo $user_id;exit;
            $todolists = TodoList::find()->select(['id','title','description','reftype','status','request_id','renovation_quote_id','service_request_id','property_id','user_id','landlord_id','agent_id','vendor_id','worker_id','msc_id','created_at','updated_at','rent_startdate','rent_enddate','pay_from','service_type','due_date','appointment_date','appointment_time','stamp_duty','subtotal','sst','total', new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document"),"commission"])
                ->with([
                    'request'=>function ($query) {
                        $query->select(['id','reference_no','booking_fees','credit_score','monthly_rental','tenancy_fees','stamp_duty','keycard_deposit','rental_deposit','utilities_deposit','subtotal','sst','total','commencement_date','tenancy_period','security_deposit','status',new \yii\db\Expression("CONCAT('/uploads/creditscorereports/', '', `credit_score_report`) as credit_score_report"),new \yii\db\Expression("CONCAT('/', '', `agreement_document`) as agreement_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"),new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document")]);
                    },
                    'servicerequest'=>function ($query) {
                        $query->select(['id','property_id','vendor_id','user_id','todo_id','date','time','description','document','reftype','status','amount','subtotal','sst','total_amount','pickup_time','checkin_time','checkout_time','remarks']);
                    },
                    'servicerequest.servicerequestImages'=>function ($query) {
                        $query->select(['id','service_request_id','description','image','reftype','created_at']);
                    },
                    'property'=>function($query){
                        $query->select('id,property_no,title,location');
                    },
                    'user' => function ($query) {
                        $query->select(["id","full_name",new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture"),"identity_status","document_type","document_front","document_back","ekyc_document","ekyc_document_back","document_no"]);
                    },
                    'landlord' => function ($query) {
                        $query->select(["id","full_name",new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture"),"identity_status","document_type","document_front","document_back","ekyc_document","ekyc_document_back","document_no"]);

                    },
                    'agent'=>function($query){
                        $query->select(["id","full_name","company_name",new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")]);

                    },
                    'renovationquote'=>function($query){
                      $query->select(['id',new \yii\db\Expression("CONCAT('/uploads/renovationquotes/', '', `quote_document`) as quote_document")]);

                  },
                    'documents'=>function($query){
                        $query->select(['id','todo_id','description',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")]);

                    },
                    'todoItems'=>function($query){
                        $query->select(['id','todo_id','description','platform_deductible','price','reftype']);

                    },
                    'worker'=>function($query){
                        $query->select("id,full_name");

                    },
                    'msc'=>function($query){
                        $query->select("*");

                    },

                ])->where(['user_id'=>$user_id])->orWhere(['landlord_id'=>$user_id])->orderBy(['updated_at'=>SORT_DESC])->asArray()->all();

            $data = array();
            if(!empty($todolists)){
                foreach ($todolists as $key=>$todolist){

                    switch ($todolist['reftype']){
                        case "Booking";
                            if($todolist['user_id']==$user_id){
                                if(($todolist['status']=='Pending' && $todolist['request']['credit_score']=='') || $todolist['status']=='New' || $todolist['status']=='Approved' || $todolist['status']=='Unpaid'){
                                    if($todolist['status']=='Approved'){
                                        if($todolist['user']['identity_status']=='Verified'){
                                            $data[] = $todolist;
                                        }else{
                                            $manualkycexist = ManualKyc::find()->where(['user_id'=>$user_id,'request_id'=>$todolist['request']['id'],'status'=>'Pending'])->one();
                                            if(empty($manualkycexist)){
                                                $data[] = $todolist;
                                            }
                                        }

                                    }else{
                                        $data[] = $todolist;
                                    }

                                }else if($todolist['request']['status']=='Rented' && $todolist['request']['movein_document']!=''){
                                    $reviewexist = PropertyRatings::find()->where(['request_id'=>$todolist['request_id'],'user_id'=>$user_id,'property_id'=>$todolist['property_id']])->one();
                                    if(empty($reviewexist)){
                                        $data[] = $todolist;
                                    }
                                }

                            }else if($todolist['landlord_id']==$user_id){
                                if(($todolist['status']=='Pending' && $todolist['request']['credit_score']!='') ||  $todolist['status']=='Processing' || $todolist['request']['status']=='Agreement Processing'){
                                    if($todolist['status']=='Processing'){
                                        if($todolist['landlord']['identity_status']=='Verified'){
                                            $data[] = $todolist;
                                        }else{
                                            $manualkycexist = ManualKyc::find()->where(['user_id'=>$user_id,'request_id'=>$todolist['request']['id'],'status'=>'Pending'])->one();
                                            if(empty($manualkycexist)){
                                                $data[] = $todolist;
                                            }
                                        }
                                    }else {
                                        $data[] = $todolist;
                                    }
                                }
                            }

                        break;
                        case "Activation Link";
                            if($todolist['status']=='Pending'){
                                $mscrequestmodel = Msc::findOne($todolist['msc_id']);
                                if(!empty($mscrequestmodel)) {
                                    $getrequeststatus = $this->Getrequeststatus($mscrequestmodel);
                                    if (!empty($getrequeststatus)) {
                                        $mscrequestmodel->getrequeststatus_response = json_encode($getrequeststatus);
                                        $mscrequestmodel->updated_at = date('Y-m-d H:i:s');
                                        $mscrequestmodel->save(false);
                                        if ($getrequeststatus['statusCode'] == 000 && $getrequeststatus['dataList']['requestStatus'] == 'Completed') {
                                            $mscrequestmodel->status = 'Approved';
                                            $mscrequestmodel->updated_at = date('Y-m-d H:i:s');
                                            $mscrequestmodel->save(false);
                                            $todomodel = TodoList::findOne($todolist['id']);
                                            $todomodel->status = 'Completed';
                                            $todomodel->updated_at = date('Y-m-d H:i:s');
                                            $todomodel->save(false);
                                            $usermodel = Users::findOne($this->user_id);
                                            $usermodel->document_type = $mscrequestmodel->type;
                                            $usermodel->document_front = $mscrequestmodel->document_front;
                                            $usermodel->document_back = $mscrequestmodel->document_back;
                                            $usermodel->document_no = $mscrequestmodel->document_no;
                                            $usermodel->updated_at = date('Y-m-d H:i:s');
                                            $usermodel->save(false);

                                        }else{
                                            $data[] = $todolist;

                                        }
                                    }else{
                                        $data[] = $todolist;

                                    }
                                }else{
                                    $data[] = $todolist;

                                }

                                }

                        break;
                        case "Transfer Request";
                            if($todolist['status']=='Pending'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Moveout Refund";
                            if($todolist['status']=='Pending'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Renovation Quote";
                            if($todolist['status']=='Pending'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Renovation Milestone";
                            if($todolist['status']=='Unpaid'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Defect Report";
                            if($user_id==$todolist['user_id']){
                                if($todolist['status']=='Pending' || $todolist['status']=='Unpaid'){
                                    $data[] = $todolist;
                                }
                            }

                        break;
                        case "General";
                            if($todolist['status']=='Unpaid'){
                                $data[] = $todolist;
                            }
                         break;
                        case "Insurance";
                            if($todolist['status']=='Unpaid'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Monthly Rental";
                            if($todolist['status']=='Unpaid'){
                                $data[] = $todolist;
                            }
                        break;
                        case "Appointment";
                        $date = date('Y-m-d');
                            if($todolist['status']=='Pending' && $date<=$todolist['appointment_date']){
                                $data[] = $todolist;
                            }elseif ($todolist['status']=='Completed'){
                                $reviewexist = AgentRatings::find()->where(['todo_id'=>$todolist['id'],'user_id'=>$user_id])->one();
                                if(empty($reviewexist)) {
                                    $data[] = $todolist;
                                }
                            }
                            break;
                        case "Service";
                            if(($todolist['status']=='Pending' || $todolist['status']=='Unpaid' || $todolist['status']=='In Progress' || $todolist['status']=='Completed' || $todolist['status']=='Refund Requested') && ($todolist['service_type']=='Handyman' || $todolist['service_type']=='Mover')){
                                if($todolist['status']=='Completed'){
                                    $reviewexist = VendorRatings::find()->where(['request_id'=>$todolist['service_request_id'],'user_id'=>$user_id])->one();
                                    if(empty($reviewexist)){
                                        $data[] = $todolist;
                                    }
                                }else {
                                    $data[] = $todolist;
                                }
                            }elseif (($todolist['status']=='Unpaid' || $todolist['status']=='In Progress' || $todolist['status']=='Completed' || $todolist['status']=='Picked Up') && ($todolist['service_type']=='Cleaner' || $todolist['service_type']=='Laundry')){
                                if($todolist['status']=='Completed'){
                                    $reviewexist = VendorRatings::find()->where(['request_id'=>$todolist['service_request_id'],'user_id'=>$user_id])->one();
                                    if(empty($reviewexist)){
                                        $data[] = $todolist;
                                    }
                                }else {
                                    $data[] = $todolist;
                                }
                            }
                            break;

                    }
                }
            }
            return array('status' => 1, 'data' => $data);

        }
    }
    public function actionTododetail()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                // echo $user_id;exit;
                $todolists = TodoList::find()->select(['id', 'title', 'description', 'reftype', 'status', 'request_id', 'renovation_quote_id', 'service_request_id', 'property_id', 'user_id', 'landlord_id', 'worker_id' ,'agent_id', 'vendor_id', 'created_at', 'updated_at', 'rent_startdate', 'rent_enddate', 'due_date', 'appointment_date','appointment_time','service_type','subtotal','service_fees','stamp_duty','sst','total',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document"),'commission'])
                    ->with([
                        'request' => function ($query) {
                            $query->select(['id', 'booking_fees', 'credit_score', 'monthly_rental', 'tenancy_fees', 'stamp_duty', 'keycard_deposit', 'rental_deposit', 'utilities_deposit', 'subtotal', 'total','sst', 'commencement_date', 'tenancy_period', 'security_deposit','status', new \yii\db\Expression("CONCAT('/uploads/creditscorereports/', '', `credit_score_report`) as credit_score_report"), new \yii\db\Expression("CONCAT('/', '', `agreement_document`) as agreement_document"), new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"), new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document")]);
                        },
                        'servicerequest'=>function ($query) {
                            $query->select(['id','property_id','vendor_id','user_id','todo_id','date','time','description','document','reftype','status','amount','subtotal','sst','total_amount','remarks']);
                        },
                        'servicerequest.servicerequestImages'=>function ($query) {
                            $query->select(['id','service_request_id','description','image','reftype','created_at']);
                        },
                        'property' => function ($query) {
                            $query->select('id,property_no,title');
                        },
                        'user' => function ($query) {
                            $query->select(["id","full_name",new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture"),"identity_status","ekyc_document","ekyc_document_back"]);
                        },
                        'landlord' => function ($query) {
                            $query->select(["id","full_name",new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture"),"identity_status","ekyc_document","ekyc_document_back"]);

                        },
                        'agent'=>function($query){
                            $query->select(["id","full_name","company_name",new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")]);

                        },
                        'renovationquote' => function ($query) {
                            $query->select(['id', new \yii\db\Expression("CONCAT('/uploads/renovationquotes/', '', `quote_document`) as quote_document")]);

                        },
                        'documents' => function ($query) {
                            $query->select(['id', 'todo_id', 'description', new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")]);

                        },
                        'todoItems' => function ($query) {
                            $query->select(['id', 'todo_id', 'description', 'platform_deductible', 'price', 'reftype']);

                        },
                        'worker'=>function($query){
                            $query->select("id,full_name");

                        },
                    ])->where(['id' => $_POST['todo_id']])->asArray()->all();

                $data = array();
                if (!empty($todolists)) {
                    foreach ($todolists as $key => $todolist) {

                        switch ($todolist['reftype']) {
                            case "Booking";
                                if($todolist['user_id']==$user_id){
                                    if(($todolist['status']=='Pending' && $todolist['request']['credit_score']=='') || $todolist['status']=='New' || $todolist['status']=='Approved' || $todolist['status']=='Unpaid'){
                                        $data[] = $todolist;
                                    }else if($todolist['request']['status']=='Rented' && $todolist['request']['movein_document']!=''){
                                        $reviewexist = PropertyRatings::find()->where(['request_id'=>$todolist['request_id'],'user_id'=>$user_id,'property_id'=>$todolist['property_id']])->one();
                                        if(empty($reviewexist)){
                                            $data[] = $todolist;
                                        }
                                    }
                                }else if($todolist['landlord_id']==$user_id){
                                    if(($todolist['status']=='Pending' && $todolist['request']['credit_score']!='') ||  $todolist['status']=='Processing'){
                                        $data[] = $todolist;
                                    }
                                }
                                break;
                            case "Transfer Request";
                                if($todolist['status']=='Pending'){
                                    $data[] = $todolist;
                                }
                                break;
                            case "Moveout Refund";
                                if ($todolist['status'] == 'Pending') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Renovation Quote";
                                if ($todolist['status'] == 'Pending') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Renovation Milestone";
                                if ($todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Defect Report";
                                if ($todolist['status'] == 'Pending' || $todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "General";
                                if ($todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Insurance";
                                if ($todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Monthly Rental";
                                if ($todolist['status'] == 'Unpaid') {
                                    $data[] = $todolist;
                                }
                                break;
                            case "Appointment";
                                $date = date('Y-m-d');
                                if($todolist['status']=='Pending' && $date<=$todolist['appointment_date']){
                                    $data[] = $todolist;
                                }
                                break;
                            case "Service";
                                if(($todolist['status']=='Pending' || $todolist['status']=='Unpaid' || $todolist['status']=='Refund Requested') && ($todolist['service_type']=='Handyman' || $todolist['service_type']=='Mover')){
                                    $data[] = $todolist;
                                }elseif (($todolist['status']=='Unpaid' || $todolist['status']=='In Progress') && ($todolist['service_type']=='Cleaner' || $todolist['service_type']=='Laundry')){
                                    $data[] = $todolist;
                                }

                                break;

                        }
                    }
                }
                return array('status' => 1, 'data' => $data);
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionMybills()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $user_id = $this->user_id;
            // echo $user_id;exit;
            $todolists = TodoList::find()->select(['id', 'title', 'description', 'reftype', 'status', 'property_id', 'user_id', 'landlord_id', 'created_at', 'updated_at','due_date', new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")])
                ->with([

                    'property' => function ($query) {
                        $query->select('id,property_no,title');
                    },
                    'user' => function ($query) {
                        $query->select("id,full_name");
                    },
                    'landlord' => function ($query) {
                        $query->select("id,full_name");

                    },

                    'todoItems' => function ($query) {
                        $query->select(['id', 'todo_id', 'description', 'price', 'reftype']);

                    },
                ])->where(['reftype' => 'General'])->andWhere(['user_id'=>$user_id])->orWhere(['landlord_id'=>$user_id])->andWhere(['!=','status','Rejected'])->asArray()->all();

            $data = array();
            //echo "<pre>";print_r($todolists);exit;
            if (!empty($todolists)) {
                foreach ($todolists as $key => $todolist) {

                    switch ($todolist['reftype']) {

                        case "General";
                            $todolist['due_date'] = date('d/m/Y',strtotime($todolist['due_date']));
                            //if ($todolist['status'] == 'Unpaid') {
                                $data[] = $todolist;
                           // }
                            break;


                    }
                }
            }
            return array('status' => 1, 'data' => $data);

        }
    }
    public function actionMydocuments()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

            $user_id = $this->user_id;
            // echo $user_id;exit;
            $todolists = TodoList::find()->select(['id', 'title', 'description', 'reftype', 'status', 'request_id', 'renovation_quote_id', 'service_request_id', 'property_id', 'user_id', 'landlord_id', 'worker_id' ,'agent_id', 'vendor_id', 'created_at', 'updated_at', 'rent_startdate', 'rent_enddate', 'due_date', 'appointment_date','appointment_time','service_type','subtotal','sst','total',new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")])
                ->with([
                    'request' => function ($query) {
                        $query->select(['id','commencement_date','tenancy_period','status','signed_agreement','signed_agreement_document',new \yii\db\Expression("CONCAT('/uploads/agreements/', '', `stampduty_certificate`) as stampduty_certificate"), new \yii\db\Expression("CONCAT('/uploads/agreements/', '', `agreement_document`) as agreement_document"), new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `movein_document`) as movein_document"), new \yii\db\Expression("CONCAT('/uploads/moveinout/', '', `moveout_document`) as moveout_document"),'updated_at']);
                    },
                    'servicerequest'=>function ($query) {
                        $query->select(['id','property_id','vendor_id','user_id','todo_id','date','time','description','document','reftype','status','amount','subtotal','sst','total_amount']);
                    },
                    'property' => function ($query) {
                        $query->select('id,property_no,title,location');
                    },
                    'user' => function ($query) {
                        $query->select("id,full_name");
                    },
                    'landlord' => function ($query) {
                        $query->select("id,full_name");

                    },
                    'agent'=>function($query){
                        $query->select("id,full_name");

                    },
                    'documents' => function ($query) {
                        $query->select(['id', 'todo_id', 'description', new \yii\db\Expression("CONCAT('/uploads/tododocuments/', '', `document`) as document")]);

                    },

                ])->where(['user_id' => $user_id])->orWhere(['landlord_id'=>$user_id])->asArray()->all();
           // echo "<pre>";print_r($todolists);exit;

            $data = array();
            if (!empty($todolists)) {
                foreach ($todolists as $key => $todolist) {

                    switch ($todolist['reftype']) {
                        case "Booking";
                            if($todolist['user_id']==$user_id){
                                 if(($todolist['request']['status']=='Rented' || $todolist['request']['status']=='Completed')){
                                     if($todolist['request']['movein_document']!='') {
                                         $moveindocument['document'] = $todolist['request']['movein_document'];
                                         $moveindocument['type'] = 'Move In Document';
                                         $moveindocument['property'] = $todolist['property']['property_no'] . " " . $todolist['property']['title'];
                                         $moveindocument['location'] = $todolist['property']['location'];
                                         $commencmentdate = $todolist['request']['commencement_date'];
                                         $months = $todolist['request']['tenancy_period'];
                                         $effectiveDate = date('Y-m-d', strtotime("+" . $months . " months", strtotime($commencmentdate)));
                                         $moveindocument['agreement_period'] = date('M-Y', strtotime($commencmentdate)) . " - " . date('M-Y', strtotime($effectiveDate));
                                         $moveindocument['date'] = date('d-m-Y',strtotime($todolist['request']['updated_at']));
                                         $data[] = $moveindocument;
                                     }
                                     if($todolist['request']['signed_agreement_document']!='' && $todolist['request']['signed_agreement']!=''){
                                         $agreementdocument['document'] = '/'.$todolist['request']['signed_agreement_document'];
                                         $agreementdocument['type'] = 'Agreement';
                                         $agreementdocument['property'] = $todolist['property']['property_no'] . " " . $todolist['property']['title'];
                                         $agreementdocument['location'] = $todolist['property']['location'];
                                         $commencmentdate = $todolist['request']['commencement_date'];
                                         $months = $todolist['request']['tenancy_period'];
                                         $effectiveDate = date('Y-m-d', strtotime("+" . $months . " months", strtotime($commencmentdate)));
                                         $agreementdocument['agreement_period'] = date('M-Y', strtotime($commencmentdate)) . " - " . date('M-Y', strtotime($effectiveDate));
                                         $agreementdocument['date'] = date('d-m-Y',strtotime($todolist['request']['updated_at']));

                                         $data[] = $agreementdocument;

                                     }
                                     if($todolist['request']['stampduty_certificate']!=''){
                                         $agreementdocument['document'] = $todolist['request']['stampduty_certificate'];
                                         $agreementdocument['type'] = 'Stamp Duty Certificate';
                                         $agreementdocument['property'] = $todolist['property']['property_no'] . " " . $todolist['property']['title'];
                                         $agreementdocument['location'] = $todolist['property']['location'];
                                         $commencmentdate = $todolist['request']['commencement_date'];
                                         $months = $todolist['request']['tenancy_period'];
                                         $effectiveDate = date('Y-m-d', strtotime("+" . $months . " months", strtotime($commencmentdate)));
                                         $agreementdocument['agreement_period'] = date('M-Y', strtotime($commencmentdate)) . " - " . date('M-Y', strtotime($effectiveDate));
                                         $data[] = $agreementdocument;

                                     }
                                     if($todolist['request']['moveout_document']!=''){
                                         $moveoutdocument['document'] = $todolist['request']['moveout_document'];
                                         $moveoutdocument['type'] = 'Moveout Document';
                                         $moveoutdocument['property'] = $todolist['property']['property_no'] . " " . $todolist['property']['title'];
                                         $moveoutdocument['location'] = $todolist['property']['location'];
                                         $commencmentdate = $todolist['request']['commencement_date'];
                                         $months = $todolist['request']['tenancy_period'];
                                         $effectiveDate = date('Y-m-d', strtotime("+" . $months . " months", strtotime($commencmentdate)));
                                         $moveoutdocument['agreement_period'] = date('M-Y', strtotime($commencmentdate)) . " - " . date('M-Y', strtotime($effectiveDate));
                                         $moveoutdocument['date'] = date('d-m-Y',strtotime($todolist['request']['updated_at']));

                                         $data[] = $moveoutdocument;

                                     }
                                 }
                            }else if($todolist['landlord_id']==$user_id){
                                if(($todolist['request']['status']=='Rented' || $todolist['request']['status']=='Completed')){
                                    if($todolist['request']['movein_document']!='') {
                                        $moveindocument['document'] = $todolist['request']['movein_document'];
                                        $moveindocument['type'] = 'Move In Document';
                                        $moveindocument['property'] = $todolist['property']['property_no'] . " " . $todolist['property']['title'];
                                        $moveindocument['location'] = $todolist['property']['location'];
                                        $commencmentdate = $todolist['request']['commencement_date'];
                                        $months = $todolist['request']['tenancy_period'];
                                        $effectiveDate = date('Y-m-d', strtotime("+" . $months . " months", strtotime($commencmentdate)));
                                        $moveindocument['agreement_period'] = date('M-Y', strtotime($commencmentdate)) . " - " . date('M-Y', strtotime($effectiveDate));
                                        $moveindocument['date'] = date('d-m-Y',strtotime($todolist['request']['updated_at']));

                                        $data[] = $moveindocument;
                                    }
                                    if($todolist['request']['signed_agreement_document']!='' && $todolist['request']['signed_agreement']!=''){
                                        $agreementdocument['document'] = '/'.$todolist['request']['signed_agreement_document'];
                                        $agreementdocument['type'] = 'Agreement';
                                        $agreementdocument['property'] = $todolist['property']['property_no'] . " " . $todolist['property']['title'];
                                        $agreementdocument['location'] = $todolist['property']['location'];
                                        $commencmentdate = $todolist['request']['commencement_date'];
                                        $months = $todolist['request']['tenancy_period'];
                                        $effectiveDate = date('Y-m-d', strtotime("+" . $months . " months", strtotime($commencmentdate)));
                                        $agreementdocument['agreement_period'] = date('M-Y', strtotime($commencmentdate)) . " - " . date('M-Y', strtotime($effectiveDate));
                                        $agreementdocument['date'] = date('d-m-Y',strtotime($todolist['request']['updated_at']));
                                        $data[] = $agreementdocument;

                                    }
                                    if($todolist['request']['stampduty_certificate']!=''){
                                        $agreementdocument['document'] = $todolist['request']['stampduty_certificate'];
                                        $agreementdocument['type'] = 'Stamp Duty Certificate';
                                        $agreementdocument['property'] = $todolist['property']['property_no'] . " " . $todolist['property']['title'];
                                        $agreementdocument['location'] = $todolist['property']['location'];
                                        $commencmentdate = $todolist['request']['commencement_date'];
                                        $months = $todolist['request']['tenancy_period'];
                                        $effectiveDate = date('Y-m-d', strtotime("+" . $months . " months", strtotime($commencmentdate)));
                                        $agreementdocument['agreement_period'] = date('M-Y', strtotime($commencmentdate)) . " - " . date('M-Y', strtotime($effectiveDate));
                                        $agreementdocument['date'] = date('d-m-Y',strtotime($todolist['request']['updated_at']));

                                        $data[] = $agreementdocument;

                                    }
                                    if($todolist['request']['moveout_document']!=''){
                                        $moveoutdocument['document'] = $todolist['request']['agreement_document'];
                                        $moveoutdocument['type'] = 'Moveout Document';
                                        $moveoutdocument['property'] = $todolist['property']['property_no'] . " " . $todolist['property']['title'];
                                        $moveoutdocument['location'] = $todolist['property']['location'];
                                        $commencmentdate = $todolist['request']['commencement_date'];
                                        $months = $todolist['request']['tenancy_period'];
                                        $effectiveDate = date('Y-m-d', strtotime("+" . $months . " months", strtotime($commencmentdate)));
                                        $moveoutdocument['agreement_period'] = date('M-Y', strtotime($commencmentdate)) . " - " . date('M-Y', strtotime($effectiveDate));
                                        $moveoutdocument['date'] = date('d-m-Y',strtotime($todolist['request']['updated_at']));

                                        $data[] = $moveoutdocument;

                                    }
                                }
                            }
                            break;


                        case "Insurance";
                            if ($todolist['status'] == 'Completed' && $todolist['landlord_id']==$user_id) {
                                $covernotedocument['document'] = $todolist['documents'][0]['document'];
                                $covernotedocument['type'] = 'Insurance Cover Note';
                                $covernotedocument['property'] = $todolist['property']['property_no'] . " " . $todolist['property']['title'];
                                $covernotedocument['location'] = $todolist['property']['location'];
                                $covernotedocument['agreement_period'] = '';
                                $covernotedocument['date'] = date('d-m-Y',strtotime($todolist['updated_at']));

                                $data[] = $covernotedocument;

                            }
                            break;

                    }
                }
            }
            return array('status' => 1, 'data' => $data);

        }
    }

    public function actionAccepttransferrequest()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $auto_rental = (isset($_POST['auto_rental']) && $_POST['auto_rental']!='')?1:0;
                $insurance = (isset($_POST['insurance']) && $_POST['insurance']!='')?1:0;

                $todorequestexist = TodoList::find()->where(['id'=>$_POST['todo_id'],'status'=>'Pending'])->one();
                if(empty($todorequestexist)){
                    return array('status' => 0, 'message' => 'No trasnfer request details found.');
                }
                $todorequestexist->status = 'Accepted';
                $todorequestexist->updated_at = date('Y-m-d H:i:s');
                if($todorequestexist->save()){
                    $todorequestexist->property->user_id = $user_id;
                    $todorequestexist->property->auto_rental = $auto_rental;
                    $todorequestexist->property->insurance = $insurance;
                    $todorequestexist->property->save(false);
                    $chat = new Chats();
                    $chat->receiver_id = $user_id;
                    $chat->sender_id = $todorequestexist->user_id;
                    $chat->property_id = $todorequestexist->property_id;
                    $chat->msg = 'Please Send me Booking Request';
                    $chat->msg_type = 'text';
                    $chat->created_at = date('Y-m-d H:i:s');
                    $chat->save(false);
                    $subject = 'Property booking transfer approval';
                    $textmessage = 'One of your property '.$todorequestexist->property->property_no.' booking transfer has been approved, kindly check with respective landlord for further action.';
                    Yii::$app->common->Savenotification($todorequestexist->agent_id,$subject,$textmessage,'',$todorequestexist->property_id,$todorequestexist->id);

                    Yii::$app->common->Sendpushnotification($todorequestexist->agent_id,$subject,$textmessage,'Partner');

                    return array('status' => 1, 'message' => 'You have accepted transfer request.');
                }else{
                    return array('status' => 0, 'data' => $todorequestexist->getErrors());

                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }


    public function actionRankagent()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $model = new AgentRatings();
                $model->scenario = 'addrating';
                $model->attributes = Yii::$app->request->post();
                $model->user_id =  $user_id;
                if($model->validate()){
                  $bookingrequest = TodoList::findOne($model->todo_id);
                  if(empty($bookingrequest)){
                      return array('status' => 0, 'message' => 'Data not found.');
                  }
                  $model->property_id = $bookingrequest->property_id;
                  $model->agent_id = $bookingrequest->agent_id;
                  $model->created_at = date('Y-m-d H:i:s');
                    if($model->save(false)){
                        return array('status' => 1, 'message' => 'You have reviewed agent successfully.');
                    }else{
                        return array('status' => 0, 'data' => $model->getErrors());

                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }
    public function actionRankproperty()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['request_id']) && $_POST['request_id']!='') {

                $user_id = $this->user_id;
                $model = new PropertyRatings();
                $model->scenario = 'addrating';
                $model->attributes = Yii::$app->request->post();
                $model->user_id =  $user_id;
                if($model->validate()){
                    $bookingrequest = BookingRequests::findOne($model->request_id);
                    if(empty($bookingrequest)){
                        return array('status' => 0, 'message' => 'Data not found.');
                    }
                    $model->property_id = $bookingrequest->property_id;
                    $model->created_at = date('Y-m-d H:i:s');
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have reviewed property successfully.');
                    }else{
                        return array('status' => 0, 'data' => $model->getErrors());

                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionRankvendor()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['request_id']) && $_POST['request_id']!='') {

                $user_id = $this->user_id;
                $model = new VendorRatings();
                $model->scenario = 'addrating';
                $model->attributes = Yii::$app->request->post();
                $model->user_id =  $user_id;
                if($model->validate()){
                    $bookingrequest = ServiceRequests::findOne($model->request_id);
                    if(empty($bookingrequest)){
                        return array('status' => 0, 'message' => 'Data not found.');
                    }
                    $model->property_id = $bookingrequest->property_id;
                    $model->vendor_id = $bookingrequest->vendor_id;
                    $model->created_at = date('Y-m-d H:i:s');
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have reviewed vendor successfully.');
                    }else{
                        return array('status' => 0, 'data' => $model->getErrors());

                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionRankapp()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {

                $user_id = $this->user_id;
                $model = new AppRatings();
                $model->scenario = 'addrating';
                $model->attributes = Yii::$app->request->post();
                $model->user_id =  $user_id;
                if($model->validate()){
                    $model->created_at = date('Y-m-d H:i:s');
                    if($model->save()){
                        return array('status' => 1, 'message' => 'You have reviewed app successfully.');
                    }else{
                        return array('status' => 0, 'data' => $model->getErrors());

                    }
                }else{
                    return array('status' => 0, 'message' => $model->getErrors());

                }


        }
    }

    public function actionRefundmoveout()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='') {

                $user_id = $this->user_id;
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['reftype'=>'Moveout Refund','id'=>$_POST['todo_id'],'status'=>'Pending'])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
                $this->actionUpdatetodostatus($_POST['todo_id'],'Accepted','Moveout Refund');
                //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }
  public function actionRejecttodo(){
      $method = $_SERVER['REQUEST_METHOD'];
      if ($method != 'POST') {
          return array('status' => 0, 'message' => 'Bad request.');
      } else {
          if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='' && isset($_POST['status']) && $_POST['status']!='') {

              $user_id = $this->user_id;
              $systemaccount = Yii::$app->common->getsystemaccount();
              $todomodel = TodoList::find()->where(['id'=>$_POST['todo_id'],'status'=>'Pending'])->one();
              if (empty($todomodel)){
                  return array('status' => 0, 'message' => 'Data not found.');
              }
              $todomodel->status = $_POST['status'];
              if($todomodel->save()){
                  return array('status' => 1, 'message' => 'You have rejected request successfully.');

              }else{
                  return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

              }


          }else{
              return array('status' => 0, 'message' => 'Please enter mandatory fields.');

          }
      }
  }

    public function actionPayonline()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST) && (isset($_POST['todo_id']) && $_POST['todo_id']!='') || (isset($_POST['package_id']) && $_POST['package_id']!='') || isset($_POST['type'])) {
                if(isset($_POST['package_id']) && $_POST['package_id']!=''){
                    $packagedetails = Packages::findOne($_POST['package_id']);
                    $promocode = (isset($_POST['promo_code']) && $_POST['promo_code'] != '') ? $_POST['promo_code'] : '';
                    $amount = (isset($_POST['amount']) && $_POST['amount'] != '') ? $_POST['amount'] : '';
                    $discount = (isset($_POST['discount']) && $_POST['discount'] != '') ? $_POST['discount'] : 0;
                    $goldcoins = (isset($_POST['gold_coins']) && $_POST['gold_coins'] != '') ? $_POST['gold_coins'] : 0;
                    $coins_savings = (isset($_POST['coins_savings']) && $_POST['coins_savings'] != '') ? $_POST['coins_savings'] : 0;
                    if ($promocode != '') {
                        $promocodedetails = PromoCodes::find()->where(['promo_code' => $promocode])->one();
                    }
                    $amountwithoutsst = $packagedetails->price;
                    $totaldiscount = $discount+$coins_savings;
                    $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                    $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                    $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount;
                    $payment = new Payments();
                    $payment->user_id = $this->user_id;
                    $payment->package_id = $_POST['package_id'];
                    $payment->order_id = time().uniqid();
                    $payment->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                    $payment->amount = $amountwithoutsst;
                    $payment->sst = $sstafterdiscount;
                    $payment->discount = $discount;
                    $payment->coins = $goldcoins;
                    $payment->coins_savings = $coins_savings;
                    $payment->total_amount = $totalamountafterdiscount;
                    $payment->status = 'Pending';
                    $payment->created_at = date('Y-m-d H:i:s');
                    if($payment->save(false)){
                        return array('status' => 1, 'order_id' => $payment->order_id);

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }

                }else if($_POST['type']!='' && $_POST['type']='topup' && $_POST['amount']!=''){
                    $payment = new Payments();
                    $payment->user_id = $this->user_id;
                    $payment->package_id = NULL;
                    $payment->todo_id = NULL;
                    $payment->order_id = time().uniqid();
                    $payment->amount = $_POST['amount'];
                    $payment->total_amount = $_POST['amount'];
                    $payment->status = 'Pending';
                    $payment->created_at = date('Y-m-d H:i:s');
                    if($payment->save(false)){
                        return array('status' => 1, 'order_id' => $payment->order_id);

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }
                }else if((isset($_POST['request_id']) && $_POST['request_id']!='') && (isset($_POST['todo_id']) && $_POST['todo_id']!='') && (isset($_POST['name']) && $_POST['name']!='') && (isset($_POST['document_no']) && $_POST['document_no']!='')){
                    $bookingrequestmodel = BookingRequests::findOne($_POST['request_id']);
                    $payment = new Payments();
                    $payment->user_id = $this->user_id;
                    $payment->package_id = NULL;
                    $payment->todo_id = $_POST['todo_id'];
                    $payment->request_id = $_POST['request_id'];
                    $payment->order_id = time().uniqid();
                    $payment->amount = $bookingrequestmodel->booking_fees;
                    $payment->total_amount = $bookingrequestmodel->booking_fees;
                    $payment->name = (isset($_POST['name']))?$_POST['name']:NULL;
                    $payment->document_no = (isset($_POST['document_no']))?$_POST['document_no']:NULL;
                    $payment->status = 'Pending';
                    $payment->created_at = date('Y-m-d H:i:s');
                    if($payment->save(false)){
                        return array('status' => 1, 'order_id' => $payment->order_id);

                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                    }
                }else {
                    $systemaccount = Yii::$app->common->getsystemaccount();
                    $user_id = $this->user_id;
                    $todomodel = TodoList::find()->where(['id' => $_POST['todo_id']])->one();
                    if (empty($todomodel)) {
                        return array('status' => 0, 'message' => 'Data not found.');
                    }
                    $todo_id = $_POST['todo_id'];
                    $todomodel = TodoList::findOne($todo_id);
                    $promocode = (isset($_POST['promo_code']) && $_POST['promo_code'] != '') ? $_POST['promo_code'] : '';
                    $amount = (isset($_POST['amount']) && $_POST['amount'] != '') ? $_POST['amount'] : '';
                    $discount = (isset($_POST['discount']) && $_POST['discount'] != '') ? $_POST['discount'] : 0;
                    $goldcoins = (isset($_POST['gold_coins']) && $_POST['gold_coins'] != '') ? $_POST['gold_coins'] : 0;
                    $coins_savings = (isset($_POST['coins_savings']) && $_POST['coins_savings'] != '') ? $_POST['coins_savings'] : 0;
                    if ($promocode != '') {
                        $promocodedetails = PromoCodes::find()->where(['promo_code' => $promocode])->one();
                    }
//                    $totalamount = $amount;
//                    $totalamountafterdiscount = $totalamount - $discount - $coins_savings;
//
                    if($todomodel->reftype=='Booking'){
                        $model = BookingRequests::findOne($todomodel->request_id);
                        $amountwithoutsst = $todomodel->request->subtotal;
                        $tenancyfees = $model->tenancy_fees;
                        $totaldiscount = (float)$discount+(float)$coins_savings;
                        $totaltenancyfees = $model->tenancy_fees-$totaldiscount;
                        $sstafterdiscount =Yii::$app->common->calculatesst($totaltenancyfees);
                        $tenancyfeeswithsst = $totaltenancyfees+$sstafterdiscount;
                        $bookingfees = $model->booking_fees;
                        $stamp_duty = $model->stamp_duty;
                        $totaldiscount = $discount+$coins_savings;
                        $subtotal = $model->monthly_rental+$model->security_deposit+$model->keycard_deposit+$model->utilities_deposit+$tenancyfees+$stamp_duty-$bookingfees;
                        $totalcoinsamountapplied = $tenancyfees - ((float)$discount+(float)$coins_savings);
                        $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $model->monthly_rental+$model->security_deposit+$model->keycard_deposit+$model->utilities_deposit+(float)$totalcoinsamountapplied+$sstafterdiscount+$stamp_duty-$bookingfees;
                    }elseif($todomodel->reftype=='Insurance'){
                        $stamp_duty = $todomodel->stamp_duty;
                        $totalamount = $amount;
                        $amountwithoutsst = $todomodel->subtotal;
                        $totaldiscount = $discount+$coins_savings;
                        $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                        $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                        $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount+$stamp_duty;
                    }elseif($todomodel->reftype=='General'){
                        $totalamount = $amount;
                        $amountwithoutsst = $todomodel->subtotal;
                        $totaldiscount = $discount+$coins_savings;
                        $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                        if($todomodel->is_sst==1){
                            $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                            $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount;

                        }else{
                            $sstafterdiscount = $todomodel->sst;
                            $totalamountafterdiscount = $totalamountafterdiscount;
                        }
                    }else {
                        $totalamount = $amount;
                        $amountwithoutsst = $todomodel->subtotal;
                        $totaldiscount = $discount + $coins_savings;
                        $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                        $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                        $totalamountafterdiscount = $totalamountafterdiscount + $sstafterdiscount;
                    }

                    $transactionmodel = new Payments();
                    $transactionmodel->user_id = $user_id;
                    $transactionmodel->todo_id = $todo_id;
                    $transactionmodel->order_id = time().uniqid();
                    $transactionmodel->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                    $transactionmodel->amount = $amountwithoutsst;
                    $transactionmodel->sst = $sstafterdiscount;
                    $transactionmodel->discount = $discount;
                    $transactionmodel->coins = $goldcoins;
                    $transactionmodel->coins_savings = $coins_savings;
                    $transactionmodel->total_amount = $totalamountafterdiscount;
                    $transactionmodel->status = 'Pending';
                    $transactionmodel->created_at = date('Y-m-d H:i:s');
                    if($transactionmodel->save(false)){
                        return array('status' => 1, 'order_id' => $transactionmodel->order_id);
                    }else{
                        return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.'.$transactionmodel->getErrors());

                    }
                }
            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }

    }

    public function actionPaytodo()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['todo_id']) && $_POST['todo_id']!='' && isset($_POST['status']) && $_POST['status']!='') {

                $user_id = $this->user_id;
                $status = $_POST['status'];
                //$order_id = (isset($_POST['order_id']) && $_POST['order_id']!='')?$_POST['order_id']:'';
                $systemaccount = Yii::$app->common->getsystemaccount();
                $todomodel = TodoList::find()->where(['id'=>$_POST['todo_id']])->one();
                if (empty($todomodel)){
                    return array('status' => 0, 'message' => 'Data not found.');
                }
//                if($order_id!=''){
//                    $paymentmodel = Payments::find()->where(['order_id'=>$order_id,'status'=>'Pending'])->one();
//                    $post = $_POST;
//                    $post['todo_id'] = $paymentmodel->todo_id;
//                    $post['amount'] = $paymentmodel->amount;
//                    $post['discount'] = $paymentmodel->discount;
//                    $post['promo_code'] = $paymentmodel->promo_code;
//                    $post['gold_coins'] = $paymentmodel->gold_coins;
//                    $post['coins_savings'] = $paymentmodel->coins_savings;
//
//                }else{
                    $paymentmodel = array();
                    $post = $_POST;
                //}

              $return =  $this->actionUpdatetodostatus($_POST['todo_id'],$status,$todomodel->reftype,$_POST);

              return $return;

                //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }


public function actionPaysuccess(){
    $method = $_SERVER['REQUEST_METHOD'];
    if ($method != 'POST') {
        return array('status' => 0, 'message' => 'Bad request.');
    } else {
        if (!empty($_POST) && isset($_POST['order_id']) && $_POST['order_id']!='' ) {

            $user_id = $this->user_id;
            $status = $_POST['status'];
            $order_id = (isset($_POST['order_id']) && $_POST['order_id']!='')?$_POST['order_id']:'';
            $systemaccount = Yii::$app->common->getsystemaccount();
            $paymentmodel = Payments::find()->where(['order_id'=>$order_id,'status'=>'Pending'])->one();
            if(empty($paymentmodel)){
                return array('status' => 0, 'message' => 'Data not found.');

            }
            $paymentmodel->status = 'Completed';
            $paymentmodel->updated_at = date('Y-m-d H:i:s');
            if($paymentmodel->save()) {
                $post['amount'] = $paymentmodel->amount;
                $post['discount'] = $paymentmodel->discount;
                $post['promo_code'] = $paymentmodel->promo_code;
                $post['gold_coins'] = $paymentmodel->gold_coins;
                $post['coins_savings'] = $paymentmodel->coins_savings;
                $todomodel = TodoList::findOne($paymentmodel->todo_id);


                $return = $this->actionUpdatetodostatus($paymentmodel->todo_id, 'Accepted', $todomodel->reftype, $post,$paymentmodel->id);

                return $return;
            }else{
                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

            }

            //$todoitems = TodoItems::find()->where(['todo_id'=>$_POST['todo_id']])


        }else{
            return array('status' => 0, 'message' => 'Please enter mandatory fields.');

        }
    }
}


   public function actionUpdatetodostatus($todo_id,$status,$reftype,$post=array(),$order_id='')
   {

       $systemaccount = Yii::$app->common->getsystemaccount();
       $user_id = $this->user_id;
       $todomodel = TodoList::findOne($todo_id);
       $promocode = (isset($post['promo_code']) && $post['promo_code'] != '') ? $post['promo_code'] : '';
       $amount = (isset($post['amount']) && $post['amount'] != '') ? $post['amount'] : '';
       $discount = (isset($post['discount']) && $post['discount'] != '') ? $post['discount'] : 0;
       $goldcoins = (isset($post['gold_coins']) && $post['gold_coins'] != '') ? $post['gold_coins'] : 0;
       $coins_savings = (isset($post['coins_savings']) && $post['coins_savings'] != '') ? $post['coins_savings'] : 0;
       if ($promocode != '') {
           $promocodedetails = PromoCodes::find()->where(['promo_code' => $promocode])->one();
       }
       switch ($reftype) {
           case "Moveout Refund";
               $todoitems = $todomodel->todoItems;


               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if($todomodel->status=='Pending') {
                       if ($status == 'Accepted') {
                           $todomodel->status = $status;
                           if ($todomodel->save()) {
                               $todoitems = $todomodel->todoItems;
                               if (!empty($todoitems)) {

                                   $transactionmodel = new Transactions();
                                   $transactionmodel->user_id = $user_id;
                                   $transactionmodel->landlord_id = $todomodel->request->landlord_id;
                                   $transactionmodel->property_id = $todomodel->property_id;
                                   $transactionmodel->request_id = $todomodel->request_id;
                                   $transactionmodel->todo_id = $todo_id;
                                   $transactionmodel->amount = $todomodel->total;
                                   $transactionmodel->sst = $todomodel->sst;
                                   $transactionmodel->total_amount = $todomodel->total;
                                   $transactionmodel->type = 'Refund';
                                   $transactionmodel->reftype = 'Moveout Refund';
                                   $transactionmodel->status = 'Completed';
                                   $transactionmodel->created_at = date('Y-m-d H:i:s');
                                   if ($transactionmodel->save(false)) {
                                       $flag = false;
                                       $lastid = $transactionmodel->id;
                                       $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                       $transactionmodel->reference_no = $reference_no;
                                       $transactionmodel->save(false);
                                       if (!empty($todoitems)) {
                                           $totalplatform_deductible = 0;
                                           $totaldeductfromuser = 0;
                                           $receiverbalance = Users::getbalance($user_id);
                                           $senderbalance = Users::getbalance($todomodel->request->landlord_id);
                                           foreach ($todoitems as $todoitem) {

                                               if ($todoitem->platform_deductible > 0) {
                                                   $totalplatform_deductible += $todoitem->platform_deductible;
                                                   $transactionitemmodel = new TransactionsItems();
                                                   $transactionitemmodel->sender_id = $systemaccount->id;
                                                   $transactionitemmodel->transaction_id = $lastid;
                                                   $transactionitemmodel->receiver_id = $user_id;
                                                   $transactionitemmodel->amount = $todoitem->platform_deductible;
                                                   $transactionitemmodel->total_amount = $todoitem->platform_deductible;
                                                   $transactionitemmodel->oldsenderbalance = $systemaccount->wallet_balance;
                                                   $transactionitemmodel->newsenderbalance = $systemaccount->wallet_balance - $todoitem->platform_deductible;
                                                   $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                                   $transactionitemmodel->newreceiverbalance = $receiverbalance + $todoitem->platform_deductible;
                                                   $transactionitemmodel->type = 'Refund';
                                                   $transactionitemmodel->status = 'Completed';
                                                   $transactionitemmodel->description = $todoitem->description;
                                                   $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                                   if ($flag = $transactionitemmodel->save(false)) {
                                                       $totaldeductfromuser += $todoitem->price;
                                                       $transactionitemmodel1 = new TransactionsItems();
                                                       $transactionitemmodel1->transaction_id = $lastid;
                                                       $transactionitemmodel1->sender_id = $todomodel->request->landlord_id;
                                                       $transactionitemmodel1->receiver_id = $user_id;
                                                       $transactionitemmodel1->amount = $todoitem->price;
                                                       $transactionitemmodel1->total_amount = $todoitem->price;

                                                       $transactionitemmodel1->oldsenderbalance = $senderbalance;
                                                       $transactionitemmodel1->newsenderbalance = $senderbalance - $todoitem->price;
                                                       $transactionitemmodel1->oldreceiverbalance = $receiverbalance;
                                                       $transactionitemmodel1->newreceiverbalance = $receiverbalance + $todoitem->price;
                                                       $transactionitemmodel1->type = 'Refund';
                                                       $transactionitemmodel1->status = 'Completed';

                                                       $transactionitemmodel1->description = $todoitem->description;
                                                       $transactionitemmodel1->created_at = date('Y-m-d H:i:s');
                                                       $transactionitemmodel1->save(false);
                                                       if (!($flag = $transactionitemmodel1->save(false))) {
                                                           $transaction->rollBack();
                                                           break;
                                                       }


                                                   } else {
                                                       $transaction->rollBack();
                                                       break;
                                                   }

                                               } else {
                                                   $totaldeductfromuser += $todoitem->price;
                                                   $transactionitemmodel = new TransactionsItems();
                                                   $transactionitemmodel->transaction_id = $lastid;
                                                   $transactionitemmodel->sender_id = $todomodel->request->landlord_id;
                                                   $transactionitemmodel->receiver_id = $user_id;
                                                   $transactionitemmodel->amount = $todoitem->price;
                                                   $transactionitemmodel->total_amount = $todoitem->price;

                                                   $transactionitemmodel->oldsenderbalance = $senderbalance;
                                                   $transactionitemmodel->newsenderbalance = $senderbalance - $todoitem->price;
                                                   $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                                   $transactionitemmodel->newreceiverbalance = $receiverbalance + $todoitem->price;
                                                   $transactionitemmodel->type = 'Refund';
                                                   $transactionitemmodel->status = 'Completed';
                                                   $transactionitemmodel->description = $todoitem->description;
                                                   $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                                   if (!($flag = $transactionitemmodel->save(false))) {
                                                       $transaction->rollBack();
                                                       break;
                                                   }

                                               }


                                           }
                                           if ($flag) {
                                               $updatesenderbalance = Users::updatebalance($senderbalance - $totaldeductfromuser, $todomodel->request->landlord_id);
                                               $updatesystembalance = Users::updatebalance($systemaccount->wallet_balance - $totalplatform_deductible - $todomodel->sst, $systemaccount->id);
                                               $updatereceiverbalance = Users::updatebalance($receiverbalance + $totaldeductfromuser + $totalplatform_deductible + $todomodel->sst, $user_id);
                                               if ($updatereceiverbalance && $updatesenderbalance && $updatesystembalance) {
                                                   $todomodel->status = 'Completed';
                                                   if ($todomodel->save(false)) {
                                                       $todomodel->property->status = 'Active';
                                                       $todomodel->property->save(false);
                                                       $todomodel->request->status = 'Moved Out';
                                                       $todomodel->request->updated_by = $user_id;
                                                       $todomodel->request->save(false);
                                                       $transaction->commit();
                                                       return array('status' => 1, 'message' => 'You have accepted refund request successfully.');

                                                   } else {
                                                       $transaction->rollBack();
                                                       return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                                   }

                                               } else {
                                                   $transaction->rollBack();
                                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                               }
                                           } else {
                                               $transaction->rollBack();

                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }

                                   } else {
                                       $transaction->rollBack();
                                       return array('status' => 0, 'message' => $transactionmodel->getErrors());

                                   }

                               } else {
                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                               }


                           } else {
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       } else if ($status == 'Rejected') {
                           $todomodel->status = ($status == 'Rejected') ? 'Refund Rejected' : '';
                           if ($todomodel->save()) {
                               $transaction->commit();
                               return array('status' => 1, 'message' => 'You have rejected refund request successfully.');

                           } else {
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }
                   }else{
                       return array('status' => 0, 'message' => 'Data not found.');

                   }
               } catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }
               break;
           case "Renovation Milestone";
               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if($todomodel->status=='Unpaid') {

                       if ($status == 'Accepted') {
                           $totalamount = $amount;
                           $amountwithoutsst = $todomodel->subtotal;
                           $totaldiscount = $discount+$coins_savings;
                           $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                           $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                           $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount;
                          // echo $totalamount."<br>".$amountwithoutsst."<br>".$tr."<br>".$sstafterdiscount."<br>".$totalamountafterdiscount;exit;
                           $senderbalance = Users::getbalance($todomodel->landlord_id);
                           if ($senderbalance < $totalamountafterdiscount) {
                               return array('status' => 0, 'message' => 'You don"t have enough wallet balance');

                           }
                           $todomodel->status = $status;
                           if ($todomodel->save()) {
                               $todoitems = $todomodel->todoItems;
                               if (!empty($todoitems)) {

                                   $transactionmodel = new Transactions();
                                   $transactionmodel->user_id = $user_id;
                                   $transactionmodel->landlord_id = $todomodel->landlord_id;
                                   $transactionmodel->property_id = $todomodel->property_id;
                                   $transactionmodel->renovation_quote_id = $todomodel->renovation_quote_id;
                                   $transactionmodel->todo_id = $todo_id;
                                   $transactionmodel->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                                   $transactionmodel->amount = $amountwithoutsst;
                                   $transactionmodel->discount = $discount;
                                   $transactionmodel->coins = $goldcoins;
                                   $transactionmodel->sst = $sstafterdiscount;
                                   $transactionmodel->coins_savings = $coins_savings;
                                   $transactionmodel->total_amount = $totalamountafterdiscount;
                                   $transactionmodel->type = 'Payment';
                                   $transactionmodel->reftype = 'Renovation Payment';
                                   $transactionmodel->status = 'Completed';
                                   $transactionmodel->created_at = date('Y-m-d H:i:s');
                                   if ($transactionmodel->save(false)) {
                                       $flag = false;
                                       $lastid = $transactionmodel->id;
                                       $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                       $transactionmodel->reference_no = $reference_no;
                                       $transactionmodel->save(false);
                                       if (!empty($todoitems)) {
                                           $totalplatform_deductible = 0;
                                           $totaldeductfromuser = 0;
                                           $receiverbalance = Users::getbalance($systemaccount->id);
                                           $senderbalance = Users::getbalance($todomodel->landlord_id);
                                           foreach ($todoitems as $todoitem) {

                                               $totaldeductfromuser += $todoitem->price;
                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->transaction_id = $lastid;
                                               $transactionitemmodel->sender_id = $todomodel->landlord_id;
                                               $transactionitemmodel->receiver_id = $systemaccount->id;
                                               $transactionitemmodel->amount = $todoitem->price;
                                               $transactionitemmodel->total_amount = $todoitem->price;

                                               $transactionitemmodel->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel->newsenderbalance = $senderbalance - $totalamountafterdiscount;
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance + $totalamount;
                                               $transactionitemmodel->type = 'Payment';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }


                                           }
                                           //var_dump($flag);exit;
                                           if ($flag) {
                                               if($goldcoins>0) {
                                                   Yii::$app->common->deductgoldcoinspurchase($user_id, $goldcoins, $lastid);
                                               }
                                               $gold_coins = $totalamountafterdiscountwithoutsst*1.5;
                                               Yii::$app->common->addgoldcoinspurchase($user_id,$gold_coins,$lastid);

//                                               if ($goldcoins > 0) {
//                                                   $usercoinsbalance = Users::getcoinsbalance($user_id);
//                                                   $goldtransaction = new GoldTransactions();
//                                                   $goldtransaction->user_id = $user_id;
//                                                   $goldtransaction->gold_coins = $goldcoins;
//                                                   $goldtransaction->transaction_id = $lastid;
//                                                   $goldtransaction->olduserbalance = $usercoinsbalance;
//                                                   $goldtransaction->newuserbalance = $usercoinsbalance - $goldcoins;
//                                                   $goldtransaction->reftype = 'In App Purchase';
//                                                   $goldtransaction->created_at = date('Y-m-d H:i:s');
//                                                   if ($goldtransaction->save(false)) {
//                                                       Users::updatecoinsbalance($usercoinsbalance - $goldcoins, $user_id);
//                                                   }
//                                               }
                                               $updatesenderbalance = Users::updatebalance($senderbalance - $totalamountafterdiscount, $todomodel->landlord_id);
                                               $updatereceiverbalance = Users::updatebalance($receiverbalance + $totalamount, $systemaccount->id);
                                               if ($updatereceiverbalance && $updatesenderbalance) {
                                                   $todomodel->status = 'Paid';
                                                   $todomodel->save(false);
                                                   $todomodel->renovationquote->status = 'Work In Progress';
                                                   $todomodel->renovationquote->save(false);
                                                   $transaction->commit();
                                                   return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                               } else {
                                                   $transaction->rollBack();
                                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                               }
                                           } else {
                                               $transaction->rollBack();

                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }

                                   } else {
                                       return array('status' => 0, 'message' => $transactionmodel->getErrors());

                                   }

                               }


                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       } else if ($status == 'Rejected') {
                           $todomodel->status = $status;
                           if ($todomodel->save()) {
                               $transaction->commit();
                               return array('status' => 1, 'message' => 'You have rejected payment successfully.');

                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }
                   }else{
                       return array('status' => 0, 'message' => 'Data not found.');

                   }
               } catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }
               break;
           case "Insurance";
               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if($todomodel->status == 'Unpaid') {
                       if ($status == 'Accepted') {
                           $totalpayableamount = $todomodel->total;
                           $stamp_duty = $todomodel->stamp_duty;
                           $totalamount = $amount;
                           $amountwithoutsst = $todomodel->subtotal;
                           $totaldiscount = $discount+$coins_savings;
                           $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings ;
                           $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                           $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount+$stamp_duty;
                           $senderbalance = Users::getbalance($todomodel->landlord_id);
                           if ($totalamountafterdiscount > $senderbalance) {
                               return array('status' => 0, 'message' => 'You don`t have enough balance.Please recharge your wallet.');

                           }
                           $todomodel->status = $status;
                           if ($todomodel->save()) {
                               $todoitems = $todomodel->todoItems;
                               $sst = $todomodel->sst;

                               if (!empty($todoitems)) {

                                   $transactionmodel = new Transactions();
                                   $transactionmodel->landlord_id = $todomodel->landlord_id;
                                   $transactionmodel->property_id = $todomodel->property_id;
                                   $transactionmodel->todo_id = $todo_id;
                                   $transactionmodel->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                                   $transactionmodel->amount = $amountwithoutsst;
                                   //$transactionmodel->amount = ($totaldiscount>0)?$totalamount:$amountwithoutsst;
                                   $transactionmodel->sst = $sstafterdiscount;
                                   $transactionmodel->discount = $discount;
                                   $transactionmodel->coins = $goldcoins;
                                   $transactionmodel->coins_savings = $coins_savings;
                                   $transactionmodel->total_amount = $totalamountafterdiscount;
                                   $transactionmodel->type = 'Payment';
                                   $transactionmodel->reftype = 'Insurance';
                                   $transactionmodel->status = 'Completed';
                                   $transactionmodel->created_at = date('Y-m-d H:i:s');
                                   if ($transactionmodel->save()) {
                                       $flag = false;
                                       $lastid = $transactionmodel->id;
                                       $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                       $transactionmodel->reference_no = $reference_no;
                                       $transactionmodel->save(false);
                                       if (!empty($todoitems)) {
                                           $totalplatform_deductible = 0;
                                           $totaldeductfromuser = 0;
                                           $receiverbalance = Users::getbalance($systemaccount->id);
                                           foreach ($todoitems as $todoitem) {
                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->transaction_id = $lastid;
                                               $transactionitemmodel->sender_id = $todomodel->landlord_id;
                                               $transactionitemmodel->receiver_id = $systemaccount->id;
                                               $transactionitemmodel->amount = $todoitem->price;
                                               $transactionitemmodel->total_amount = $todoitem->price;
                                               $transactionitemmodel->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel->newsenderbalance = $senderbalance - $totalamountafterdiscount;
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance + $totalamount;
                                               $transactionitemmodel->type = 'Payment';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }

                                           }
                                           if ($flag) {

                                               if($goldcoins>0) {
                                                   Yii::$app->common->deductgoldcoinspurchase($user_id, $goldcoins, $lastid);
                                               }
                                               $gold_coins = $totalamountafterdiscountwithoutsst*1.5;
                                               Yii::$app->common->addgoldcoinspurchase($user_id,$gold_coins,$lastid);
                                               $updatesenderbalance = Users::updatebalance($senderbalance - $totalamountafterdiscount, $todomodel->landlord_id);
                                               $updatereceiverbalance = Users::updatebalance($receiverbalance + $totalamount, $systemaccount->id);
                                               if ($updatereceiverbalance && $updatesenderbalance) {
                                                   $todomodel->status = 'Paid';
                                                   $todomodel->save(false);
                                                   $transaction->commit();
                                                   return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                               } else {
                                                   $transaction->rollBack();
                                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                               }
                                           } else {
                                               $transaction->rollBack();

                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }

                                   } else {
                                       return array('status' => 0, 'message' => $transactionmodel->getErrors());

                                   }

                               }


                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       } else if ($status == 'Rejected') {
                           $todomodel->status = $status;
                           if ($todomodel->save()) {
                               $transaction->commit();
                               return array('status' => 1, 'message' => 'You have rejected payment successfully.');

                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }
                   }else{
                       return array('status' => 0, 'message' => 'Data not found.');

                   }
               } catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }

               break;
           case "General";
               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if($todomodel->status == 'Unpaid') {
                       if ($status == 'Accepted') {
                           $todomodel->status = $status;
                           if ($todomodel->save()) {
                               $todoitems = $todomodel->todoItems;
                               $totalpayableamount = $todomodel->total;
                               $totalamount = $amount;
                               $amountwithoutsst = $todomodel->subtotal;
                               $totaldiscount = $discount+$coins_savings;
                               $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                               if($todomodel->is_sst==1){
                                   $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                                   $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount;

                               }else{
                                   $sstafterdiscount = $todomodel->sst;
                                   $totalamountafterdiscount = $totalamountafterdiscount;
                               }


                               if ($todomodel->pay_from == 'Tenant') {
                                   $senderbalance = Users::getbalance($todomodel->user_id);

                               } else {
                                   $senderbalance = Users::getbalance($todomodel->landlord_id);

                               }

                               if ($totalamountafterdiscount > $senderbalance) {
                                   $transaction->rollBack();
                                   return array('status' => 0, 'message' => 'You don`t have enough balance.Please recharge your wallet.');

                               }
                               if (!empty($todoitems)) {

                                   $transactionmodel = new Transactions();
                                   if ($todomodel->pay_from == 'Tenant') {
                                       $transactionmodel->user_id = $todomodel->user_id;

                                   } else {
                                       $transactionmodel->landlord_id = $todomodel->landlord_id;

                                   }
                                   $transactionmodel->property_id = $todomodel->property_id;
                                   $transactionmodel->todo_id = $todo_id;
                                   $transactionmodel->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                                   $transactionmodel->amount = $amountwithoutsst;
                                   $transactionmodel->sst = $sstafterdiscount;
                                   $transactionmodel->discount = $discount;
                                   $transactionmodel->coins = $goldcoins;
                                   $transactionmodel->coins_savings = $coins_savings;
                                   $transactionmodel->total_amount = $totalamountafterdiscount;
                                   $transactionmodel->type = 'Payment';
                                   $transactionmodel->reftype = 'General';
                                   $transactionmodel->status = 'Completed';
                                   $transactionmodel->created_at = date('Y-m-d H:i:s');
                                   if ($transactionmodel->save()) {
                                       $flag = false;
                                       $lastid = $transactionmodel->id;
                                       $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                       $transactionmodel->reference_no = $reference_no;
                                       $transactionmodel->save(false);
                                       if (!empty($todoitems)) {
                                           $totalplatform_deductible = 0;
                                           $totaldeductfromuser = 0;
                                           $receiverbalance = Users::getbalance($systemaccount->id);
                                           foreach ($todoitems as $todoitem) {
                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->transaction_id = $lastid;
                                               if ($todomodel->pay_from == 'Tenant') {
                                                   $transactionitemmodel->sender_id = $todomodel->user_id;

                                               } else {
                                                   $transactionitemmodel->sender_id = $todomodel->landlord_id;
                                               }

                                               $transactionitemmodel->receiver_id = $systemaccount->id;
                                               $transactionitemmodel->amount = $todoitem->price;
                                               $transactionitemmodel->total_amount = $todoitem->price;
                                               $transactionitemmodel->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel->newsenderbalance = $senderbalance - $todoitem->price;
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance + $todoitem->price;
                                               $transactionitemmodel->type = 'Payment';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }

                                           }
                                           if ($flag) {
                                               if($goldcoins>0) {
                                                   Yii::$app->common->deductgoldcoinspurchase($user_id, $goldcoins, $lastid);
                                               }
//                                               $gold_coins = $totalamountafterdiscountwithoutsst*1.5;
//                                               Yii::$app->common->addgoldcoinspurchase($user_id,$gold_coins,$lastid);
                                               $updatesenderbalance = Users::updatebalance($senderbalance - $totalamountafterdiscount, ($todomodel->pay_from == 'Tenant') ? $todomodel->user_id : $todomodel->landlord_id);
                                               $updatereceiverbalance = Users::updatebalance($receiverbalance + $totalamount, $systemaccount->id);
                                               if ($updatereceiverbalance && $updatesenderbalance) {
                                                   $todomodel->status = 'Paid';
                                                   $todomodel->save(false);
                                                   $transaction->commit();
                                                   return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                               } else {
                                                   $transaction->rollBack();
                                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                               }
                                           } else {
                                               $transaction->rollBack();

                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }

                                   } else {
                                       return array('status' => 0, 'message' => $transactionmodel->getErrors());

                                   }

                               }


                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       } else if ($status == 'Rejected') {
                           $todomodel->status = $status;
                           if ($todomodel->save(false)) {
                               $transaction->commit();
                               return array('status' => 1, 'message' => 'You have rejected payment successfully.');

                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }
                   }else{
                       return array('status' => 0, 'message' => 'Data not found.');

                   }
               } catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }

               break;
           case "Defect Report";
               $transaction = Yii::$app->db->beginTransaction();

               try {
                   if($todomodel->status=='Unpaid') {
                       if ($status == 'Accepted') {
                           $todomodel->status = $status;
                           if ($todomodel->save()) {
                               $todoitems = $todomodel->todoItems;
                               $totalpayableamount = $todomodel->total;
                               $senderbalance = Users::getbalance($todomodel->user_id);

                               if ($totalpayableamount > $senderbalance) {
                                   $transaction->rollBack();
                                   return array('status' => 0, 'message' => 'You don`t have enough balance.Please recharge your wallet.');

                               }
                               if (!empty($todoitems)) {
                                   $totalamount = $amount;
                                   $totalamountafterdiscount = $totalamount;


                                   $transactionmodel = new Transactions();
                                   if ($todomodel->pay_from == 'Tenant') {
                                       $transactionmodel->user_id = $todomodel->user_id;

                                   } else {
                                       $transactionmodel->landlord_id = $todomodel->user_id;

                                   }
                                   $transactionmodel->property_id = $todomodel->property_id;
                                   $transactionmodel->todo_id = $todo_id;
                                   $transactionmodel->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                                   $transactionmodel->amount = $todomodel->subtotal;
                                   $transactionmodel->sst = $todomodel->sst;
                                   $transactionmodel->discount = $discount;
                                   $transactionmodel->coins = $goldcoins;
                                   $transactionmodel->coins_savings = $coins_savings;
                                   $transactionmodel->total_amount = $totalamountafterdiscount;
                                   $transactionmodel->type = 'Payment';
                                   $transactionmodel->reftype = 'Defect Report';
                                   $transactionmodel->status = 'Completed';
                                   $transactionmodel->created_at = date('Y-m-d H:i:s');
                                   if ($transactionmodel->save()) {
                                       $flag = false;
                                       $lastid = $transactionmodel->id;
                                       $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                       $transactionmodel->reference_no = $reference_no;
                                       $transactionmodel->save(false);
                                       if (!empty($todoitems)) {
                                           $totalplatform_deductible = 0;
                                           $totaldeductfromuser = 0;
                                           $receiverbalance = Users::getbalance($systemaccount->id);
                                           foreach ($todoitems as $todoitem) {
                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->transaction_id = $lastid;
                                               if ($todomodel->pay_from == 'Tenant') {
                                                   $transactionitemmodel->sender_id = $todomodel->user_id;

                                               } else {
                                                   $transactionitemmodel->sender_id = $todomodel->landlord_id;
                                               }

                                               $transactionitemmodel->receiver_id = $systemaccount->id;
                                               $transactionitemmodel->amount = $todoitem->price;
                                               $transactionitemmodel->total_amount = $todoitem->price;
                                               $transactionitemmodel->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel->newsenderbalance = $senderbalance - $todoitem->price;
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance + $todoitem->price;
                                               $transactionitemmodel->type = 'Payment';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }

                                           }
                                           if ($flag) {
                                               if($goldcoins>0) {
                                                   Yii::$app->common->deductgoldcoinspurchase($user_id, $goldcoins, $lastid);
                                               }
//                                               $gold_coins = $totalamountafterdiscount*1.5;
//                                               Yii::$app->common->addgoldcoinspurchase($user_id,$gold_coins,$lastid);
                                               $updatesenderbalance = Users::updatebalance($senderbalance - $totalamountafterdiscount, ($todomodel->pay_from == 'Tenant') ? $todomodel->user_id : $todomodel->user_id);
                                               $updatereceiverbalance = Users::updatebalance($receiverbalance + $totalamount, $systemaccount->id);
                                               if ($updatereceiverbalance && $updatesenderbalance) {
                                                   $todomodel->updated_by = $todomodel->user_id;
                                                   $todomodel->status = 'In Progress';
                                                   $todomodel->save(false);
                                                   $transaction->commit();
                                                   return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                               } else {
                                                   $transaction->rollBack();
                                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                               }
                                           } else {
                                               $transaction->rollBack();

                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       }

                                   } else {
                                       return array('status' => 0, 'message' => $transactionmodel->getErrors());

                                   }

                               }


                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       } else if ($status == 'Rejected') {
                           $todomodel->status = 'Closed';
                           $todomodel->updated_by = $todomodel->user_id;
                           if ($todomodel->save()) {
                               $transaction->commit();
                               return array('status' => 1, 'message' => 'You have rejected payment successfully.');

                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }
                   }elseif($todomodel->status=='Pending'){
                       if ($status == 'Accepted') {
                           $todomodel->status = 'In Progress';
                           $todomodel->updated_at = date('Y-m-d H:i:s');
                           if ($todomodel->save()) {
                               $transaction->commit();
                               return array('status' => 1, 'message' => 'You have accepted request successfully.');



                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       } else if ($status == 'Rejected') {
                           $todomodel->status = 'Closed';
                           if ($todomodel->save()) {
                               $transaction->commit();
                               return array('status' => 1, 'message' => 'You have rejected defect report successfully.');

                           } else {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }

                   }else{
                       return array('status' => 0, 'message' => 'Data not found.');

                   }
               } catch (Exception $e) {
                   // # if error occurs then rollback all transactions
                   $transaction->rollBack();
               }

               break;
           case "Appointment";
               if ($status == 'Completed') {
                   $todomodel->status = 'Completed';
                   $todomodel->updated_at = date("Y-m-d H:i:s");
                   if ($todomodel->save(false)) {
                       return array('status' => 1, 'message' => 'You have completed appointment successfully.');

                   }
               } else if ($status == 'Cancelled') {
                   $todomodel->status = 'Cancelled';
                   $todomodel->updated_at = date("Y-m-d H:i:s");
                   if ($todomodel->save(false)) {
                       return array('status' => 1, 'message' => 'You have cancelled appointment successfully.');

                   }
               }
               break;
           case "Renovation Quote";
               if ($status == 'Accepted') {
                   $todomodel->status = 'Approved';
                   $todomodel->updated_at = date("Y-m-d H:i:s");
                   if ($todomodel->save(false)) {
                       $todomodel->renovationquote->status = 'Approved';
                       $todomodel->renovationquote->save(false);
                       return array('status' => 1, 'message' => 'You have accepted renovation quote successfully.');

                   }
               } else if ($status == 'Rejected') {
                   $todomodel->status = 'Rejected';
                   $todomodel->updated_at = date("Y-m-d H:i:s");
                   if ($todomodel->save(false)) {
                       $todomodel->renovationquote->status = 'Rejected';
                       $todomodel->renovationquote->save(false);
                       return array('status' => 1, 'message' => 'You have Rejected renovation quote successfully.');

                   }
               }
               break;
           case "Service";
               if (($todomodel->service_type == 'Handyman' || $todomodel->service_type == 'Mover') && $todomodel->status == 'Pending') {

                   if ($status == 'Accepted') {
                       $todomodel->status = 'Accepted';
                       $todomodel->updated_at = date("Y-m-d H:i:s");
                       if ($todomodel->save(false)) {
                           $todomodel->servicerequest->status = 'Accepted';
                           $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                           if ($todomodel->servicerequest->save(false)) {
                               return array('status' => 1, 'message' => 'You have accepted request successfully.');

                           } else {
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       } else {
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }

                   } else if ($status == 'Rejected') {
                       $todomodel->status = 'Rejected';
                       $todomodel->updated_at = date("Y-m-d H:i:s");
                       if ($todomodel->save(false)) {
                           $todomodel->servicerequest->status = 'Rejected';
                           $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                           if ($todomodel->servicerequest->save(false)) {
                               $vendor = Users::findOne($todomodel->vendor_id);
                               $vendor->current_status = 'Free';
                               $vendor->save(false);
                               return array('status' => 1, 'message' => 'You have rejected request successfully.');

                           } else {
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       } else {
                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       }
                   }
               } else if (($todomodel->service_type == 'Handyman' || $todomodel->service_type == 'Mover') && $todomodel->status == 'Unpaid') {
                   $transaction = Yii::$app->db->beginTransaction();

                   try {

                       if ($status == 'Accepted') {
                           $todoitems = $todomodel->todoItems;
                           $servicerequestmodel = ServiceRequests::findOne($todomodel->service_request_id);
                           $totalpayableamount = $todomodel->total;
                           $sst = $todomodel->sst;
                           $totaldiscount = $discount+$coins_savings;
                           $amountwithoutsst = $todomodel->subtotal;
                           $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                           $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                           $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount;

                           $senderbalance = Users::getbalance($todomodel->user_id);
                           if ($totalpayableamount > $senderbalance) {
                               return array('status' => 0, 'message' => 'You don`t have enough balance.Please topup your wallet.');

                           }
                           if (!empty($todoitems)) {
                               $totalamount = $amount;
                               $receiverbalance = Users::getbalance($systemaccount->id);
                               $transactionmodel = new Transactions();
                               $transactionmodel->user_id = $todomodel->user_id;
                               $transactionmodel->property_id = $todomodel->property_id;
                               $transactionmodel->todo_id = $todo_id;
                               $transactionmodel->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                               $transactionmodel->amount = $amountwithoutsst;
                               //$transactionmodel->amount = ($totaldiscount>0)?$totalamount:$amountwithoutsst;
                               $transactionmodel->sst = $sstafterdiscount;
                               $transactionmodel->discount = $discount;
                               $transactionmodel->coins = $goldcoins;
                               $transactionmodel->coins_savings = $coins_savings;
                               $transactionmodel->total_amount = $totalamountafterdiscount;
                               $transactionmodel->type = 'Payment';
                               $transactionmodel->reftype = 'Service';
                               $transactionmodel->status = 'Completed';
                               $transactionmodel->created_at = date('Y-m-d H:i:s');
                               if ($transactionmodel->save()) {
                                   $flag = false;
                                   $lastid = $transactionmodel->id;
                                   $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                   $transactionmodel->reference_no = $reference_no;
                                   $transactionmodel->save(false);
                                   if (!empty($todoitems)) {
                                       $totalplatform_deductible = 0;
                                       $totaldeductfromuser = 0;

                                       foreach ($todoitems as $todoitem) {
                                           $transactionitemmodel = new TransactionsItems();
                                           $transactionitemmodel->transaction_id = $lastid;
                                           $transactionitemmodel->sender_id = $todomodel->user_id;
                                           $transactionitemmodel->receiver_id = $systemaccount->id;
                                           $transactionitemmodel->amount = $todoitem->price;
                                           $transactionitemmodel->total_amount = $todoitem->price;
                                           $transactionitemmodel->oldsenderbalance = $senderbalance;
                                           $transactionitemmodel->newsenderbalance = $senderbalance - $todoitem->price;
                                           $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                           $transactionitemmodel->newreceiverbalance = $receiverbalance + $todoitem->price;
                                           $transactionitemmodel->type = 'Payment';
                                           $transactionitemmodel->status = 'Completed';
                                           $transactionitemmodel->description = $todoitem->description;
                                           $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                           if (!($flag = $transactionitemmodel->save(false))) {
                                               $transaction->rollBack();
                                               break;
                                           }

                                       }
                                       if ($flag) {
                                           if($goldcoins>0) {
                                               Yii::$app->common->deductgoldcoinspurchase($user_id, $goldcoins, $lastid);
                                           }
                                           $gold_coins = $totalamountafterdiscountwithoutsst*1.5;
                                           Yii::$app->common->addgoldcoinspurchase($user_id,$gold_coins,$lastid);
                                           $updatesenderbalance = Users::updatebalance($senderbalance - $totalamountafterdiscount, $todomodel->user_id);
                                           $updatereceiverbalance = Users::updatebalance($receiverbalance + $totalamount, $systemaccount->id);
                                           if ($updatereceiverbalance && $updatesenderbalance) {
                                               $todomodel->payment_date = date('Y-m-d H:i:s');
                                               $todomodel->status = 'Confirmed';
                                               if($todomodel->save(false)){
                                                   $servicerequestmodel->status = 'Confirmed';
                                                   $servicerequestmodel->updated_at = date('Y-m-d H:i:s');
                                                   if($servicerequestmodel->save(false)){
                                                       $transaction->commit();
                                                       return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                                   }else{
                                                       $transaction->rollBack();
                                                       return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');


                                                   }
                                               }else{
                                                   $transaction->rollBack();
                                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                               }

                                           } else {
                                               $transaction->rollBack();
                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       } else {
                                           $transaction->rollBack();

                                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                       }
                                   }

                               } else {
                                   return array('status' => 0, 'message' => $transactionmodel->getErrors());

                               }

                           }



                       } else if ($status == 'Rejected') {
                           $todomodel->status = 'Rejected';
                           $todomodel->updated_at = date("Y-m-d H:i:s");
                           if ($todomodel->save(false)) {
                               $todomodel->servicerequest->status = 'Rejected';
                               $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                               if ($todomodel->servicerequest->save(false)) {
                                   $vendor = Users::findOne($todomodel->vendor_id);
                                   $vendor->current_status = 'Free';
                                   $vendor->save(false);
                                   $transaction->commit();
                                   return array('status' => 1, 'message' => 'You have rejected request successfully.');

                               } else {
                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                               }
                           } else {
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }
                   } catch (Exception $e) {
                       $transaction->rollBack();

                       return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       // # if error occurs then rollback all transactions
                   }


               } else if (($todomodel->service_type == 'Cleaner' ) && $todomodel->status == 'Unpaid') {
                   $transaction = Yii::$app->db->beginTransaction();

                   try {

                       if ($status == 'Accepted') {
                           $platformfees =  Yii::$app->common->getplatformfees('Cleaner');
                           $otherfees = 100;
                           $platformfeesapplied = 0;
                           if(!empty($platformfees)){
                               $platformfeesapplied = $platformfees['platform_fees'];
                               $otherfees = 100 - $platformfeesapplied;
                           }

                           $todoitems = $todomodel->todoItems;
                           $servicerequestmodel = ServiceRequests::findOne($todomodel->service_request_id);
                           $totalamount = $amount;
                           $amountwithoutsst = $todomodel->subtotal;
                           $totaldiscount = $discount+$coins_savings;
                           $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                           $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                           $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount;
                           $systemaccount = Yii::$app->common->getsystemaccount();
                           $systemaccountbalance = $systemaccount->wallet_balance;

                           $senderbalance = Users::getbalance($todomodel->user_id);
                           $receiverbalance = Users::getbalance($todomodel->vendor_id);

                           if ($totalamountafterdiscount > $senderbalance) {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'You don`t have enough balance.Please topup your wallet.');

                           }
                           if (!empty($todoitems)) {

                               $transactionmodel = new Transactions();
                               $transactionmodel->user_id = $todomodel->user_id;
                               $transactionmodel->property_id = $todomodel->property_id;
                               $transactionmodel->vendor_id = $todomodel->vendor_id;
                               $transactionmodel->todo_id = $todo_id;
                               $transactionmodel->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                               $transactionmodel->amount = $amountwithoutsst;
                               //$transactionmodel->amount = ($totaldiscount>0)?$totalamount:$amountwithoutsst;;
                               $transactionmodel->sst = $sstafterdiscount;
                               $transactionmodel->discount = $discount;
                               $transactionmodel->coins = $goldcoins;
                               $transactionmodel->coins_savings = $coins_savings;
                               $transactionmodel->total_amount = $totalamountafterdiscount;
                               $transactionmodel->type = 'Payment';
                               $transactionmodel->reftype = 'Service';
                               $transactionmodel->status = 'Completed';
                               $transactionmodel->created_at = date('Y-m-d H:i:s');
                               if ($transactionmodel->save()) {
                                   $flag = false;
                                   $lastid = $transactionmodel->id;
                                   $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                   $transactionmodel->reference_no = $reference_no;
                                   $transactionmodel->save(false);
                                   if (!empty($todoitems)) {
                                       $totalplatform_added = 0;
                                       $totaladdedtovendor = 0;

                                       foreach ($todoitems as $todoitem) {
                                           if($platformfeesapplied > 0){

                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->transaction_id = $lastid;
                                               $transactionitemmodel->sender_id = $todomodel->user_id;
                                               $transactionitemmodel->receiver_id = $todomodel->vendor_id;
                                               $transactionitemmodel->amount = $todoitem->price;
                                               $transactionitemmodel->total_amount = ($todoitem->price*$otherfees/100);
                                               $transactionitemmodel->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel->newsenderbalance = $senderbalance - ($todoitem->price*$otherfees/100);
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance + ($todoitem->price*$otherfees/100);
                                               $transactionitemmodel->type = 'Payment';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }
                                               $totaladdedtovendor +=   $transactionitemmodel->total_amount;

                                               $transactionitemmodel1 = new TransactionsItems();
                                               $transactionitemmodel1->transaction_id = $lastid;
                                               $transactionitemmodel1->sender_id = $todomodel->user_id;
                                               $transactionitemmodel1->receiver_id = $systemaccount->id;
                                               $transactionitemmodel1->amount = $todoitem->price;
                                               $transactionitemmodel1->total_amount = ($todoitem->price*$platformfeesapplied/100);
                                               $transactionitemmodel1->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel1->newsenderbalance = $senderbalance - ($todoitem->price*$platformfeesapplied/100);
                                               $transactionitemmodel1->oldreceiverbalance = $systemaccountbalance;
                                               $transactionitemmodel1->newreceiverbalance = $systemaccountbalance + ($todoitem->price*$platformfeesapplied/100);
                                               $transactionitemmodel1->type = 'Payment';
                                               $transactionitemmodel1->status = 'Completed';
                                               $transactionitemmodel1->description = $todoitem->description;
                                               $transactionitemmodel1->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel1->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }
                                               $totalplatform_added += $transactionitemmodel1->total_amount;

                                           }else {
                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->transaction_id = $lastid;
                                               $transactionitemmodel->sender_id = $todomodel->user_id;
                                               $transactionitemmodel->receiver_id = $todomodel->vendor_id;
                                               $transactionitemmodel->amount = $todoitem->price;
                                               $transactionitemmodel->total_amount = $todoitem->price;
                                               $transactionitemmodel->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel->newsenderbalance = $senderbalance - $todoitem->price;
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance + $todoitem->price;
                                               $transactionitemmodel->type = 'Payment';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }
                                               $totaladdedtovendor +=   $transactionitemmodel->total_amount;
                                           }

                                       }
                                       if ($flag) {
                                           if($goldcoins>0) {
                                               Yii::$app->common->deductgoldcoinspurchase($user_id, $goldcoins, $lastid);
                                           }
                                           $gold_coins = $totalamountafterdiscountwithoutsst*1.5;
                                           Yii::$app->common->addgoldcoinspurchase($user_id,$gold_coins,$lastid);
                                           $updatesenderbalance = Users::updatebalance($senderbalance - $totalamountafterdiscount, $todomodel->user_id);
                                           $updatereceiverbalance = Users::updatebalance($receiverbalance + $totaladdedtovendor, $todomodel->vendor_id);
                                           $updatesystemaccountbalance = Users::updatebalance($systemaccountbalance+$totalplatform_added+$sstafterdiscount,$systemaccount->id);

                                           if ($updatereceiverbalance && $updatesenderbalance && $updatesystemaccountbalance) {
                                               $todomodel->payment_date = date('Y-m-d H:i:s');
                                               $todomodel->status = 'In Progress';
                                               if($todomodel->save(false)){
                                                   $servicerequestmodel->status = 'In Progress';
                                                   $servicerequestmodel->updated_at = date('Y-m-d H:i:s');
                                                   if($servicerequestmodel->save(false)){
                                                       $transaction->commit();
                                                       return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                                   }else{
                                                       $transaction->rollBack();
                                                       return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');


                                                   }
                                               }else{
                                                   $transaction->rollBack();
                                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                               }

                                           } else {
                                               $transaction->rollBack();
                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       } else {
                                           $transaction->rollBack();

                                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                       }
                                   }

                               } else {
                                   return array('status' => 0, 'message' => $transactionmodel->getErrors());

                               }

                           }



                       } else if ($status == 'Rejected') {
                           $todomodel->status = 'Cancelled';
                           $todomodel->updated_at = date("Y-m-d H:i:s");
                           if ($todomodel->save(false)) {
                               $todomodel->servicerequest->status = 'Cancelled';
                               $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                               if ($todomodel->servicerequest->save(false)) {
                                   $vendor = Users::findOne($todomodel->vendor_id);
                                   $vendor->current_status = 'Free';
                                   $vendor->save(false);
                                   $transaction->commit();
                                   return array('status' => 1, 'message' => 'You have rejected request successfully.');

                               } else {
                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                               }
                           } else {
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }
                   } catch (Exception $e) {
                       $transaction->rollBack();

                       return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       // # if error occurs then rollback all transactions
                   }


               }else if (($todomodel->service_type == 'Laundry' ) && $todomodel->status == 'Unpaid') {
                   $transaction = Yii::$app->db->beginTransaction();

                   try {

                       if ($status == 'Accepted') {
                           $platformfees =  Yii::$app->common->getplatformfees('Laundry');
                           $otherfees = 100;
                           $platformfeesapplied = 0;
                           if(!empty($platformfees)){
                               $platformfeesapplied = $platformfees['platform_fees'];
                               $otherfees = 100 - $platformfeesapplied;
                           }

                           $todoitems = $todomodel->todoItems;
                           $servicerequestmodel = ServiceRequests::findOne($todomodel->service_request_id);
                           $totalamount = $amount;
                           $amountwithoutsst = $todomodel->subtotal;
                           $totaldiscount = $discount+$coins_savings;
                           $totalamountafterdiscountwithoutsst = $totalamountafterdiscount = $amountwithoutsst - $discount - $coins_savings;
                           $sstafterdiscount = Yii::$app->common->calculatesst($totalamountafterdiscount);
                           $totalamountafterdiscount = $totalamountafterdiscount+$sstafterdiscount;
                           $systemaccount = Yii::$app->common->getsystemaccount();
                           $systemaccountbalance = $systemaccount->wallet_balance;

                           $senderbalance = Users::getbalance($todomodel->user_id);
                           $receiverbalance = Users::getbalance($todomodel->vendor_id);

                           if ($totalamountafterdiscount > $senderbalance) {
                               $transaction->rollBack();
                               return array('status' => 0, 'message' => 'You don`t have enough balance.Please topup your wallet.');

                           }
                           if (!empty($todoitems)) {

                               $transactionmodel = new Transactions();
                               $transactionmodel->user_id = $todomodel->user_id;
                               $transactionmodel->property_id = $todomodel->property_id;
                               $transactionmodel->vendor_id = $todomodel->vendor_id;
                               $transactionmodel->todo_id = $todo_id;
                               $transactionmodel->promo_code = ($promocode != '') ? $promocodedetails->id : NULL;
                               $transactionmodel->amount = $amountwithoutsst;
                               //$transactionmodel->amount = ($totaldiscount>0)?$totalamount:$amountwithoutsst;;;
                               $transactionmodel->sst = $sstafterdiscount;
                               $transactionmodel->discount = $discount;
                               $transactionmodel->coins = $goldcoins;
                               $transactionmodel->coins_savings = $coins_savings;
                               $transactionmodel->total_amount = $totalamountafterdiscount;
                               $transactionmodel->type = 'Payment';
                               $transactionmodel->reftype = 'Service';
                               $transactionmodel->status = 'Completed';
                               $transactionmodel->created_at = date('Y-m-d H:i:s');
                               if ($transactionmodel->save()) {
                                   $flag = false;
                                   $lastid = $transactionmodel->id;
                                   $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                   $transactionmodel->reference_no = $reference_no;
                                   $transactionmodel->save(false);
                                   if (!empty($todoitems)) {
                                       $totalplatform_added = 0;
                                       $totaladdedtovendor = 0;

                                       foreach ($todoitems as $todoitem) {
                                           if($platformfeesapplied > 0){

                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->transaction_id = $lastid;
                                               $transactionitemmodel->sender_id = $todomodel->user_id;
                                               $transactionitemmodel->receiver_id = $todomodel->vendor_id;
                                               $transactionitemmodel->amount = $todoitem->price;
                                               $transactionitemmodel->total_amount = ($todoitem->price*$otherfees/100);
                                               $transactionitemmodel->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel->newsenderbalance = $senderbalance - ($todoitem->price*$otherfees/100);
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance + ($todoitem->price*$otherfees/100);
                                               $transactionitemmodel->type = 'Payment';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }
                                               $totaladdedtovendor +=   $transactionitemmodel->total_amount;

                                               $transactionitemmodel1 = new TransactionsItems();
                                               $transactionitemmodel1->transaction_id = $lastid;
                                               $transactionitemmodel1->sender_id = $todomodel->user_id;
                                               $transactionitemmodel1->receiver_id = $systemaccount->id;
                                               $transactionitemmodel1->amount = $todoitem->price;
                                               $transactionitemmodel1->total_amount = ($todoitem->price*$platformfeesapplied/100);
                                               $transactionitemmodel1->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel1->newsenderbalance = $senderbalance - ($todoitem->price*$platformfeesapplied/100);
                                               $transactionitemmodel1->oldreceiverbalance = $systemaccountbalance;
                                               $transactionitemmodel1->newreceiverbalance = $systemaccountbalance + ($todoitem->price*$platformfeesapplied/100);
                                               $transactionitemmodel1->type = 'Payment';
                                               $transactionitemmodel1->status = 'Completed';
                                               $transactionitemmodel1->description = $todoitem->description;
                                               $transactionitemmodel1->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel1->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }
                                               $totalplatform_added += $transactionitemmodel1->total_amount;

                                           }else {
                                               $transactionitemmodel = new TransactionsItems();
                                               $transactionitemmodel->transaction_id = $lastid;
                                               $transactionitemmodel->sender_id = $todomodel->user_id;
                                               $transactionitemmodel->receiver_id = $todomodel->vendor_id;
                                               $transactionitemmodel->amount = $todoitem->price;
                                               $transactionitemmodel->total_amount = $todoitem->price;
                                               $transactionitemmodel->oldsenderbalance = $senderbalance;
                                               $transactionitemmodel->newsenderbalance = $senderbalance - $todoitem->price;
                                               $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                               $transactionitemmodel->newreceiverbalance = $receiverbalance + $todoitem->price;
                                               $transactionitemmodel->type = 'Payment';
                                               $transactionitemmodel->status = 'Completed';
                                               $transactionitemmodel->description = $todoitem->description;
                                               $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                               if (!($flag = $transactionitemmodel->save(false))) {
                                                   $transaction->rollBack();
                                                   break;
                                               }
                                               $totaladdedtovendor +=   $transactionitemmodel->total_amount;
                                           }

                                       }
                                       if ($flag) {
                                           if($goldcoins>0) {
                                               Yii::$app->common->deductgoldcoinspurchase($user_id, $goldcoins, $lastid);
                                           }
                                           $gold_coins = $totalamountafterdiscountwithoutsst*1.5;
                                           Yii::$app->common->addgoldcoinspurchase($user_id,$gold_coins,$lastid);
                                           $updatesenderbalance = Users::updatebalance($senderbalance - $totalamountafterdiscount, $todomodel->user_id);
                                           $updatereceiverbalance = Users::updatebalance($receiverbalance + $totaladdedtovendor, $todomodel->vendor_id);
                                           $updatesystemaccountbalance = Users::updatebalance($systemaccountbalance+$totalplatform_added+$sstafterdiscount,$systemaccount->id);

                                           if ($updatereceiverbalance && $updatesenderbalance && $updatesystemaccountbalance) {
                                               $todomodel->payment_date = date('Y-m-d H:i:s');
                                               $todomodel->status = 'In Progress';
                                               if($todomodel->save(false)){
                                                   $servicerequestmodel->status = 'In Progress';
                                                   $servicerequestmodel->updated_at = date('Y-m-d H:i:s');
                                                   if($servicerequestmodel->save(false)){
                                                       $transaction->commit();
                                                       return array('status' => 1, 'message' => 'You have completed payment successfully.');

                                                   }else{
                                                       $transaction->rollBack();
                                                       return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');


                                                   }
                                               }else{
                                                   $transaction->rollBack();
                                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                               }

                                           } else {
                                               $transaction->rollBack();
                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       } else {
                                           $transaction->rollBack();

                                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                       }
                                   }

                               } else {
                                   return array('status' => 0, 'message' => $transactionmodel->getErrors());

                               }

                           }



                       } else if ($status == 'Rejected') {
                           $todomodel->status = 'Cancelled';
                           $todomodel->updated_at = date("Y-m-d H:i:s");
                           if ($todomodel->save(false)) {
                               $todomodel->servicerequest->status = 'Cancelled';
                               $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                               if ($todomodel->servicerequest->save(false)) {
                                   $vendor = Users::findOne($todomodel->vendor_id);
                                   $vendor->current_status = 'Free';
                                   $vendor->save(false);
                                   $transaction->commit();
                                   return array('status' => 1, 'message' => 'You have Cancelled request successfully.');

                               } else {
                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                               }
                           } else {
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }
                   } catch (Exception $e) {
                       $transaction->rollBack();

                       return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       // # if error occurs then rollback all transactions
                   }


               }else if (($todomodel->service_type == 'Handyman' || $todomodel->service_type == 'Mover') && $todomodel->status == 'Refund Requested') {
                   $transaction = Yii::$app->db->beginTransaction();

                   try {

                       if ($status == 'Accepted') {
                           $todoitems = $todomodel->todoItems;
                           $servicerequestmodel = ServiceRequests::findOne($todomodel->service_request_id);

                           if (!empty($todoitems)) {

                               $transactionmodel = new Transactions();
                               $transactionmodel->user_id = $user_id;
                               $transactionmodel->property_id = $todomodel->property_id;
                               $transactionmodel->todo_id = $todo_id;
                               $transactionmodel->amount = $todomodel->total;
                               $transactionmodel->sst = $todomodel->sst;
                               $transactionmodel->total_amount = $todomodel->total;
                               $transactionmodel->type = 'Refund';
                               $transactionmodel->reftype = 'Cancellation Refund';
                               $transactionmodel->status = 'Completed';
                               $transactionmodel->created_at = date('Y-m-d H:i:s');
                               if ($transactionmodel->save(false)) {
                                   $flag = false;
                                   $lastid = $transactionmodel->id;
                                   $reference_no = "TR" . Yii::$app->common->generatereferencenumber($lastid);
                                   $transactionmodel->reference_no = $reference_no;
                                   $transactionmodel->save(false);
                                   if (!empty($todoitems)) {
                                       $totalplatform_deductible = 0;
                                       $totaldeductfromuser = 0;
                                       $receiverbalance = Users::getbalance($user_id);
                                       $systemaccount = Yii::$app->common->getsystemaccount();
                                       $senderbalance = Users::getbalance($systemaccount->id);
                                       foreach ($todoitems as $todoitem) {

                                           $totaldeductfromuser += $todoitem->price;
                                           $transactionitemmodel = new TransactionsItems();
                                           $transactionitemmodel->transaction_id = $lastid;
                                           $transactionitemmodel->sender_id = $systemaccount->id;
                                           $transactionitemmodel->receiver_id = $user_id;
                                           $transactionitemmodel->amount = $todoitem->price;
                                           $transactionitemmodel->total_amount = $todoitem->price;

                                           $transactionitemmodel->oldsenderbalance = $senderbalance;
                                           $transactionitemmodel->newsenderbalance = $senderbalance - $todoitem->price;
                                           $transactionitemmodel->oldreceiverbalance = $receiverbalance;
                                           $transactionitemmodel->newreceiverbalance = $receiverbalance + $todoitem->price;
                                           $transactionitemmodel->type = 'Refund';
                                           $transactionitemmodel->status = 'Completed';
                                           $transactionitemmodel->description = $todoitem->description;
                                           $transactionitemmodel->created_at = date('Y-m-d H:i:s');
                                           if (!($flag = $transactionitemmodel->save(false))) {
                                               $transaction->rollBack();
                                               break;
                                           }




                                       }
                                       if ($flag) {
                                           $updatesenderbalance = Users::updatebalance($systemaccount->wallet_balance - $todomodel->sst - $totaldeductfromuser, $systemaccount->id);
                                           $updatereceiverbalance = Users::updatebalance($receiverbalance + $totaldeductfromuser + $totalplatform_deductible + $todomodel->sst, $user_id);
                                           if ($updatereceiverbalance && $updatesenderbalance) {
                                               $todomodel->status = 'Refunded';
                                               if ($todomodel->save(false)) {
                                                   $servicerequestmodel->status = 'Refunded';
                                                   $servicerequestmodel->updated_at = date('Y-m-d H:i:s');
                                                   $servicerequestmodel->save(false);
                                                   $transaction->commit();
                                                   return array('status' => 1, 'message' => 'You have accepted refund request successfully.');

                                               } else {
                                                   $transaction->rollBack();
                                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                               }

                                           } else {
                                               $transaction->rollBack();
                                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                           }
                                       } else {
                                           $transaction->rollBack();

                                           return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                       }
                                   }

                               } else {
                                   $transaction->rollBack();
                                   return array('status' => 0, 'message' => $transactionmodel->getErrors());

                               }

                           } else {
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }


                       } else if ($status == 'Rejected') {
                           $todomodel->status = 'Refund Rejected';
                           $todomodel->updated_at = date("Y-m-d H:i:s");
                           if ($todomodel->save(false)) {
                               $todomodel->servicerequest->status = 'Refund Rejected';
                               $todomodel->servicerequest->updated_at = date("Y-m-d H:i:s");
                               if ($todomodel->servicerequest->save(false)) {
                                   $vendor = Users::findOne($todomodel->vendor_id);
                                   $vendor->current_status = 'Free';
                                   $vendor->save(false);
                                   $transaction->commit();
                                   return array('status' => 1, 'message' => 'You have Rejected Refund request successfully.');

                               } else {
                                   return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                               }
                           } else {
                               return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                           }
                       }
                   } catch (Exception $e) {
                       $transaction->rollBack();

                       return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                       // # if error occurs then rollback all transactions
                   }

               }else{
                   return array('status' => 0, 'message' => 'Data not found.');

               }
               break;

       }
   }

   public function actionApplypromocode(){
       $method = $_SERVER['REQUEST_METHOD'];
       if ($method != 'POST') {
           return array('status' => 0, 'message' => 'Bad request.');
       } else {
           if (!empty($_POST) && isset($_POST['amount']) && $_POST['amount']!='' && isset($_POST['promo_code']) && $_POST['promo_code']!='') {

               $user_id = $this->user_id;
               $promocode = $_POST['promo_code'];
               $amount = $_POST['amount'];
               $date = date('Y-m-d');
               $promocodeexist = PromoCodes::find()->where(['promo_code'=>trim($_POST['promo_code']),'status'=>'Active'])->one();
               if (empty($promocodeexist)){
                   return array('status' => 0, 'message' => 'Please enter Valid Promo Code.');
               }
               if ($promocodeexist->expiry_date<$date){
                   return array('status' => 0, 'message' => 'Promo code expired.Please try other');

               }
               if($promocodeexist->type=='Fixed'){
                   $discountamount = $promocodeexist->discount;
               }elseif ($promocodeexist->type=='Percentage'){
                   $countpercentage = number_format($amount * $promocodeexist->discount / 100, 2, '.', '');
                   $discountamount = $countpercentage;

               }
               if($discountamount>$amount){
                   return array('status' => 0, 'message' => 'Promo code is not applicable for this amount.');
               }else{
                   return array('status' => 1, 'data' => array('discountamout'=>$discountamount));
               }





           }else{
               return array('status' => 0, 'message' => 'Please enter mandatory fields.');

           }
       }
   }

    public function actionTransferproperty(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['property_id']) && $_POST['property_id']!='') {

                $user_id = $this->user_id;
                $propertyexist = Properties::find()->where(['agent_id'=>$user_id,'id'=>$_POST['property_id']])->one();
                if(empty($propertyexist)){
                    return array('status' => 0, 'message' => 'Data Not Found.');

                }
                $tenant_id = $_POST['tenant_id'];
                unset($_POST['tenant_id']);
                $todomodel = new TodoList();
                $todomodel->scenario = 'transferrequest';
                $todomodel->agent_id = $user_id;
                $todomodel->user_id = $tenant_id;
                $todomodel->attributes = Yii::$app->request->post();
                if ($todomodel->validate()){
                    $todomodel->reftype = 'Transfer Request';
                    $todomodel->status = 'Pending';
                    $todomodel->created_at = date('Y-m-d H:i:s');
                    if ($todomodel->save()){
                          return array('status' => 1, 'message' => 'You have sent request successfully.');


                    }else{
                        return array('status' => 0, 'message' => $todomodel->getErrors());

                    }

                }else{
                    return array('status' => 0, 'message' => $todomodel->getErrors());

                }



            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionSearchlandlord(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['mobile_no']) && $_POST['mobile_no']!='') {

                $user_id = $this->user_id;

                $mobile_no = $_POST['mobile_no'];
                $landlorddetails = Users::find()->select('id,full_name')->where(['contact_no'=>trim($mobile_no),'status'=>'1','role'=>'User'])->asArray()->one();
                if(!empty($landlorddetails)){
                    return array('status' => 1, 'data' => $landlorddetails);

                }else{
                    return array('status' => 0, 'message' => 'Owner Not Found.');

                }



            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }

    public function actionDeleteproperty(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['property_id']) && $_POST['property_id']!='') {

                $user_id = $this->user_id;

                $property_id = $_POST['property_id'];
                $propertydetails = Properties::find()->where(['id'=>$property_id])->one();
                if(!empty($propertydetails)){
                    $propertydetails->status = 'Deleted';
                    $propertydetails->updated_at = date('Y-m-d H:i:s');
                    if($propertydetails->save(false)){
                        $usermodel = Users::findOne($user_id);
                        $usermodel->properties_posted = $usermodel->properties_posted - 1;
                        $usermodel->save(false);
                        return array('status' => 1, 'message' => 'You have deleted property successfully.');

                    }else{
                        return array('status' => 0, 'message' => $propertydetails->getErrors());

                    }

                }else{
                    return array('status' => 0, 'message' => 'Data Not Found.');

                }



            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }
    public function actionReportsproperty(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && isset($_POST['property_id']) && $_POST['property_id']!='') {

                $user_id = $this->user_id;

                $property_id = $_POST['property_id'];
                $propertydetails = Properties::find()->where(['id'=>$property_id,'user_id'=>$user_id])->one();
                if(!empty($propertydetails)){
                    $fromdate = date('Y-m-01 00:00:00'); // hard-coded '01' for first day
                    $todate  = date('Y-m-t 11:59:59');
                    $data['cleaningorders'] = ServiceRequests::find()->where(['property_id'=>$property_id,'reftype'=>'Cleaner','status'=>'Completed'])->count();
                    $data['repairs'] = TodoList::find()->where(['property_id'=>$property_id,'reftype'=>'Defect Report','status'=>'Completed'])->count();;
                    return array('status' => 1, 'data' => $data);


                }else{
                    return array('status' => 0, 'message' => 'Data Not Found.');

                }



            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }
    }
    public function actionReportdefect(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $model = new TodoList();
            $model->user_id = $this->user_id;
            $model->scenario = 'reportdefect';
            $model->attributes = Yii::$app->request->post();

            $property = Properties::findOne($model->property_id);
            if ($property->is_managed == 1 ) {
                if ($model->validate()) {
                    $photo = $model->photo;
                    $model->photo = null;
                    $model->landlord_id = $property->user_id;
                    $model->reftype = 'Defect Report';
                    $model->status = 'New';
                    $model->created_at = date('Y-m-d H:i:s');
                    if ($model->save(false)) {
                        $filename = uniqid();
                        $data = Yii::$app->common->processBase64($photo);
                        file_put_contents('uploads/tododocuments/' . $filename . '.' . $data['type'], $data['data']);
                        $tododocument = new TodoDocuments();
                        $tododocument->todo_id = $model->id;
                        $tododocument->document = $filename . '.' . $data['type'];
                        $tododocument->created_at = date('Y-m-d H:i:s');
                        if ($tododocument->save(false)) {

                            return array('status' => 1, 'message' => 'You have submitted defect report successfully.');

                        } else {
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                        }

                    } else {
                        return array('status' => 0, 'message' => $model->getErrors());

                    }

                } else {
                    return array('status' => 0, 'message' => $model->getErrors());

                }


            } else {
                if (isset($_POST['message']) && $_POST['message']!=''){
                    $usermodel = Users::findOne($this->user_id);
                    $landlordemail = $property->user->email;

                    $emailtemplate = EmailTemplates::findOne(['name'=>'Report Defect']);

                    $content = EmailTemplates::getemailtemplate($emailtemplate,$property,$usermodel,'',$_POST['message']);

                    $send = Yii::$app->mailer->compose()
                        ->setFrom('rumahimy@gmail.com')
                        ->setTo($landlordemail)
                        ->setSubject($emailtemplate->subject)
                        ->setHtmlBody($content)
                        ->send();
                    return array('status' => 1, 'message' => 'You have submitted defect report successfully.');

                }else{
                    return array('status' => 0, 'message' => 'Please enter mandatory fields.');

                }

            }
        }
    }
    public function actionBookservice(){
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST) && isset($_POST['service_type']) && $_POST['service_type']!='') {
                $user_id = $this->user_id;
                $type = $_POST['service_type'];
                $model = new ServiceRequests();
                switch ($type) {
                    case "Handyman";
                        if (empty($_POST['pictures'])){
                            return array('status' => 0, 'message' => 'You must upload at least one picture');

                        }

                        $model->scenario = 'bookhandyman';
                        $model->attributes = Yii::$app->request->post();
                        $model->pictures = $_POST['pictures'];
                        if($model->validate()){
                            $model->user_id = $user_id;
                            $model->reftype = $type;

                            $pictures = $model->pictures;
                            $descriptions = $model->descriptions;
                            $model->pictures = null;
                            $model->descriptions = null;
                            $model->date = date('Y-m-d',strtotime($model->date));
                            $model->status = 'New';
                            $model->booked_at = date("Y-m-d H:i:s");
                            $model->created_at = date("Y-m-d H:i:s");
                            if($model->save(false)) {
                                $request_id = $model->id;
                                $reference_no = "SR".Yii::$app->common->generatereferencenumber($request_id);

                                if (!empty($pictures)) {
                                    foreach ($pictures as $key=>$picture) {
                                        $filename = uniqid();

                                        $data = Yii::$app->common->processBase64($picture);

                                        file_put_contents('uploads/servicerequestimages/' . $filename . '.' . $data['type'], $data['data']);
                                        $servicerequestimages = new ServicerequestImages();
                                        $servicerequestimages->description = (isset($descriptions[$key]) && $descriptions[$key]!='')?$descriptions[$key]:'';
                                        $servicerequestimages->service_request_id = $request_id;
                                        $servicerequestimages->reftype = 'useruploadedphotos';
                                        $servicerequestimages->image = 'uploads/servicerequestimages/' . $filename . '.' . $data['type'];
                                        $servicerequestimages->created_at = date('Y-m-d H:i:s');
                                        $servicerequestimages->save(false);
                                    }
                                }
                                $model->reference_no = $reference_no;
                                if($model->save(false)){
                                   $todolist = new TodoList();
                                   $todolist->user_id = $user_id;
                                   $todolist->service_request_id = $request_id;
                                   $todolist->property_id = $model->property_id;
                                   $todolist->reftype = 'Service';
                                   $todolist->service_type = $type;
                                   $todolist->created_at =  date("Y-m-d H:i:s");
                                   $todolist->status = 'New';
                                   if($todolist->save()){
                                       $model->todo_id = $todolist->id;
                                       $model->save(false);
                                       return array('status' => 1, 'message' => 'You have submitted Service Request successfully.');

                                   }else{
                                       return array('status' => 0, 'message' => $todolist->getErrors());

                                   }
                                }
                            }else{
                                return array('status' => 0, 'message' => $model->getErrors());

                            }

                        }else{
                            return array('status' => 0, 'message' => $model->getErrors());

                        }

                    break;
                    case "Mover";
                        $model->attributes = Yii::$app->request->post();
                        $model->user_id = $user_id;
                        $model->reftype = $type;
                        $model->scenario = 'bookmover';
                        if($model->validate()){
                            $model->date = date('Y-m-d',strtotime($model->date));
                            $model->status = 'New';
                            $model->created_at = date("Y-m-d H:i:s");
                            if($model->save()) {
                                $request_id = $model->id;
                                $reference_no = Yii::$app->common->generatereferencenumber($request_id);
                                $model->reference_no = $reference_no;
                                if($model->save(false)){
                                    $todolist = new TodoList();
                                    $todolist->user_id = $user_id;
                                    $todolist->service_request_id = $request_id;
                                    $todolist->property_id = $model->property_id;
                                    $todolist->reftype = 'Service';
                                    $todolist->service_type = $type;
                                    $todolist->created_at =  date("Y-m-d H:i:s");
                                    $todolist->status = 'New';
                                    if($todolist->save()){
                                        $model->todo_id = $todolist->id;
                                        $model->save(false);
                                        return array('status' => 1, 'message' => 'You have submitted Service Request successfully.');

                                    }else{
                                        return array('status' => 0, 'message' => $todolist->getErrors());

                                    }
                                }
                            }else{
                                return array('status' => 0, 'message' => $model->getErrors());

                            }

                        }else{
                            return array('status' => 0, 'message' => $model->getErrors());

                        }

                        break;
                    case "Cleaner";
                        $transaction = Yii::$app->db->beginTransaction();

                        try {
                            $addons = (isset($_POST['addon']) && $_POST['addon'] != '') ? $_POST['addon'] : '';
                            unset($_POST['addon']);
                            $model->attributes = Yii::$app->request->post();
                            $model->user_id = $user_id;
                            $model->reftype = $type;
                            $model->scenario = 'bookcleaner';
                            if ($model->validate()) {
                                $propertydetails = Properties::findOne($model->property_id);
                                $lat = $propertydetails->latitude;
                                $long = $propertydetails->longitude;
                                $harvesformula = ($lat != '' && $long != '') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) ) as distance' : '';
                                $harvesformula1 = ($lat != '' && $long != '') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) )' : '';
                                $distance = 50;
                                $cleaner = Users::find()
                                    ->select('id,latitude,longitude,full_name,email,' . $harvesformula)->where(['current_status' => 'Free', 'role' => 'Cleaner'])->andWhere(['<=', $harvesformula1, $distance])->one();
                                if (empty($cleaner)) {
                                    return array('status' => 0, 'message' => 'There is no Cleaning Company Available in your area.');

                                }
                                $priceperhour = 40;
                                $addonprice = (!empty($addons))?28:0;

                                //print_r($subtotal);exit;
                                $model->date = date('Y-m-d', strtotime($model->date));
                                $model->status = 'New';
                                $model->created_at = date("Y-m-d H:i:s");
                                $model->booked_at = date("Y-m-d H:i:s");
                                if ($model->save()) {
                                    $request_id = $model->id;
                                    $reference_no = Yii::$app->common->generatereferencenumber($request_id);
                                    $model->reference_no = $reference_no;
                                    $model->vendor_id= $cleaner->id;
                                    if ($model->save(false)) {
                                        $todolist = new TodoList();
                                        $todolist->user_id = $user_id;
                                        $todolist->service_request_id = $request_id;
                                        $todolist->property_id = $model->property_id;
                                        $todolist->vendor_id = $cleaner->id;
                                        $todolist->reftype = 'Service';
                                        $todolist->service_type = $type;
                                        $todolist->created_at = date("Y-m-d H:i:s");
                                        $todolist->status = 'New';

                                        if ($todolist->save(false)) {
                                            $todoitems = new TodoItems();
                                            $todoitems->todo_id = $todolist->id;
                                            $todoitems->description = 'Cleaning Services (' . $model->hours . ' hours)';
                                            $todoitems->price = $priceperhour * $model->hours;
                                            $todoitems->created_at = date("Y-m-d H:i:s");
                                            $todoitems->save(false);
                                            if (!empty($addons)) {
                                                $todoitems1 = new TodoItems();
                                                $todoitems1->todo_id = $todolist->id;
                                                $todoitems1->description = 'Cleaning Tools ';
                                                $todoitems1->price = $addonprice;
                                                $todoitems1->created_at = date("Y-m-d H:i:s");
                                                $todoitems1->save(false);
                                            }
                                            $subtotal = ($priceperhour * $model->hours)+$addonprice;
                                            $sst = Yii::$app->common->calculatesst($subtotal);
                                            $total_amount = $subtotal+$sst;
                                            $model->subtotal = $subtotal;
                                            $model->sst = $sst;
                                            $model->total_amount = $total_amount;
                                            $model->todo_id = $todolist->id;
                                            if($model->save(false)) {
                                                $todolist->subtotal = $subtotal;
                                                $todolist->sst = $sst;
                                                $todolist->total = $total_amount;
                                                $todolist->save(false);
                                                $cleaner->current_status = 'Busy';
                                                $cleaner->save(false);
                                                $transaction->commit();
                                                $subject = 'Service order placed';
                                                $textmessage = 'You got one service order pending for action, kindly accept now.';
                                                Yii::$app->common->Savenotification($todolist->vendor_id,$subject,$textmessage,'',$model->property_id,$todolist->id);

                                                Yii::$app->common->Sendpushnotification($todolist->vendor_id,$subject,$textmessage,'Partner');

                                                return array('status' => 1, 'message' => 'You have submitted Service Request successfully.');
                                            }else{
                                                $transaction->rollBack();
                                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                            }
                                        } else {
                                            $transaction->rollBack();

                                            return array('status' => 0, 'message' => $todolist->getErrors());

                                        }
                                    }
                                } else {
                                    $transaction->rollBack();

                                    return array('status' => 0, 'message' => $model->getErrors());

                                }

                            } else {
                                $transaction->rollBack();

                                return array('status' => 0, 'message' => $model->getErrors());

                            }
                        }catch (Exception $e) {
                            // # if error occurs then rollback all transactions
                            $transaction->rollBack();
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                        }

                        break;
                    case "Laundry";
                        $transaction = Yii::$app->db->beginTransaction();

                        try {

                            $model->attributes = Yii::$app->request->post();
                            $model->user_id = $user_id;
                            $model->reftype = $type;
                            $model->scenario = 'booklaundry';
                            if ($model->validate()) {
                                $propertydetails = Properties::findOne($model->property_id);
                                $lat = $propertydetails->latitude;
                                $long = $propertydetails->longitude;
                                $harvesformula = ($lat != '' && $long != '') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) ) as distance' : '';
                                $harvesformula1 = ($lat != '' && $long != '') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) )' : '';
                                $distance = 50;
                                $cleaner = Users::find()
                                    ->select('id,latitude,longitude,full_name,email,' . $harvesformula)->where(['current_status' => 'Free', 'role' => 'Laundry'])->andWhere(['<=', $harvesformula1, $distance])->one();
                                if (empty($cleaner)) {
                                    return array('status' => 0, 'message' => 'Currently there is no Laudry Company Available in your area.');

                                }

                                $model->date = date('Y-m-d', strtotime($model->date));
                                $model->status = 'New';
                                $model->created_at = date("Y-m-d H:i:s");
                                $model->booked_at = date("Y-m-d H:i:s");
                                if ($model->save()) {
                                    $request_id = $model->id;
                                    $reference_no = Yii::$app->common->generatereferencenumber($request_id);
                                    $model->reference_no = $reference_no;
                                    $model->vendor_id= $cleaner->id;
                                    if ($model->save(false)) {
                                        $todolist = new TodoList();
                                        $todolist->user_id = $user_id;
                                        $todolist->service_request_id = $request_id;
                                        $todolist->property_id = $model->property_id;
                                        $todolist->vendor_id = $cleaner->id;
                                        $todolist->reftype = 'Service';
                                        $todolist->service_type = $type;
                                        $todolist->created_at = date("Y-m-d H:i:s");
                                        $todolist->status = 'New';

                                        if ($todolist->save(false)) {
                                            $model->todo_id = $todolist->id;
                                            if($model->save(false)) {
                                                $transaction->commit();
                                                return array('status' => 1, 'message' => 'You have submitted Service Request successfully.');
                                            }else{
                                                $transaction->rollBack();
                                                return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                                            }
                                        } else {
                                            $transaction->rollBack();

                                            return array('status' => 0, 'message' => $todolist->getErrors());

                                        }
                                    }
                                } else {
                                    $transaction->rollBack();

                                    return array('status' => 0, 'message' => $model->getErrors());

                                }

                            } else {
                                $transaction->rollBack();

                                return array('status' => 0, 'message' => $model->getErrors());

                            }
                        }catch (Exception $e) {
                            // # if error occurs then rollback all transactions
                            $transaction->rollBack();
                            return array('status' => 0, 'message' => 'Something went wrong.Please try after sometimes.');

                        }

                        break;
                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }

        }
    }
    public function actionReviews()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST) && isset($_POST['type']) && $_POST['type']!=''){
             $reviews = VendorRatings::find()->joinWith(['vendor' => function (ActiveQuery $query) {
                 return $query->select('id,full_name')
                     ->andWhere(['=', 'rumah_users.role', $_POST['type']]);
             }])->joinWith(['user' => function (ActiveQuery $query) {
                 return $query->select(['id','full_name',new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")]);
             }])->asArray()->all();
                return array('status' => 1, 'data' => $reviews);

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }



        }


    }

    public function actionTransactions()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
                $user_id = $this->user_id;
                $fromdate = (isset($_POST['fromdate']) && !empty($_POST['fromdate']))?(date('Y-m-d 00:00:00',strtotime($_POST['fromdate']))):'';
                $todate = (isset($_POST['todate']) && !empty($_POST['todate']))?(date('Y-m-d 11:59:59',strtotime($_POST['todate']))):'';
                $query = Transactions::find()->where(['user_id'=>$user_id])->orWhere(['landlord_id'=>$user_id]);
                if($fromdate!='' && $todate!=''){
                    // $start = Yii::$app->formatter->asTimestamp($fromdate);
                    //$end = Yii::$app->formatter->asTimestamp($todate);
                    //$query->andWhere(['between', 'date', $start, $end]);

                    $query->andWhere(['>=','DATE(created_at)', $fromdate])->andWhere(['<=','DATE(created_at)', $todate]);
                }
                $transactions = $query->orderBy([
                    'created_at' => SORT_DESC
                ])->all();
                //echo $transactions->createCommand()->getRawSql();exit;

                //->all();
                $mytransactions = array();
                if(!empty($transactions)){
                    foreach ($transactions as $key=>$transaction){
                        $transactionitems = $transaction->transactionitems;
                        //echo "<pre>";print_r($transactionitems);exit;
                        switch ($transaction->reftype) {
                            case "Monthly Rental";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = ($user_id==$transaction->landlord_id)?1:0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Booking Payment";
                                //$amountarray['rental_deposit']
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype." - ".$transaction->request->reference_no;
                                $mytransactions[$key]['property'] = (isset($transaction->property->title))?$transaction->property->title:'';
                                if($user_id==$transaction->landlord_id){
                                    $mytransactions[$key]['amount'] = number_format($transaction->request->monthly_rental+$transaction->request->security_deposit+$transaction->request->keycard_deposit+$transaction->request->utilities_deposit, 2, '.', '');
                                }else if($user_id==$transaction->user_id){
                                    $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                }
                                //$mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = ($user_id==$transaction->landlord_id)?1:0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                $items = array();
                                if(!empty($transactionitems)){
                                   foreach ($transactionitems as $k=>$transactionitem){
                                       $items[$k]['description'] = $transactionitem->description;
                                       $items[$k]['amount'] = $transactionitem->total_amount;
                                       if($user_id==$transaction->landlord_id && ($transactionitem->description=='Booking Fees' || $transactionitem->description == 'Deposit' || $transactionitem->description == 'Keycard Deposit'|| $transactionitem->description == 'Utilities Deposit')){
                                        $items[$k]['incoming'] = 1;
                                       }else if($user_id==$transaction->user_id && ($transactionitem->description=='Booking Fees' || $transactionitem->description == 'Deposit' || $transactionitem->description == 'Keycard Deposit'|| $transactionitem->description == 'Utilities Deposit' || $transactionitem->description=='Stamp Duty' || $transactionitem->description == 'Tenancy Fees')){
                                        $items[$k]['incoming'] = 0;
                                       }
                                   }
                                }
                                $mytransactions[$key]['items'] = $items;
                                break;
                            case "Renovation Payment";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype." - ".$transaction->todo->title;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = ($user_id==$transaction->landlord_id)?1:0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Booking Fees Payment";
                                if($transaction->user_id==$user_id){
                                    $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                    $mytransactions[$key]['title'] = $transaction->reftype;
                                    $mytransactions[$key]['property'] = $transaction->request->property->title;
                                    $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                    $mytransactions[$key]['incoming'] = 0;
                                    $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                }elseif ($transaction->landlord_id==$user_id){
                                    $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                    $mytransactions[$key]['title'] = $transaction->reftype;
                                    $mytransactions[$key]['property'] = $transaction->request->property->title;
                                    $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                    $mytransactions[$key]['incoming'] = 1;
                                    $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                }

                                break;
                            case "Booking Fees Refund";
                                if($transaction->user_id==$user_id){
                                    $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                    $mytransactions[$key]['title'] = $transaction->reftype;
                                    $mytransactions[$key]['property'] = $transaction->request->property->title;
                                    $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                    $mytransactions[$key]['incoming'] = 1;
                                    $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                }

                                break;
                            case "Package Purchase";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = '';
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                            case "Insurance";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = (isset($transaction->property->title))?$transaction->property->title:'';
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Defect Report";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "General";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Other";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                break;
                            case "Moveout Refund";
                                $items = array();
                                if(!empty($transactionitems)){
                                    $totalamount = 0;
                                    foreach ($transactionitems as $k=>$transactionitem){
                                        $items[$k]['description'] = $transactionitem->description;
                                        $items[$k]['amount'] = $transactionitem->total_amount;

                                        if($transactionitem->receiver_id==$user_id){
                                            $items[$k]['incoming'] = 1;

                                        }else if($transactionitem->sender_id==$user_id){
                                            $items[$k]['incoming'] = 0;
                                        }
                                        $items[$k]['refund'] = 1;

                                    }
                                }
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['property'] = $transaction->property->title;
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = ($user_id==$transaction->user_id)?1:0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                $mytransactions[$key]['items'] = $items;

                                break;
                            case "Service";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['description'] = $transaction->todo->service_type;
                                $mytransactions[$key]['vendor'] = (isset($transaction->vendor->full_name))?$transaction->vendor->full_name:'';
                                $mytransactions[$key]['property'] = (isset($transaction->property->title))?$transaction->property->title:'';
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 0;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                $items = array();
                                if(!empty($transactionitems)){
                                    foreach ($transactionitems as $k=>$transactionitem){
                                        $items[$k]['description'] = $transactionitem->description;
                                        $items[$k]['amount'] = $transactionitem->total_amount;
                                        $items[$k]['incoming'] = 0;

                                    }
                                }
                                $mytransactions[$key]['items'] = $items;
                                break;
                            case "Cancellation Refund";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['title'] = $transaction->reftype;
                                $mytransactions[$key]['description'] = $transaction->todo->service_type;
                                $mytransactions[$key]['vendor'] = (isset($transaction->vendor->full_name))?$transaction->vendor->full_name:'';
                                $mytransactions[$key]['property'] = (isset($transaction->property->title))?$transaction->property->title:'';
                                $mytransactions[$key]['amount'] = number_format($transaction->total_amount, 2, '.', '');
                                $mytransactions[$key]['incoming'] = 1;
                                $mytransactions[$key]['date'] = date('Y-m-d',strtotime($transaction->created_at));
                                $items = array();
                                if(!empty($transactionitems)){
                                    foreach ($transactionitems as $k=>$transactionitem){
                                        $items[$k]['description'] = $transactionitem->description;
                                        $items[$k]['amount'] = $transactionitem->total_amount;
                                        $items[$k]['incoming'] = 1;

                                    }
                                }
                                $mytransactions[$key]['items'] = $items;
                                break;
                            case "Withdrawal";
                                    $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                    $mytransactions[$key]['name'] = "";
                                    $mytransactions[$key]['title'] = "Withdrawal";
                                    $mytransactions[$key]['description'] = $transaction->status;
                                    $mytransactions[$key]['incoming'] = 0;
                                    $mytransactions[$key]['amount'] = number_format($transaction->amount, 2, '.', '');
                                    $mytransactions[$key]['date'] = date('Y-m-d H:i:s', strtotime($transaction->created_at));

                                break;
                            case "Topup";
                                $mytransactions[$key]['reference_no'] = $transaction->reference_no;
                                $mytransactions[$key]['name'] = "";
                                $mytransactions[$key]['title'] = "Topup";
                                $mytransactions[$key]['description'] = $transaction->status;
                                $mytransactions[$key]['incoming'] = 1;
                                $mytransactions[$key]['amount'] = number_format($transaction->amount, 2, '.', '');
                                $mytransactions[$key]['date'] = date('Y-m-d H:i:s', strtotime($transaction->created_at));

                                break;

                        }

                    }
                }
                return array('status' => 1, 'data' => $mytransactions);




        }


    }
    public function actionVerifypassport()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST) && isset($_POST['document']) && $_POST['document']!='' && isset($_POST['selfie']) && $_POST['selfie']!=''){
                $journeyid = $this->createjourneyid();
                if($journeyid!=''){
                    $document = $_POST['document'];
                    $selfie = $_POST['selfie'];
                    $checkmycad = $this->mykadokaydoc($journeyid,$document);
                    if(!empty($checkmycad)){
                        if($checkmycad->status=='success' && $checkmycad->messageCode=='api.success'){
                            $checkscoreandface = $this->okayface($journeyid,$document,$selfie);
                            if(!empty($checkscoreandface)){
                                if($checkmycad->status=='success' && $checkmycad->messageCode=='api.success'){
                                    $getscorecardresult = $this->getscorecard($journeyid);

                                    if(!empty($getscorecardresult)){
                                        if($getscorecardresult->status=='success'){
                                            $status = (isset($getscorecardresult->scorecardResultList[0]) && !empty($getscorecardresult->scorecardResultList[0]) && isset($getscorecardresult->scorecardResultList[0]->scorecardStatus))?$getscorecardresult->scorecardResultList[0]->scorecardStatus:'';
                                            if($status=='clear'){
                                                return array('status' => 1, 'message' => 'Done');

                                            } else{
                                                return array('status' => 0, 'message' => $getscorecardresult->scorecardResultList[0]->scorecardStatus);

                                            }
                                        }else{
                                            return array('status' => 0, 'message' => 'You have not verified. Please upload valid Document');

                                        }

                                    }else{
                                        return array('status' => 0, 'message' => 'You have not verified. Please upload valid Document');

                                    }
                                }else{
                                    return array('status' => 0, 'message' => 'You have not verified. Please upload valid Document');

                                }

                            }else{
                                return array('status' => 0, 'message' => 'You have not verified. Please upload valid Document');

                            }
                        }else{
                            return array('status' => 0, 'message' => 'You have not verified. Please upload valid Document');

                        }
                    }else{
                        return array('status' => 0, 'message' => 'You have not verified. Please upload valid Document');

                    }
                }else{
                    return array('status' => 0, 'message' => 'Something went wrong. Please try after sometimes.');

                }

            }


        }


    }
    public function actionManualkyc()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if(!empty($_POST) && isset($_POST['document']) && $_POST['document']!='' && isset($_POST['document_no']) && $_POST['document_no']!='' && isset($_POST['selfie']) && $_POST['selfie']!='' && isset($_POST['request_id']) && $_POST['request_id']!='' && isset($_POST['type']) && $_POST['type']!='') {
                $requestmodel = BookingRequests::findOne($_POST['request_id']);
                $type = $_POST['type'];
                $document_back = (isset($_POST['document_back']) && $_POST['document_back']!='')?$_POST['document_back']:NULL;
                $user_id = $this->user_id;
                $manualkyc = new ManualKyc();
                $manualkyc->request_id =$_POST['request_id'];
                $manualkyc->user_id = $this->user_id;
                $manualkyc->document = $_POST['document'];
                $manualkyc->document_no = $_POST['document_no'];
                $manualkyc->document_back = $document_back;
                $manualkyc->selfie = $_POST['selfie'];
                $manualkyc->type = $type;
                $manualkyc->status = 'Pending';
                $manualkyc->created_at = date('Y-m-d H:i:s');
                if($manualkyc->save(false)){
                    return array('status' => 1, 'message' => 'We have submitted your documents to admin for manual approval.Will update you shortly.');
                }else{

                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }
    }

    public function actionVerifydocument()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
           if(!empty($_POST) && isset($_POST['document']) && $_POST['document']!='' && isset($_POST['selfie']) && $_POST['selfie']!='' && isset($_POST['request_id']) && $_POST['request_id']!='' && isset($_POST['type']) && $_POST['type']!=''){
              $requestmodel = BookingRequests::findOne($_POST['request_id']);
               $type = $_POST['type'];

               $user_id = $this->user_id;

                  if($type=='N') {
                      $journeyid = $this->createjourneyid();
                      if($journeyid!='') {
                          $document = $_POST['document'];
                          $selfie = $_POST['selfie'];
                          $filename = 'uploads/sampleimage.jpg'; // output file name

//                          $im = imagecreatefromstring(base64_decode($selfie));
//                          $source_width = imagesx($im);
//                          $source_height = imagesy($im);
//                          $ratio =  $source_width / $source_height;
//
//                          $new_height = 720; // assign new width to new resized image
//                          $new_width = $ratio * $source_width;
//
//                          $thumb = imagecreatetruecolor($new_width, $new_height);
//
//                          $transparency = imagecolorallocatealpha($thumb, 255, 255, 255, 127);
//                          imagefilledrectangle($thumb, 0, 0, $new_width, $new_height, $transparency);
//
//                          imagecopyresampled($thumb, $im, 0, 0, 0, 0, $new_width, $new_height, $source_width, $source_height);
//                          imagepng($thumb, $filename, 9);
//                          imagedestroy($im);
//                          $path = 'uploads/sampleimage.jpg';
//                          $type = pathinfo($path, PATHINFO_EXTENSION);
//                          $data = file_get_contents($path);
                          //$base64 =  base64_encode($data);
                          //$selfie = $base64;
                          //echo $selfie;exit;
                          $requestmodel->selfie = $selfie;
                          $requestmodel->save(false);
                          $checkmycad = $this->mykadokaydoc($journeyid, $document);
                          if (!empty($checkmycad)) {
                              if ($checkmycad->status == 'success' && $checkmycad->messageCode == 'api.success') {
                                  $checkscoreandface = $this->okayface($journeyid, $document, $selfie);
                                  if (!empty($checkscoreandface)) {
                                      if ($checkscoreandface->status == 'success' && $checkscoreandface->messageCode == 'api.success') {
                                          $getscorecardresult = $this->getscorecard($journeyid);

                                          if (!empty($getscorecardresult)) {
                                              if ($getscorecardresult->status == 'success') {
                                                  if ($user_id == $requestmodel->landlord_id) {
                                                      $requestmodel->landlord_ekyc_response = json_encode($getscorecardresult);
                                                      $requestmodel->save(false);
                                                  }
                                                  if ($user_id == $requestmodel->user_id) {
                                                      $requestmodel->tenant_ekyc_response = json_encode($getscorecardresult);
                                                      $requestmodel->save(false);
                                                  }
                                                  $status = (isset($getscorecardresult->scorecardResultList[0]) && !empty($getscorecardresult->scorecardResultList[0]) && isset($getscorecardresult->scorecardResultList[0]->scorecardStatus)) ? $getscorecardresult->scorecardResultList[0]->scorecardStatus : '';
                                                  if ($status == 'clear') {
                                                      $usermodel = Users::findOne($user_id);
                                                      $usermodel->ekyc_response = json_encode($getscorecardresult);
                                                      $usermodel->identity_status = 'Verified';
                                                      $usermodel->save(false);
                                                      return array('status' => 1, 'message' => 'done', 'response' => $getscorecardresult);

                                                  } else {
                                                      return array('status' => 0, 'message' => 'please upload MyKAD again. (Error : scorecardStatus is suspicious )' , 'response' => $getscorecardresult, 'here' => 'there');//$getscorecardresult->scorecardResultList[0]->scorecardStatus

                                                  }
                                              } else {
                                                  return array('status' => 0, 'message' => 'please upload MyKAD again. (Error : '.$getscorecardresult->message.')');

                                              }

                                          } else {
                                              return array('status' => 0, 'message' => 'please upload MyKAD again. (Error : '.$getscorecardresult->message.')');


                                          }
                                      } else {
                                          return array('status' => 0, 'message' => 'please upload MyKAD again. (Error : '.$checkscoreandface->message.')');

                                      }

                                  } else {
                                      return array('status' => 0, 'message' => 'please upload MyKAD again. (Error : '.$checkscoreandface->message.')');

                                  }
                              } else {
                                  return array('status' => 0, 'message' => 'please upload MyKAD again. (Error : '.$checkmycad->message.')');

                              }
                          }else{
                              return array('status' => 0, 'message' => 'please upload MyKAD again.No response from check mycad ');

                          }
                      }else{
                          return array('status' => 0, 'message' => 'please upload MyKAD again.'.json_encode($journeyid));

                      }
                  }else if($type=='P'){
                      $journeyid = $this->createjourneyid();
                      if($journeyid!='') {

                          $document = $_POST['document'];
                          $selfie = $_POST['selfie'];
                          $checkpassport = $this->passportokaydoc($journeyid, $document);
                          if(!empty($checkpassport)){
                              //isset($response->messageCode) && isset($response->status) && $response->messageCode=='api.success' && $response->status=='success'
                              if($checkpassport->messageCode=='api.success' && $checkpassport->status=='success'){
                              $checkscoreandface = $this->okayface($journeyid,$document,$selfie);
                              if(!empty($checkscoreandface)) {
                                  if($checkscoreandface->status=='success' && $checkscoreandface->messageCode=='api.success'){

                                      $checkokayid = $this->okayid($journeyid,$document);
                                      if(!empty($checkokayid)){
                                          $getscorecardresult = $this->getscorecard($journeyid);

                                          if(!empty($getscorecardresult)){
                                              if($getscorecardresult->status=='success'){
                                                  if($user_id==$requestmodel->landlord_id){
                                                      $requestmodel->landlord_ekyc_response = json_encode($getscorecardresult);
                                                      $requestmodel->save(false);
                                                  }
                                                  if($user_id==$requestmodel->user_id){
                                                      $requestmodel->tenant_ekyc_response = json_encode($getscorecardresult);
                                                      $requestmodel->save(false);
                                                  }
                                                  $status = (isset($getscorecardresult->scorecardResultList[0]) && !empty($getscorecardresult->scorecardResultList[0]) && isset($getscorecardresult->scorecardResultList[0]->scorecardStatus))?$getscorecardresult->scorecardResultList[0]->scorecardStatus:'';
                                                  if($status=='clear'){
                                                      $usermodel = Users::findOne($user_id);
                                                      $usermodel->ekyc_response = json_encode($getscorecardresult);
                                                      $usermodel->identity_status = 'Verified';
                                                      $usermodel->save(false);
                                                      return array('status' => 1, 'message' => 'done','response'=>$getscorecardresult);

                                                  } else{
                                                      return array('status' => 0, 'message' => 'please upload passport again. (Error : scorecardStatus is suspicious )','response'=>$getscorecardresult,'here'=>'here');//$getscorecardresult->scorecardResultList[0]->scorecardStatus

                                                  }
                                              }else{
                                                  return array('status' => 0, 'message' => 'please upload passport again. (Error : '.$getscorecardresult->message.')');

                                              }

                                          }else{
                                              return array('status' => 0, 'message' => 'please upload passport again.');

                                          }

                                      }else{
                                          return array('status' => 0, 'message' => 'please upload passport again.');

                                      }
                                  }else{
                                      return array('status' => 0, 'message' => 'please upload passport again. (Error : '.$checkscoreandface->message.')');

                                  }

                              }else {
                                  return array('status' => 0, 'message' => 'please upload passport again.');

                              }
                              }else{
                                  return array('status' => 0, 'message' => 'please upload passport again.  (Error : '.$checkpassport->message.')');

                              }
                          }else{
                              return array('status' => 0, 'message' => 'please upload passport again.');

                          }
                      }else{
                          return array('status' => 0, 'message' => 'Something went wrong. Please try after sometimes '.json_encode($journeyid));

                      }

                  }


           }else{
               return array('status' => 0, 'message' => 'Please enter mandatory fields.');

           }


        }


    }

    private function createjourneyid(){
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => "https://ekycportaldemo.innov8tif.com/api/ekyc/journeyid",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS =>"{\r\n    \"username\":\"Rumah-i\",\r\n    \"password\":\"Gg(8b8\"\r\n}",
            CURLOPT_HTTPHEADER => array(
                "Content-Type: application/json"
            ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);

        if ($err) {
            return '';
        } else {
            $response = json_decode($response);
            if(!empty($response) && isset($response->message) && $response->message=='api.success'){
                return $response->journeyId;
            }else{
                return '';
            }
            //echo $response;exit;
        }

    }

    private function mykadokaydoc($journeyid,$doc){

                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => "https://ekycportaldemo.innov8tif.com/api/ekyc/okaydoc",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "POST",
                    CURLOPT_POSTFIELDS =>"{\n    \"journeyId\":\"$journeyid\",\n    \"type\":\"nonpassport\",\n    \"idImageBase64Image\": \"$doc\",\n    \"version\": \"7\",\n    \"docType\":\"mykad\",\n    \"landmarkCheck\":\"true\",\n    \"fontCheck\":\"true\",\n    \"microprintCheck\":\"true\",\n    \"photoSubstitutionCheck\":\"true\",\n \"screenDetection\":\"true\",\n    \"ghostPhotoColorDetection\":\"true\",\n   \"icTypeCheck\":\"true\",\n    \"colorMode\":\"true\",\n    \"hologram\":\"false\"\n    \n}",
                    CURLOPT_HTTPHEADER => array(
                        "Content-Type: application/json"
                    ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);
        if ($err) {
            return '';
        } else {
            $response = json_decode($response);//&& isset($response->messageCode) && isset($response->status) && $response->messageCode=='api.success' && $response->status=='success'
            if(!empty($response) ){
                return $response;
            }else{
                return '';
            }
            //echo $response;exit;
        }

    }

    private function passportokaydoc($journeyid,$doc){

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "https://ekycportaldemo.innov8tif.com/api/ekyc/okaydoc",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 0,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\r\n    \"journeyId\":\"$journeyid\",\r\n    \"type\":\"passport\",\r\n    \"country\": \"IND\",\r\n    \"halfSizeImage\":\"$doc\",\r\n    \"fullSizeImage\":\"\"\r\n}",
          CURLOPT_HTTPHEADER => array(
                    "Content-Type: application/json"
                ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);
        //echo $response;
        if ($err) {
                    return '';
                } else {
                    $response = json_decode($response);
                    if(!empty($response)){
                        return $response;
                    }else{
                return '';
            }
            //echo $response;exit;
        }

    }

    private function okayface($journeyid,$doc,$selfie){

            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://ekycportaldemo.innov8tif.com/api/ekyc/okayface",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => array('journeyId' => $journeyid,'imageBestBase64 ' => $selfie,
                    'imageIdCardBase64'=>$doc,'livenessDetection ' => 'true'),
            ));

            $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);
        if ($err) {
            return '';
        } else {
            $response = json_decode($response);//isset($response->messageCode) && isset($response->status) && $response->messageCode=='api.success' && $response->status=='success'
            if(!empty($response) ){
                return $response;
            }else{
                return '';
            }
            //echo $response;exit;
        }

    }
   private function okayid($journeyid,$doc){

            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://ekycportaldemo.innov8tif.com/api/ekyc/okayid",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS =>"{\r\n    \"journeyId\":\"$journeyid\",\r\n    \"base64ImageString\": \"$doc\",\r\n    \"imageFormat\":\"\",\r\n    \"imageEnabled\":false,\r\n    \"faceImageEnabled\":false,\r\n    \"cambodia\":false\r\n}",
                CURLOPT_HTTPHEADER => array(
                    "Content-Type: application/json"
                ),
            ));

            $response = curl_exec($curl);
       $err = curl_error($curl);
            curl_close($curl);
       if ($err) {
           return '';
       } else {
           $response = json_decode($response);//&&  isset($response->status) &&  $response->status=='success'
           if(!empty($response) ){
               return $response;
           }else{
               return '';
           }
           //echo $response;exit;
       }
   }
    private function getscorecard($journeyid){

                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => "https://ekycportaldemo.innov8tif.com/api/ekyc/scorecard",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "GET",
                    CURLOPT_POSTFIELDS => array('journeyId' => $journeyid),
                ));

                $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);
        if ($err) {
            return '';
        } else {
            $response = json_decode($response);//isset($response->status)  && $response->status=='success'
            if(!empty($response) ){
                return $response;
            }else{
                return '';
            }
            //echo $response;exit;
        }

    }
public function actionMsctrustgate()
{
    if (!empty($_POST) && isset($_POST['full_name']) && $_POST['full_name'] != '' && isset($_POST['identification_no']) && $_POST['identification_no'] != '' && isset($_POST['document']) && $_POST['document'] != '' && isset($_POST['type']) && $_POST['type'] != '' && isset($_POST['request_id']) && $_POST['request_id'] != '') {
            $requestmodel = BookingRequests::findOne($_POST['request_id']);

            $type = $_POST['type'];
            $document_front =  $_POST['document'];
            $full_name = $_POST['full_name'];
            $identification_no = $_POST['identification_no'];
        $user_id = $this->user_id;
        $userdetails = Users::findOne($user_id);
        $mobile_no  = $userdetails->contact_no;
            $certificateexist = Msc::find()->where(['document_no'=>$identification_no,'user_id'=>$this->user_id,'status'=>'Completed'])->orderBy(['id'=>SORT_ASC])->one();
            if(!empty($certificateexist)){
                $mscmodel = New Msc();
                $mscmodel->user_id = $user_id;
                $mscmodel->request_id = $_POST['request_id'];
                $mscmodel->document_front = $certificateexist->document_front;
                $mscmodel->document_back = $certificateexist->document_back;
                $mscmodel->full_name = $full_name;
                $mscmodel->document_no = $identification_no;
                $mscmodel->type = $type;
                $mscmodel->mobile_no = $mobile_no;
                $mscmodel->created_at = date('Y-m-d H:i:s');
                $mscmodel->mscrequest_id = $certificateexist->mscrequest_id;
                $mscmodel->requestekyc_response = $certificateexist->requestekyc_response;
                $mscmodel->getrequeststatus_response = $certificateexist->getrequeststatus_response;
                $mscmodel->getactivationlink_response = $certificateexist->getactivationlink_response;
                $mscmodel->status = 'Approved';
                $mscmodel->created_at = date('Y-m-d H:i:s');
                $mscmodel->save(false);
                return array('status' => 1, 'message' => 'Your MSC certificate already exist in our system.So we are moving ahead to proceed signing');exit;

            }

            $dataarray['type'] = $type;
            $dataarray['document_front'] = $document_front;
            $dataarray['document_back'] = '';
            $dataarray['full_name'] = $full_name;
            $dataarray['identification_no'] = $identification_no;
            $dataarray['mobile_no'] = $mobile_no;
            $dataarray['email'] = $userdetails->email;
            $dataarray['validity'] = 'L';
            $document_back = '';
            $errors1 = 'Document verification has failed, please upload passport again';
            if($type=='N'){
                if(empty($_POST['document_back'])){
                    return array('status' => 0, 'message' => 'Please upload back image of MyCad.');

                }
                $document_back =  $_POST['document_back'];
                $dataarray['document_back'] = $document_back;

                $errors1 = 'Document verification has failed, please upload myKAD again';

            }

           $requestcertificatewithkycresponse = $this->Requestcertificatewithekyc($dataarray,$_POST['request_id'],$user_id);
           if(!empty($requestcertificatewithkycresponse)){

               if(($requestcertificatewithkycresponse['statusCode']=='CR101' || $requestcertificatewithkycresponse['statusCode']=='CR100')  || $requestcertificatewithkycresponse['statusCode']=='000'){
                   if($requestcertificatewithkycresponse['statusCode']=='000'){
                       $mscmodel = New Msc();
                       $mscmodel->user_id = $user_id;
                       $mscmodel->request_id = $_POST['request_id'];
                       $mscmodel->document_front = $document_front;
                       $mscmodel->document_back = ($document_back!='')?$document_back:null;
                       $mscmodel->full_name = $full_name;
                       $mscmodel->document_no = $identification_no;
                       $mscmodel->type = $type;
                       $mscmodel->mobile_no = $mobile_no;
                       $mscmodel->created_at = date('Y-m-d H:i:s');
                       $mscmodel->mscrequest_id = $requestcertificatewithkycresponse['certRequestID'];
                       $mscmodel->requestekyc_response = json_encode($requestcertificatewithkycresponse);
                       $mscmodel->status = 'Pending';
                       $mscmodel->save(false);
                       $userdetails->msccertificate = $requestcertificatewithkycresponse['certRequestID'];
                       if($userdetails->save(false)){
                           $getrequeststatus = $this->Getrequeststatus($mscmodel);
                           if (!empty($getrequeststatus)) {
                               $mscmodel->getrequeststatus_response = json_encode($getrequeststatus);
                               $mscmodel->updated_at = date('Y-m-d H:i:s');
                               $mscmodel->save(false);
                               if ($getrequeststatus['statusCode'] == 000 && $getrequeststatus['dataList']['requestStatus'] == 'Pending Activation') {
                                   $mscmodel->status = 'Pending Activation';
                                   $mscmodel->save(false);
                                   $getactivationlink = $this->Getactivationlink($mscmodel);
                                   if (!empty($getactivationlink)) {
                                       $mscmodel->getactivationlink_response = json_encode($getactivationlink);
                                       $mscmodel->updated_at = date('Y-m-d H:i:s');
                                       $mscmodel->save(false);
                                       if ($getactivationlink['statusCode'] == 000 && $getactivationlink['statusMsg'] == 'Success') {
                                           $mscmodel->activation_link = $getactivationlink['activationLink'];
                                           $mscmodel->status = 'Need Activation';
                                           $mscmodel->updated_at = date('Y-m-d H:i:s');
                                           $mscmodel->save(false);
                                           $todomodel = new TodoList();
                                           $todomodel->user_id = $user_id;
                                           $todomodel->msc_id = $mscmodel->id;
                                           $todomodel->property_id = $requestmodel->property_id;
                                           $todomodel->request_id = $mscmodel->request_id;
                                           $todomodel->reftype = 'Activation Link';
                                           $todomodel->created_at = date('Y-m-d H:i:s');
                                           $todomodel->updated_at = date('Y-m-d H:i:s');
                                           $todomodel->status = 'Pending';
                                           $todomodel->save(false);
                                           return array('status' => 1, 'message' => 'We have sent your document to MSC Trustgate.You will get activation link in your Todo List.', 'errorresponse' => '', 'typeapi' => 'getactivationlink');


                                       } else {
                                           \Yii::error("1-".$errors1." (Error : ".$getactivationlink['statusCode'].")");
                                           return array('status' => 0, 'message'=>$errors1." (Error : ".$getactivationlink['statusCode'].")",'message1' => $getrequeststatus['statusMsg'], 'error' => json_encode($getactivationlink), 'typeapi' => 'getactivationlink');

                                       }

                                   } else {
                                       \Yii::error("2-".$errors1." (Error : ".$getrequeststatus['statusCode'].")");
                                       return array('status' => 0, 'message'=>$errors1." (Error : ".$getrequeststatus['statusCode'].")",'message1' => 'There is something went wrong with MSC trustgate.Please try after sometimes.', 'typeapi' => 'getactivationlink');

                                   }

                               } else if ($getrequeststatus['statusCode'] == 000 && ($getrequeststatus['dataList']['requestStatus'] == 'Submitted' || $getrequeststatus['dataList']['requestStatus'] == 'Verified')) {
                                   $mscmodel->status = 'Pending MSC Approval';
                                   $mscmodel->save(false);
                                   $mscmodel->status = 'Pending MSC Approval';
                                   $requestmodel->save(false);
                                   return array('status' => 1, 'message' => 'Your document submitted to Admin For Approval.We will send you activation link once done', 'errorresponse' => json_encode($getrequeststatus), 'typeapi' => 'getrequeststatus');

                               } else {
                                   \Yii::error("3-".$errors1." (Error : ".$getrequeststatus['statusCode'].")");
                                   return array('status' => 0, 'message'=>$errors1." (Error : ".$getrequeststatus['statusCode'].")",'message1' => 'There is something went wrong with MSC trustgate.Please try after sometimes.', 'errorresponse' => json_encode($getrequeststatus), 'typeapi' => 'getrequeststatus');

                               }
                           } else {
                               \Yii::error("4-".$errors1."ketan here");
                               return array('status' => 0,'message'=>$errors1, 'message1' => 'There is something went wrong with MSC trustgate.Please try after sometimes.', 'typeapi' => 'getrequeststatus');

                           }
                       }

                   }else if($requestcertificatewithkycresponse['statusCode']=='CR100'){
                       $mscrequestmodel = Msc::find()->where(['request_id' => $_POST['request_id'], 'user_id' => $user_id,'status'=>'Approved'])->orderBy(['id' => SORT_DESC])->one();
                       if(!empty($mscrequestmodel)){
                           return array('status' => 1, 'message' => 'We have sent your document to MSC Trustgate.You will informed when Signing done.', 'errorresponse' => '', 'typeapi' => 'getrequestid');

                       }
                       $msccertificateid = $userdetails->msccertificate;
                       $usermodel = Users::findOne($this->user_id);
                       $usermodel->document_type = $type;
                       $usermodel->document_front = $document_front;
                       $usermodel->document_back = $document_back;
                       $usermodel->document_no = $identification_no;
                       $usermodel->updated_at = date('Y-m-d H:i:s');
                       $usermodel->save(false);
                           $mscmodel = New Msc();
                           $mscmodel->user_id = $user_id;
                           $mscmodel->request_id = $_POST['request_id'];
                           $mscmodel->document_front = $document_front;
                           $mscmodel->document_back = ($document_back!='')?$document_back:null;
                           $mscmodel->full_name = $full_name;
                           $mscmodel->document_no = $identification_no;
                           $mscmodel->type = $type;
                           $mscmodel->mobile_no = $mobile_no;
                           $mscmodel->created_at = date('Y-m-d H:i:s');
                           $mscmodel->mscrequest_id = $msccertificateid;
                           $mscmodel->requestekyc_response = null;
                           $mscmodel->status = 'Approved';
                           $mscmodel->save(false);
                           return array('status' => 1, 'message' => 'We have sent your document to MSC Trustgate.You will informed when Signing done.', 'errorresponse' => '', 'typeapi' => 'getrequestid');

                   }else{
                          $mscrequestmodel = Msc::find()->where(['request_id' => $_POST['request_id'], 'user_id' => $user_id])->orderBy(['id' => SORT_DESC])->one();
                           if (!empty($mscrequestmodel)) {
                               $getrequeststatus = $this->Getrequeststatus($mscrequestmodel);
                               if (!empty($getrequeststatus)) {
                                   $mscrequestmodel->getrequeststatus_response = json_encode($getrequeststatus);
                                   $mscrequestmodel->updated_at = date('Y-m-d H:i:s');
                                   $mscrequestmodel->save(false);
                                   if ($getrequeststatus['statusCode'] == 000 && $getrequeststatus['dataList']['requestStatus'] == 'Pending Activation') {
                                       $mscrequestmodel->status = 'Pending Activation';
                                       $mscrequestmodel->save(false);
                                       $getactivationlink = $this->Getactivationlink($mscrequestmodel);
                                       if (!empty($getactivationlink)) {
                                           $mscrequestmodel->getactivationlink_response = json_encode($getactivationlink);
                                           $mscrequestmodel->updated_at = date('Y-m-d H:i:s');
                                           $mscrequestmodel->save(false);
                                           if ($getactivationlink['statusCode'] == 000 && $getactivationlink['statusMsg'] == 'Success') {
                                               $mscrequestmodel->activation_link = $getactivationlink['activationLink'];
                                               $mscrequestmodel->status = 'Need Activation';
                                               $mscrequestmodel->updated_at = date('Y-m-d H:i:s');
                                               $mscrequestmodel->save(false);
                                               $todomodel = new TodoList();
                                               $todomodel->user_id = $user_id;
                                               $todomodel->msc_id = $mscrequestmodel->id;
                                               $todomodel->property_id = $requestmodel->property_id;
                                               $todomodel->request_id = $mscrequestmodel->request_id;
                                               $todomodel->reftype = 'Activation Link';
                                               $todomodel->created_at = date('Y-m-d H:i:s');
                                               $todomodel->updated_at = date('Y-m-d H:i:s');
                                               $todomodel->status = 'Pending';
                                               $todomodel->save(false);
                                               return array('status' => 1, 'message' => 'We have sent your document to MSC Trustgate.You will get activation link in your Todo List.', 'errorresponse' => json_encode($getrequeststatus), 'typeapi' => 'getactivationlink');


                                           } else {
                                               \Yii::error("1-".$errors1." (Error : ".$getactivationlink['statusCode'].")");
                                               return array('status' => 0, 'message'=>$errors1." (Error : ".$getactivationlink['statusCode'].")",'message1' => $getrequeststatus['statusMsg'], 'error' => json_encode($getactivationlink), 'typeapi' => 'getactivationlink');

                                           }

                                       } else {
                                           \Yii::error("2-".$errors1." (Error : ".$getrequeststatus['statusCode'].")");
                                           return array('status' => 0, 'message'=>$errors1." (Error : ".$getrequeststatus['statusCode'].")",'message1' => 'There is something went wrong with MSC trustgate.Please try after sometimes.', 'typeapi' => 'getactivationlink');

                                       }

                                   } else if ($getrequeststatus['statusCode'] == 000 && ($getrequeststatus['dataList']['requestStatus'] == 'Submitted' || $getrequeststatus['dataList']['requestStatus'] == 'Verified')) {
                                       $mscrequestmodel->status = 'Pending MSC Approval';
                                       $mscrequestmodel->save(false);
                                       $requestmodel->status = 'Pending MSC Approval';
                                       $requestmodel->save(false);
                                       return array('status' => 1, 'message' => 'Your document submitted to Admin For Approval.We will send you activation link once done', 'errorresponse' => json_encode($getrequeststatus), 'typeapi' => 'getrequeststatus');

                                   } else {
                                       \Yii::error("3-".$errors1." (Error : ".$getrequeststatus['statusCode'].")");
                                       return array('status' => 0, 'message'=>$errors1." (Error : ".$getrequeststatus['statusCode'].")",'message1' => 'There is something went wrong with MSC trustgate.Please try after sometimes.', 'errorresponse' => json_encode($getrequeststatus), 'typeapi' => 'getrequeststatus');

                                   }
                               } else {
                                   \Yii::error("4-".$errors1."ketan here");
                                   return array('status' => 0,'message'=>$errors1, 'message1' => 'There is something went wrong with MSC trustgate.Please try after sometimes.', 'typeapi' => 'getrequeststatus');

                               }

                           } else {
                              if($requestcertificatewithkycresponse['statusCode']=='WS118' || $requestcertificatewithkycresponse['statusCode']=='WS117' || $requestcertificatewithkycresponse['statusCode']=='WS115'){
                                  \Yii::error("5-".$errors1." (Error : ".$requestcertificatewithkycresponse['statusCode'].")");
                                  return array('status' => 0,'message'=>$errors1." (Error : ".$requestcertificatewithkycresponse['statusCode'].")", 'message1' => 'There is something went wrong with MSC trustgate.Please try after sometimes.','typeapi'=>'requestcertificatewithkycresponse');

                              }else {
                                  \Yii::error("6-".$errors1." (Error : ".$requestcertificatewithkycresponse['statusCode'].")");
                                  return array('status' => 0,'message'=>$errors1." (Error : ".$requestcertificatewithkycresponse['statusCode'].")", 'message1' => $requestcertificatewithkycresponse['statusMsg'], 'errorresponse' => json_encode($requestcertificatewithkycresponse));
                              }

                           }


                   }

               }else{
                   \Yii::error("7-".$errors1." (Error : ".$requestcertificatewithkycresponse['statusCode'].")");
                   return array('status' => 0,'message'=>$errors1." (Error : ".$requestcertificatewithkycresponse['statusCode'].")", 'message1' => $requestcertificatewithkycresponse['statusMsg'],'errorresponse'=>json_encode($requestcertificatewithkycresponse),'typeapi'=>'requestcertificatewithkycresponse');

               }
               //echo "<pre>";print_r($requestcertificatewithkycresponse);exit;

           }else{
               \Yii::error("8-".$errors1."ketan 123");
               return array('status' => 0,'message'=>$errors1, 'message1' => 'There is something went wrong with MSC trustgate.Please try after sometimes.','typeapi'=>'requestcertificatewithkycresponse');

           }





    }else{
        \Yii::error("9 - mandatory");
        return array('status' => 0, 'message' => 'Please enter mandatory fields.');

    }
}

    private function Requestcertificatewithekyc($userdata,$request_id,$user_id){

        $curl = curl_init();
        $document_front = '';
        $document_back = '';
        $passportimage = '';
        if($userdata['type']=='N'){
            $document_front = $userdata['document_front'];
            $document_back = $userdata['document_back'];
            $nationality = 'MY';
        }else{
            $passportimage = $userdata['document_front'];
            $nationality = 'ZZ';
        }
        curl_setopt_array($curl, array(
            CURLOPT_URL => "ec2-13-250-42-162.ap-southeast-1.compute.amazonaws.com/MTSAPilot/MyTrustSignerAgentWS?wsdl",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS =>"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mtsa=\"http://mtsa.msctg.com/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <mtsa:RequestCertificateWithEKYC>\n        <UserID>".$userdata['identification_no']."</UserID>\n         <IDType>".$userdata['type']."</IDType>\n         <FullName>".$userdata['full_name']."</FullName>\n         <Nationality>".$nationality."</Nationality>\n         <EmailAddress>".$userdata['email']."</EmailAddress>\n         <MobileNo>".$userdata['full_name']."</MobileNo>\n         <CertValidity>".$userdata['validity']."</CertValidity>\n         <PassportImage>".$passportimage."</PassportImage>\n         <NRICFront>".$document_front."</NRICFront>\n         <NRICBack>".$document_back."</NRICBack>\n          <OrganisationInfo>\n           \n         </OrganisationInfo>\n      </mtsa:RequestCertificateWithEKYC>\n   </soapenv:Body>\n</soapenv:Envelope>",
            CURLOPT_HTTPHEADER => array(
                "Username: rumahi",
                "Password: YcuLxvMMcXWPLRaW",
                "Content-Type: text/xml"
            ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);
        if ($err) {
            return '';
        } else {
            $response = preg_replace("/(<\/?)(\w+):([^>]*>)/", "$1$2$3", $response);
            $xml = new \SimpleXMLElement($response);
            $body = $xml->xpath('//SBody')[0];
            $responsearray = json_decode(json_encode((array)$body), TRUE);

            //$response = json_decode($response);
            if(!empty($responsearray) &&  isset($responsearray['ns2RequestCertificateWithEKYCResponse'])  && !empty($responsearray['ns2RequestCertificateWithEKYCResponse'])){
                return $responsearray['ns2RequestCertificateWithEKYCResponse']['return'];
            }else{
                return '';
            }
            //echo $response;exit;
        }
    }

    private function Getrequeststatus($mscrequestmodel)
    {
           $certificaterequest_id = $mscrequestmodel->mscrequest_id;
           $userID = $mscrequestmodel->document_no;


            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => "ec2-13-250-42-162.ap-southeast-1.compute.amazonaws.com/MTSAPilot/MyTrustSignerAgentWS?wsdl",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS =>"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mtsa=\"http://mtsa.msctg.com/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <mtsa:GetRequestStatus>\n         <!--1 or more repetitions:-->\n         <UserRequestList>\n            <!--Optional:-->\n            <requestID>".$certificaterequest_id."</requestID>\n            <!--Optional:-->\n            <userID>".$userID."</userID>\n         </UserRequestList>\n      </mtsa:GetRequestStatus>\n   </soapenv:Body>\n</soapenv:Envelope>",
                CURLOPT_HTTPHEADER => array(
                    "Username: rumahi",
                    "Password: YcuLxvMMcXWPLRaW",
                    "Content-Type: text/xml"
                ),
            ));

            $response = curl_exec($curl);
        $err = curl_error($curl);
            curl_close($curl);
           // echo $response;
        if ($err) {
            return '';
        } else {
            $response = preg_replace("/(<\/?)(\w+):([^>]*>)/", "$1$2$3", $response);
            $xml = new \SimpleXMLElement($response);
            $body = $xml->xpath('//SBody')[0];
            $responsearray = json_decode(json_encode((array)$body), TRUE);
            if(!empty($responsearray) &&  isset($responsearray['ns2GetRequestStatusResponse'])  && !empty($responsearray['ns2GetRequestStatusResponse'])){
                return $responsearray['ns2GetRequestStatusResponse']['return'];
            }else{
                return '';
            }
        }


    }

    private function Getactivationlink($mscrequestmodel)
    {



        $certificaterequest_id = $mscrequestmodel->mscrequest_id;
        $userID = $mscrequestmodel->document_no;

                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => "ec2-13-250-42-162.ap-southeast-1.compute.amazonaws.com/MTSAPilot/MyTrustSignerAgentWS?wsdl",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "POST",
                    CURLOPT_POSTFIELDS =>"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mtsa=\"http://mtsa.msctg.com/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <mtsa:GetActivation>\n         <UserID>".$userID."</UserID>\n         <RequestID>".$certificaterequest_id."</RequestID>\n      </mtsa:GetActivation>\n   </soapenv:Body>\n</soapenv:Envelope>",
                    CURLOPT_HTTPHEADER => array(
                        "Username: rumahi",
                        "Password: YcuLxvMMcXWPLRaW",
                        "Content-Type: text/xml"
                    ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

        // echo $response;
                if ($err) {
                    return '';
                } else {
                    $response = preg_replace("/(<\/?)(\w+):([^>]*>)/", "$1$2$3", $response);
                    $xml = new \SimpleXMLElement($response);
                    $body = $xml->xpath('//SBody')[0];
                    $responsearray = json_decode(json_encode((array)$body), TRUE);

                    if(!empty($responsearray) &&  isset($responsearray['ns2GetActivationResponse'])  && !empty($responsearray['ns2GetActivationResponse'])){
                        return $responsearray['ns2GetActivationResponse']['return'];
                    }else{
                        return '';
                    }
                    //echo $response;exit;
                }


    }


    private function Getcertinfo($certificate_id){

            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => "ec2-13-250-42-162.ap-southeast-1.compute.amazonaws.com/MTSAPilot/MyTrustSignerAgentWS?wsdl",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS =>"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mtsa=\"http://mtsa.msctg.com/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <mtsa:GetCertInfo>\n         <UserID>".$certificate_id."</UserID>\n      </mtsa:GetCertInfo>\n   </soapenv:Body>\n</soapenv:Envelope>",
                CURLOPT_HTTPHEADER => array(
                    "Username: rumahi",
                    "Password: YcuLxvMMcXWPLRaW",
                    "Content-Type: text/xml"
                ),
            ));

            $response = curl_exec($curl);
        $err = curl_error($curl);

            curl_close($curl);
        if ($err) {
            return '';
        } else {
            $response = preg_replace("/(<\/?)(\w+):([^>]*>)/", "$1$2$3", $response);
            $xml = new \SimpleXMLElement($response);
            $body = $xml->xpath('//SBody')[0];
            $responsearray = json_decode(json_encode((array)$body), TRUE);
            if(!empty($responsearray) &&  isset($responsearray['ns2GetCertInfoResponse'])  && !empty($responsearray['ns2GetCertInfoResponse'])){
                return $responsearray['ns2GetCertInfoResponse']['return'];
            }else{
                return '';
            }
        }

    }
    private function signpdf(){

         $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => "ec2-13-250-42-162.ap-southeast-1.compute.amazonaws.com/MTSAPilot/MyTrustSignerAgentWS?wsdl",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS =>"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mtsa=\"http://mtsa.msctg.com/\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <mtsa:SignPDF>\n         <UserID>940827086333</UserID>\n         <FullName>thomas shelby</FullName>\n         <!--Optional:-->\n         <AuthFactor></AuthFactor>\n\t\t<SignatureInfo>\n            <!--Optional:-->\n            <pageNo>1</pageNo>\n            <!--Optional:-->\n            <pdfInBase64></sigImageInBase64>\n            <!--Optional:-->\n            <visibility>false</visibility>\n            <!--Optional:-->\n            <x1>300</x1>\n            <!--Optional:-->\n            <x2>500</x2>\n            <!--Optional:-->\n            <y1>20</y1>\n            <!--Optional:-->\n            <y2>100</y2>\n         </SignatureInfo>\n      </mtsa:SignPDF>\n   </soapenv:Body>\n</soapenv:Envelope>",
            CURLOPT_HTTPHEADER => array(
                "Username: rumahi",
                "Password: YcuLxvMMcXWPLRaW",
                "Content-Type: text/xml"
            ),
        ));

        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);
        if ($err) {
            return '';
        } else {
            $response = preg_replace("/(<\/?)(\w+):([^>]*>)/", "$1$2$3", $response);
            $xml = new \SimpleXMLElement($response);
            $body = $xml->xpath('//SBody')[0];
            $responsearray = json_decode(json_encode((array)$body), TRUE);

            if(!empty($responsearray) &&  isset($responsearray['ns2GetActivationResponse'])  && !empty($responsearray['ns2GetActivationResponse'])){
                return $responsearray['ns2GetActivationResponse']['return'];
            }else{
                return '';
            }
            //echo $response;exit;
        }

    }



    public function actionCheckpaymentstatus()
    {
        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            $user_id = $this->user_id;
            if(!empty($_POST) &&  isset($_POST['order_id']) && $_POST['order_id']!=''){
                $payments = Payments::find()->where(['order_id'=>$_POST['order_id'],'user_id'=>$user_id])->one();
                if(!empty($payments)){
                    if($payments->status=='Completed'){
                        $transaction = Transactions::find()->where(['payment_id'=>$payments->id])->one();
                        return array('status' => 1,'message'=>'Your payment is successful.','payment_id'=>$payments->id,'reference_no'=>$transaction->reference_no);
                    }elseif ($payments->status=='Failed'){
                        return array('status' => 1,'message'=>'Your payment is failed.');
                    }else{
                        return array('status' => 1,'message'=>'Your payment is pending.');
                    }
                }else{
                    return array('status' => 0, 'message' => 'Something went wrong please try after sometimes.');
                }

            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');
            }
        }

    }



}
