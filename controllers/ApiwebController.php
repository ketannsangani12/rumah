<?php
namespace app\controllers;

use app\models\AgentRatings;
use app\models\BankAccounts;
use app\models\BookingRequests;
use app\models\GoldTransactions;
use app\models\Images;
use app\models\PromoCodes;
use app\models\Properties;
use app\models\PropertyRatings;
use app\models\PropertyViews;
use app\models\TodoDocuments;
use app\models\TodoItems;
use app\models\TodoList;
use app\models\Topups;
use app\models\Transactions;
use app\models\TransactionsItems;
use app\models\UsersDocuments;
use app\models\Withdrawals;
use sizeg\jwt\JwtHttpBearerAuth;
use yii\db\ActiveQuery;
use yii\db\Exception;
use yii\db\Transaction;
use yii\debug\models\search\User;
use yii\filters\auth\HttpBearerAuth;
use yii\swiftmailer\Mailer;
use yii\web\NotFoundHttpException;
use Codeception\Events;
use Yii;
use yii\rest\ActiveController;
use yii\web\Response;
use yii\filters\ContentNegotiator;
use app\models\Users;
use yii\filters\auth\HttpBasicAuth;
use yii\web\UploadedFile;
use yii\helpers\Url;
//use paragraph1\phpFCM\Recipient\Device;
class ApiwebController extends ActiveController
{
    public $modelClass = 'app\models\Users';
    private $language = 1;
    public $baseurl = null;
    private $user_id;
    public static function allowedDomains()
    {
        return [
            '*',                        // star allows all domains
            // 'http://localhost:3000',
            // 'http://test2.example.com',
        ];
    }
    public function init()
    {

        $this->baseurl = Url::base(true);

        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
//    public function behaviors()
//    {
//
//        return [
//            'contentNegotiator' => [
//                'class' => ContentNegotiator::className(),
//                'formats' => [
//                    'application/json' => Response::FORMAT_JSON,
//                ]
//            ],
//
//        ];
//    }

    public function behaviors()
    {

        return [
            'contentNegotiator' => [
                'class' => ContentNegotiator::className(),
                'formats' => [
                    'application/json' => Response::FORMAT_JSON,
                ]
            ],

        ];
    }
    public function beforeAction($action)
    {
        header('Access-Control-Allow-Origin: *');

        header('Access-Control-Allow-Methods: GET, POST, OPTIONS');

        parent::beforeAction($action);


    }



    //Login users
    public function actionSearch()
{

    echo "sdsd";exit;
    $method = $_SERVER['REQUEST_METHOD'];
    if ($method != 'POST') {
        return array('status' => 0, 'message' => 'Bad request.');
    } else {
        $baseurl = $this->baseurl;
        if (!empty($_POST) && isset($_POST['lat']) && $_POST['lat']!='' && isset($_POST['long']) && $_POST['long']!='') {
            $lat = (isset($_POST['lat']) && $_POST['lat']!='')?$_POST['lat']:'';
            $long = (isset($_POST['long']) && $_POST['long']!='')?$_POST['long']:'';
            $furnished_status = (isset($_POST['furnished_status']) && $_POST['furnished_status']!='')?$_POST['furnished_status']:'';

            $property_type = (isset($_POST['property_type']) && $_POST['property_type']!='')?$_POST['property_type']:'';
            $room_type = (isset($_POST['room_type']) && $_POST['room_type']!='')?$_POST['room_type']:'';
            $preference = (isset($_POST['preference']) && $_POST['preference']!='')?$_POST['preference']:'';
            $price = (isset($_POST['price']) && $_POST['price']!='')?explode(",",$_POST['price']):'';
            $distance = (isset($_POST['distance']) && $_POST['distance']!='')?$_POST['distance']:'';
            $commute = (isset($_POST['commute']) && $_POST['commute']!='')?explode(",",$_POST['commute']):'';
            $amenities = (isset($_POST['amenities']) && $_POST['amenities']!='')?explode(",",$_POST['amenities']):'';
            $rooms = (isset($_POST['rooms']) && $_POST['rooms']!='')?$_POST['rooms']:'';
            $size = (isset($_POST['size']) && $_POST['size']!='')?$_POST['size']:'';
            $search = (isset($_POST['search']) && $_POST['search']!='')?$_POST['search']:'';
            $location = (isset($_POST['location']) && $_POST['location']!='')?$_POST['location']:'';
            //print_r($price);exit;
            // $searchword = $_POST['search'];

            $baseurl = $this->baseurl;
            $harvesformula = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) ) as distance': '';
            $harvesformula1 = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) )' : '';

            $query1 = Properties::find()
                ->select('id,latitude,longitude,property_no,title,description,location,property_type,type,room_type,preference,bedroom,bathroom,availability,size_of_area,price,'.$harvesformula)
                ->with([
                    'pictures'=>function ($query) use($baseurl) {
                        $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->one();
                    },
                ]);
            $query1->where(['status'=>'Active']);
            if(!empty($commute)){
                foreach ($commute as $key=>$item){
                    if($key==0) {
                        $query1->andWhere(new \yii\db\Expression('FIND_IN_SET("'.$item.'",commute)'));
                        // $query1->andWhere(['like', 'commute', $item]);
                    }else{
                        $query1->orWhere(new \yii\db\Expression('FIND_IN_SET("'.$item.'",commute)'));//->addParams([':commute_to_find' => $item]);

                    }

                }
            }
            if(!empty($amenities)){
                foreach ($amenities as $key=>$amenity){
                    if($key==0) {
                        $query1->andWhere(new \yii\db\Expression('FIND_IN_SET("'.$amenity.'",amenities)'));

                    }else{
                        $query1->orWhere(new \yii\db\Expression('FIND_IN_SET("'.$amenity.'",amenities)'));//->addParams([':commute_to_find' => $item]);


                    }

                }
            }
            if($location!=''){
                $query1->andWhere(['like', 'location', $location]);
            }
            if($search!=''){
                $query1->andWhere(['like', 'title', $search]);
            }
            if ($property_type!=''){
                $query1->andWhere(['property_type'=>$property_type]);
            }
            if($room_type!=''){
                $query1->andWhere(['room_type'=>$room_type]);
            }
            if($preference!=''){
                $query1->andWhere(['preference'=>$preference]);
            }
            if($distance!='' && $lat!='' && $long!=''){
                $query1->andWhere(['<=', $harvesformula1, $distance]);

            }
            if($furnished_status!=''){
                $query1->andWhere(['furnished_status'=>$furnished_status]);
            }
            if($rooms!=''){
                $query1->andWhere(['<=', 'bedroom', $rooms]);

            }
            if($size!=''){
                $query1->andWhere(['>=', 'size_of_area', $size]);

            }
            if(!empty($price)){
                $query1->andWhere(["between", "price", $price[0], $price[1]]);

            }



            if($lat!='' && $long!=''){
                $query1->orderBy(['distance'=>SORT_ASC]);
            }

            //$query1->all();

            $properties =  $query1->asArray()->all();
            //echo "<pre>";print_r($properties);exit;

            return array('status' => 1, 'data' => $properties,'total'=>count($properties));


        }else{
            return array('status' => 0, 'message' => 'Please allow location access to search property nearby.');

        }
    }


}

    public function actionPropertydetails()
    {

        $method = $_SERVER['REQUEST_METHOD'];
        if ($method != 'POST') {
            return array('status' => 0, 'message' => 'Bad request.');
        } else {
            if (!empty($_POST) && !empty($_POST['property_id'])) {
                $baseurl = $this->baseurl;
                $query1 = Properties::find()
                    ->select('id,user_id,latitude,longitude,property_no,title,description,location,property_type,type,room_type,preference,bedroom,bathroom,availability,size_of_area,price,carparks,amenities,commute,status,digital_tenancy')
                    ->with([
                        'images'=>function ($query) use($baseurl) {
                            $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")]);
                        },
                        'user'=>function($query){
                            $query->select(["id","full_name",new \yii\db\Expression("CONCAT('/uploads/users/', '', `image`) as profile_picture")]);
                        }
                    ])->where(['id'=>$_POST['property_id']]);

                $propertydata =  $query1->asArray()->one();
                if(empty($propertydata)){
                    return array('status' => 0, 'message' => 'No property details found.');

                }
                $propertydata['favourite'] = Properties::checkfavourite($_POST['property_id'],$user_id);
                $lat = $propertydata['latitude'];
                $long = $propertydata['longitude'];
                $harvesformula = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) ) as distance': '';
                $harvesformula1 = ($lat!='' && $long!='') ? '( 6371 * acos( cos( radians(' . $lat . ') ) * cos( radians(latitude) ) * cos( radians(longitude) - radians(' . $long . ') ) + sin( radians(' . $lat . ') ) * sin( radians(latitude) ) ) )' : '';
                $query1 = Properties::find()
                    ->select('id,latitude,longitude,property_no,title,description,location,property_type,type,room_type,preference,bedroom,bathroom,availability,size_of_area,price,'.$harvesformula)
                    ->with([
                        'pictures'=>function ($query) use($baseurl) {
                            $query->select(['id','property_id',new \yii\db\Expression("CONCAT('$baseurl/', '', `image`) as image")])->one();
                        },
                    ]);
                $distance = 20;
                $propertytype = $propertydata['property_type'];
                $query1->where(['!=', 'user_id', $user_id])->andWhere(['!=', 'id', $_POST['property_id']]);

                $query1->andWhere(['property_type'=>$propertytype]);
                if($distance!='' && $lat!='' && $long!=''){
                    $query1->andWhere(['<=', $harvesformula1, $distance]);

                }
                $properties =  $query1->asArray()->all();
                if(!empty($properties)){
                    foreach ($properties as $key=>$property){
                        $properties[$key]['favourite'] = Properties::checkfavourite($property['id'],$user_id);

                    }
                }
                $data['propertydata'] = $propertydata;
                $data['similarproperties'] = $properties;

                return array('status' => 1, 'data' => $data);


            }else{
                return array('status' => 0, 'message' => 'Please enter mandatory fields.');

            }
        }


    }


}
